-- MariaDB dump 10.17  Distrib 10.4.6-MariaDB, for Linux (x86_64)
--
-- Host: localhost    Database: 14k-lnmpa
-- ------------------------------------------------------
-- Server version	10.4.6-MariaDB

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `articles`
--

DROP TABLE IF EXISTS `articles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `articles` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `category_id` tinyint(3) unsigned NOT NULL,
  `user_id` int(10) unsigned NOT NULL,
  `is_draft` tinyint(3) unsigned NOT NULL DEFAULT 0 COMMENT '是否草稿',
  `view_count` int(10) unsigned NOT NULL DEFAULT 17 COMMENT '点击查看计数',
  `title` varchar(225) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'title',
  `title2` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'title-临时字段',
  `slug` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'url slug for SEO',
  `source` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '来源网址',
  `description` mediumtext COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '描述',
  `thumbnail` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '缩略图',
  `content` longtext COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '主体内容json{raw,html}',
  `published_at` datetime DEFAULT NULL COMMENT '发布时间',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `articles_slug_unique` (`slug`)
) ENGINE=InnoDB AUTO_INCREMENT=40 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='articles table';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `articles`
--

LOCK TABLES `articles` WRITE;
/*!40000 ALTER TABLE `articles` DISABLE KEYS */;
INSERT INTO `articles` VALUES (1,1,1,0,64,'在Vim里精通Vim','Proficiency in Vim','proficiency-in-vim','https://linux.cn/article-2597-1.html','Vim的难学是出了名的，而且当之无愧。虽然内置的vimtutor教材能够教会你一些非常基本的用法，能让你知道如何编辑一个文件，但如果想像传说中的vim高手那样精通它，该怎么办呢？\n\n通过简单的谷歌搜索，你能找到很多如何学习vim的好文章，比如vimcasts里就有很多非常不错的视频，但这些教材并不是用最直接的通过实践的方式来帮助你精通vim。你也许能学会一些非常有趣的技巧，但你如何能保证可以长久的记住如何使用它们？','https://net.lnmpa.top/thumbnail/2019/07/b37214a9b1a4e5ea6bff7b79639e3038.png-pic540','<p class=\"article_img\"><img class=\"alignnone size-large wp-image-7868 lazy \" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/07/b37214a9b1a4e5ea6bff7b79639e3038.png-pic540\" alt=\"学习难度曲线图\" width=\"560\" height=\"373\" data-original=\"https://img.linux.net.cn/data/attachment/album/201402/26/192015smcsfccss4snz6k7.jpg\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><span style=\"text-decoration: underline;\"><em>学习难度曲线图</em></span></p>\n<p>Vim的难学是出了名的，而且当之无愧。虽然内置的vimtutor教材能够教会你一些非常基本的用法，能让你知道如何编辑一个文件，但如果想像传说中的vim高手那样精通它，该怎么办呢？</p>\n<p>通过简单的谷歌搜索，你能找到很多如何学习vim的好文章，比如<a class=\"ext\" href=\"http://vimcasts.org/\" target=\"_blank\" rel=\"external nofollow noopener\">vimcasts</a>里就有很多非常不错的视频，但这些教材并不是用最直接的通过实践的方式来帮助你精通vim。你也许能学会一些非常有趣的技巧，但你如何能保证可以长久的记住如何使用它们？所以，你真正需要的是一个vim学习课件！</p>\n<p>vim学习课件由大量的文本形式的学习卡片组成，但里面包含一些vim命令，用来方便的控制这些卡片。此外，因为这个课件是放在vim里面的，你可以方便的试验卡上的任何命令。</p>\n<p><a class=\"ext\" href=\"https://gist.github.com/gmccreight/7519289/raw/master.vim\" target=\"_blank\" rel=\"external nofollow noopener\">这里</a>就是一个使用vim运行的vim学习课件的例子。当这个文件被载入后，它会将vim变成一个vim学习实验室。这种文件有两部分组成。第一部分是一些vimscript，当你加载这些文件时这些脚本将被执行。它们会创建一些键盘命令来让你按队列轻松的移动这些卡片。</p>\n<p>第二部分就是教材自身，分为&ldquo;学习中&rdquo;和&ldquo;已会&rdquo;两部分。(意思就是，当你对一些知识已经学习的很熟，不需要再学习了，你可以把它们移到&lsquo;已会&rsquo;队列里，放着以后再用)。课件里的东西很简单，就是一些命令和相关介绍。</p>\n<p>这里是一个<a class=\"ext\" href=\"http://screencast.com/t/pUiUrivSRF42\" target=\"_blank\" rel=\"external nofollow noopener\">视频演示</a>。</p>\n<p>下面是一个课件的片段：</p>\n<pre class=\"language-vim\"><code>= Study\n\nciw\n在不选中一个单词的首字母的情况下修改整个单词\n\n`.\n跳跃至上一次修改的地方\n\ng*\n向前搜索\n\ng;\n在修改记录中向后选择\n\ng,\n在修改记录着向前选择\n\n= Known\n\n*\n向前搜索</code></pre>\n<p>想开始学习，你只需要将这个文本内容拷贝到vim缓冲里，保存，然后敲入:so %来加载它。</p>\n<p>现在，敲击,,将第一个卡片从队列的顶端移动到底部。记忆，然后重复。</p>\n<p>用不了多久，你的vim学习课件就会变成一个非常棒的新知识库。你只需要将带有新技巧的卡片不断的加进去。</p>\n<p><em>看看我们的lab-in-a-file里有没有你喜欢的命令，是缺少了某些非常好的技巧吗？请在评论里告知我们，或<a class=\"ext\" href=\"https://gist.github.com/gmccreight/7519289/\" target=\"_blank\" rel=\"external nofollow noopener\">fork the gist</a>!</em></p>\n<p><strong>提示：</strong>从web页面里将脚本直接拷贝到vim里会粘贴出很多多余的空白符，致使脚本无法运行。而且，如果你使用的Windows系统，脚本的编码格式也会成为一个问题。</p>\n<hr />\n<div class=\"post_source\">[英文原文：<a class=\"ext\" href=\"http://nerds.weddingpartyapp.com/tech/2013/11/17/mastering-vim-in-vim/\" target=\"_blank\" rel=\"external nofollow noopener\">Mastering Vim in Vim</a>&nbsp;]</div>\n<div class=\"post_source\">via:&nbsp;http://www.vaikan.com/mastering-vim-in-vim/</div>','2014-02-06 02:30:51','2019-06-26 02:30:51','2019-09-18 22:07:07',NULL),(2,1,1,0,49,'你应该了解的 5 个 JavaScript 调试技巧','Five JavaScript debugging techniques you should know','five-javascript-debugging-techniques-you-should-know','https://linux.cn/article-2630-1.html','我之前使用过用printf debugging，自此之后我用这种方法似乎总能更快地解决bug。 在某些情况下需要更好的工具，下面是其中的一些佼佼者，我敢肯定你会发现它们的有用之处。','https://net.lnmpa.top/thumbnail/2019/07/202da559941baf38f7e304e2c666c9f7.png-pic540','<p>我之前使用过用<a class=\"ext\" href=\"http://stackoverflow.com/a/189570/269666\" target=\"_blank\" rel=\"external nofollow noopener\">printf debugging</a>，自此之后我用这种方法似乎总能更快地解决bug。 在某些情况下需要更好的工具，下面是其中的一些佼佼者，我敢肯定你会发现它们的有用之处：</p>\n<h3 align=\"left\">1. debugger</h3>\n<p>正如我<a class=\"ext\" href=\"http://berzniz.com/post/68001735765/javascript-hacks-for-hipsters\" target=\"_blank\" rel=\"external nofollow noopener\">之前提到</a>的，你可以使用&ldquo;debugger;&rdquo;语句在代码中加入强制断点。 需要断点条件吗？只需将它包装它在IF子句中：</p>\n<pre class=\"language-javascript\"><code>if (somethingHappens) {\n    debugger;\n}</code></pre>\n<pre>&nbsp;</pre>\n<p>只需记住在上线前移除。</p>\n<h3 align=\"left\">2. 当节点变化时断开</h3>\n<p>有时DOM像有了自己的想法。当不可思议的变化发生时很难找到问题的根源。 Chrome开发人员工有调试这个问题的超级有用技能。这就是所谓的&ldquo;Break on&hellip;&rdquo;，你可以通过在元素选项卡上右键DOM节点找到它。&nbsp;<br />断点可以在节点被删除后设置，当节点的属性更改或者其子树中的节点变化时。</p>\n<p class=\"article_img\"><img id=\"aimg_IQ3eb\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/07/202da559941baf38f7e304e2c666c9f7.png-pic540\" alt=\"\" width=\"500\" height=\"244\" border=\"0\" /></p>\n<h3 align=\"left\">3. Ajax断点</h3>\n<p>XHR断点或我称作的Ajax断点，也允许当一个预期Ajax请求创建时断开。 当调试你的web应用的网络时这是个让人吃惊的工具。</p>\n<p class=\"article_img\"><img id=\"aimg_DVQ4u\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/a805ecc6d9efd0a31dc4e7f938fc0ee3.png-pic540\" alt=\"\" width=\"363\" height=\"227\" border=\"0\" /></p>\n<h3 align=\"left\">4. 模拟不同的移动设备</h3>\n<p>Chrome增加了内置的移动设备模拟工具，这将简化你的日常工作。 选择任何非Console的选项卡找到它们，按键盘上的esc键并选择你想摸你的移动设备。 你当然不会得到一个真正的iPhone，但尺寸、触摸事件和agemt都会为你效仿。</p>\n<p class=\"article_img\"><img id=\"aimg_rwGZe\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/0c81e90d9d22086a1d8b8249164b370f.png-pic540\" alt=\"\" width=\"500\" height=\"257\" border=\"0\" /></p>\n<h3 align=\"left\">5. 通过审核提升你的站点</h3>\n<p><a class=\"ext\" href=\"http://developer.yahoo.com/yslow/\" target=\"_blank\" rel=\"external nofollow noopener\">YSlow</a>是个伟大的工具。Chrome也在开发人员工具下包含一个称作Audits的类似工具。 使用快速审核一下你的网站，来获得有用实际的优化技巧。</p>\n<p class=\"article_img\"><img id=\"aimg_X4F5r\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/7b37865f72d518d00cbaf6761b4def0d.png-pic540\" alt=\"\" width=\"500\" height=\"230\" border=\"0\" /></p>\n<p>还有什么呢? 没有这些工具我不能想象如何开发。当我发现新的后我会发布更多，敬请期待。</p>\n<hr />\n<p>英文原文：<a class=\"ext\" href=\"http://berzniz.com/post/78260747646/5-javascript-debugging-tips-youll-start-using-today\" target=\"_blank\" rel=\"external nofollow noopener\">5 Javascript debugging tips you&rsquo;ll start using today</a>&nbsp;&nbsp;</p>\n<p>via :&nbsp;<a class=\"ext\" href=\"http://www.oschina.net/translate/5-javascript-debugging-tips-youll-start-using-today\" target=\"_blank\" rel=\"external nofollow noopener\">http://www.oschina.net/translate/5-javascript-debugging-tips-youll-start-using-today</a></p>','2014-03-04 09:39:09','2019-06-26 03:42:08','2019-09-17 09:35:24',NULL),(3,1,1,0,50,'Google账户两步验证是如何工作的？','How does two-step verification work for Google accounts?','how-does-two-step-verification-work-for-google-accounts','https://linux.cn/article-2641-1.html','我们往往会在不同的网站上使用相同的密码，这样一旦一个网站账户的密码泄露，就会危及到其他使用相同密码的账户的安全，这也是最近的密码泄露事件造成如此大影响的原因。为了解决这个问题，一些网站在登录时要求除了输入账户密码之外，还需要输入另一个一次性密码。银行常用的动态口令卡就是这种一次性密码的例子，在线支付网站的一次性短信密码则是另一种实现。\n\nGoogle现在也推荐用户启用两步验证（Two-step verification）功能（Youtube上的视频介绍），并且除了以短信或者电话的方式发送一次性密码之外，还提供了另一种基于时间的一次性密码（Time-based One-time Password，简称TOTP），只需要在手机上安装密码生成应用程序，就可以生成一个随着时间变化的一次性密码，用于帐户验证，而且这个应用程序不需要连接网络即可工作。仔细看了看这个方案的实现原理，发现挺有意思的。下面简单介绍一下。','https://net.lnmpa.top/thumbnail/2019/07/133ff790dee7801419cc360fdf96e2b4.png-pic540','<h2>原理篇</h2>\n<p>我们往往会在不同的网站上使用相同的密码，这样一旦一个网站账户的密码泄露，就会危及到其他使用相同密码的账户的安全，这也是最近的密码泄露事件造成如此大影响的原因。为了解决这个问题，一些网站在登录时要求除了输入账户密码之外，还需要输入另一个一次性密码。银行常用的动态口令卡就是这种一次性密码的例子，在线支付网站的一次性短信密码则是另一种实现。</p>\n<p>Google现在也推荐用户启用<a class=\"ext\" href=\"https://www.google.com/support/accounts/bin/static.py?hl=en&amp;page=guide.cs&amp;guide=1056283&amp;topic=1056284\" target=\"_blank\" rel=\"external nofollow noopener\">两步验证</a>（Two-step verification）功能（Youtube上的<a class=\"ext\" href=\"http://www.youtube.com/watch?v=zMabEyrtPRg\" target=\"_blank\" rel=\"external nofollow noopener\">视频介绍</a>），并且除了以短信或者电话的方式发送一次性密码之外，还提供了另一种基于时间的一次性密码（Time-based One-time Password，简称TOTP），只需要在手机上安装密码生成应用程序，就可以生成一个随着时间变化的一次性密码，用于帐户验证，而且这个应用程序不需要连接网络即可工作。仔细看了看这个方案的实现原理，发现挺有意思的。下面简单介绍一下。</p>\n<h3>HTOP</h3>\n<p>Google的两步验证算法源自另一种名为HMAC-Based One-Time Password的算法，简称HOTP。HOTP的工作原理如下：</p>\n<p>客户端和服务器事先协商好一个密钥K，用于一次性密码的生成过程，此密钥不被任何第三方所知道。此外，客户端和服务器各有一个计数器C，并且事先将计数值同步。</p>\n<p>进行验证时，客户端对密钥和计数器的组合(K,C)使用<a class=\"ext\" href=\"http://en.wikipedia.org/wiki/HMAC\" target=\"_blank\" rel=\"external nofollow noopener\">HMAC</a>（Hash-based Message Authentication Code）算法计算一次性密码，公式如下：</p>\n<p>HOTP(K,C) = Truncate(HMAC-SHA-1(K,C))</p>\n<p>上面采用了HMAC-SHA-1，当然也可以使用HMAC-MD5等。HMAC算法得出的值位数比较多，不方便用户输入，因此需要截断（Truncate）成为一组不太长十进制数（例如6位）。计算完成之后客户端计数器C计数值加1。用户将这一组十进制数输入并且提交之后，服务器端同样的计算，并且与用户提交的数值比较，如果相同，则验证通过，服务器端将计数值C增加1。如果不相同，则验证失败。</p>\n<p>这里的一个比较有趣的问题是，如果验证失败或者客户端不小心多进行了一次生成密码操作，那么服务器和客户端之间的计数器C将不再同步，因此需要有一个重新同步（Resynchronization）的机制。这里不作具体介绍，详情可以参看RFC 4226。</p>\n<h3>TOTP</h3>\n<p>介绍完了HOTP，Time-based One-time Password（TOTP）也就容易理解了。TOTP将HOTP中的计数器C用当前时间T来替代，于是就得到了随着时间变化的一次性密码。非常有趣吧！</p>\n<p>虽然原理很简单，但是用时间来替代计数器会有一些特殊的问题，这些问题也很有意思，我们选取几个进行一下探讨。</p>\n<p>首先，时间T的值怎么选取？因为时间每时每刻都在变化，如果选择一个变化太快的T（例如从某一时间点开始的秒数），那么用户来不及输入密码。如果选择一个变化太慢的T（例如从某一时间点开始的小时数），那么第三方攻击者就有充足的时间去尝试所有可能的一次性密码（试想6位数字的一次性密码仅仅有10^6种组合），降低了密码的安全性。除此之外，变化太慢的T还会导致另一个问题。如果用户需要在短时间内两次登录账户，由于密码是一次性的不可重用，用户必须等到下一个一次性密码被生成时才能登录，这意味着最多需要等待59分59秒！这显然不可接受。综合以上考虑，Google选择了30秒作为时间片，T的数值为从Unix epoch（1970年1月1日 00:00:00）来经历的30秒的个数。</p>\n<p>第二个问题是，由于网络延时，用户输入延迟等因素，可能当服务器端接收到一次性密码时，T的数值已经改变，这样就会导致服务器计算的一次性密码值与用户输入的不同，验证失败。解决这个问题个一个方法是，服务器计算当前时间片以及前面的n个时间片内的一次性密码值，只要其中有一个与用户输入的密码相同，则验证通过。当然，n不能太大，否则会降低安全性。</p>\n<p>事实上，这个方法还有一个另外的功能。我们知道如果客户端和服务器的时钟有偏差，会造成与上面类似的问题，也就是客户端生成的密码和服务端生成的密码不一致。但是，如果服务器通过计算前n个时间片的密码并且成功验证之后，服务器就知道了客户端的时钟偏差。因此，下一次验证时，服务器就可以直接将偏差考虑在内进行计算，而不需要进行n次计算。</p>\n<p>以上就是Google两步验证的工作原理，推荐大家使用，这确实是保护帐户安全的利器。</p>\n<h3>参考资料</h3>\n<ol>\n<li>TOTP: Time-based One-time Password Algorithm, RFC Draft,&nbsp;http://tools.ietf.org/id/draft-mraihi-totp-timebased-06.html</li>\n<li>HOTP: An HMAC-Based One-Time Password Algorithm, RFC&nbsp;4226,&nbsp;http://tools.ietf.org/html/rfc4226</li>\n<li>Google Authenticator project,&nbsp;<a class=\"ext\" href=\"http://code.google.com/p/google-authenticator/\" target=\"_blank\" rel=\"external nofollow noopener\">http://code.google.com/p/google-authenticator/</a>&nbsp;</li>\n</ol>\n<p>（本节转自：&nbsp;<a class=\"ext\" href=\"http://blog.seetee.me/archives/73.html\" target=\"_blank\" rel=\"external nofollow noopener\">http://blog.seetee.me/archives/73.html</a>&nbsp;）</p>\n<h2>实现篇</h2>\n<p>实现Google Authenticator功能需要服务器端和客户端的支持。服务器端负责密钥的生成、验证一次性密码是否正确。客户端记录密钥后生成一次性密码。</p>\n<p>目前客户端有：</p>\n<ul>\n<li>android版：&nbsp;<a class=\"wrap external ext\" href=\"https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2\" target=\"_blank\" rel=\"external nofollow noopener\">Google 身份验证器</a></li>\n<li>iOS版：<a class=\"external ext\" href=\"https://itunes.apple.com/cn/app/google-authenticator/id388497605\" target=\"_blank\" rel=\"external nofollow noopener\"><span class=\"invisible\">https://</span><span class=\"visible\">itunes.apple.com/cn/app</span><span class=\"invisible\">/google-authenticator/id388497605</span></a></li>\n</ul>\n<h3>用户需要开启Google Authenticator服务时</h3>\n<p>1.服务器随机生成一个类似于『DPI45HKISEXU6HG7』的密钥，并且把这个密钥保存在数据库中。</p>\n<p>2.在页面上显示一个二维码，内容是一个URI地址（otpauth://totp/账号?secret=密钥），如『otpauth://totp/kisexu@gmail.com?secret=DPI45HCEBCJK6HG7』，下图：</p>\n<p class=\"article_img\"><img class=\"content_image lazy\" style=\"border-style: dashed;\" src=\"https://net.lnmpa.top/editor/2019/07/d42f14c444227ff1c7b9ea6ec677c9a7.png-pic540\" alt=\"\" width=\"200\" height=\"200\" data-rawwidth=\"200\" data-rawheight=\"200\" data-actualsrc=\"https://img.linux.net.cn/data/attachment/album/201404/02/163141ivbhs37f35gf57v0.jpg\" /></p>\n<p>3.客户端扫描二维码，把密钥『DPI45HKISEXU6HG7』保存在客户端。</p>\n<h3>用户需要登陆时</h3>\n<p>1.客户端每30秒使用密钥『DPI45HKISEXU6HG7』和时间戳通过一种『算法』生成一个6位数字的一次性密码，如『684060』。如下图android版界面：</p>\n<p class=\"article_img\"><img class=\"content_image lazy\" src=\"https://net.lnmpa.top/thumbnail/2019/07/133ff790dee7801419cc360fdf96e2b4.png-pic540\" alt=\"\" width=\"281\" data-rawwidth=\"281\" data-rawheight=\"398\" data-actualsrc=\"https://img.linux.net.cn/data/attachment/album/201403/06/220346ldursooushwubsda.jpg\" /></p>\n<p>2.用户登陆时输入一次性密码『684060』。</p>\n<p>3.服务器端使用保存在数据库中的密钥『DPI45HKISEXU6HG7』和时间戳通过同一种『算法』生成一个6位数字的一次性密码。大家都懂控制变量法，如果算法相同、密钥相同，又是同一个时间（时间戳相同），那么客户端和服务器计算出的一次性密码是一样的。服务器验证时如果一样，就登录成功了。</p>\n<h3>Tips：</h3>\n<p>1.这种『算法』是公开的，所以服务器端也有很多开源的实现，比如php版的：<a class=\"external ext\" href=\"https://github.com/PHPGangsta/GoogleAuthenticator\" target=\"_blank\" rel=\"external nofollow noopener\">https://github.com/PHPGangsta/GoogleAuthenticator</a>&nbsp;。上github搜索『Google Authenticator』可以找到更多语言版的Google Authenticator。</p>\n<p>2.所以，你在自己的项目可以轻松加入对Google Authenticator的支持，在一个客户端上显示多个账户的效果可以看上面android版界面的截图。目前dropbox、lastpass、wordpress，甚至vps等第三方应用都支持Google Authenticator登陆，请自行搜索。</p>\n<p>3.现实生活中，网银、网络游戏的实体动态口令牌其实原理也差不多，大家可以自行脑补下，谢谢。</p>\n<p>&nbsp;</p>\n<hr />\n<p>（本节转自：&nbsp;<a class=\"ext\" href=\"http://www.zhihu.com/question/20462696/answer/18731073\" target=\"_blank\" rel=\"external nofollow noopener\">http://www.zhihu.com/question/20462696/answer/18731073</a>&nbsp;）</p>','2014-03-06 04:51:40','2019-06-26 03:53:30','2019-09-17 09:09:25',NULL),(4,1,1,0,52,'加盐密码哈希：如何正确使用','Salting password hash: how to use it correctly','salting-password-hash-how-to-use-it-correctly','https://linux.cn/article-2722-1.html','如果你是Web开发者，你很可能需要开发一个用户账户系统。这个系统最重要的方面，就是怎样保护用户的密码。存放帐号的数据库经常成为入侵的目标，所以你必须做点什么来保护密码，以防网站被攻破时发生危险。最好的办法就是对密码进行加盐哈希，这篇文章将介绍它是如何做到这点。\n\n在对密码进行哈希加密的问题上，人们有许多争论和误解，这大概是由于网络上广泛的误传吧。密码哈希是一件非常简单的事情，但是依然有很多人理解错误了。本文阐述的并不是进行密码哈希唯一正确的方法，但是会告诉你为什么这样是正确的。','https://net.lnmpa.top/thumbnail/2019/07/70e3ce35d0f6db833c99959bb01ed167.png-pic540','<p>如果你是Web开发者，你很可能需要开发一个用户账户系统。这个系统最重要的方面，就是怎样保护用户的密码。存放帐号的数据库经常成为入侵的目标，所以你必须做点什么来保护密码，以防网站被攻破时发生危险。最好的办法就是对密码进行<strong>加盐哈希</strong>，这篇文章将介绍它是如何做到这点。</p>\n<p>在对密码进行哈希加密的问题上，人们有许多争论和误解，这大概是由于网络上广泛的误传吧。密码哈希是一件非常简单的事情，但是依然有很多人理解错误了。本文阐述的并不是进行密码哈希唯一正确的方法，但是会告诉你为什么这样是正确的。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/07/70e3ce35d0f6db833c99959bb01ed167.png-pic540\" alt=\"\" width=\"500\" height=\"375\" /></p>\n<div>\n<p><strong>郑重警告：如果你在试图编写自己的密码哈希代码，赶紧停下来！那太容易搞砸了。即使你受过密码学的高等教育，也应该听从这个警告。这是对所有人说的：不要自己写加密函数！安全存储密码的难题现在已经被解决了，请使用<a class=\"ext\" title=\"http://www.openwall.com/phpass/\" href=\"http://www.openwall.com/phpass/\" target=\"_blank\" rel=\"external nofollow noopener\">phpass</a>或者本文给出的一些源代码。</strong></p>\n</div>\n<p>如果因为某些原因你忽视了上面那个红色警告，请翻回去好好读一遍，我是认真的。这篇文章的目的不是教你研究出自己的安全算法，而是讲解为什么密码应该被这样储存。</p>\n<p>这里也给出了一些基于BSD许可的哈希函数源代码：</p>\n<ul>\n<li><a class=\"ext\" title=\"PHP Source Code\" href=\"http://blog.jobbole.com/61872/#php\" target=\"_blank\" rel=\"external nofollow noopener\">PHP Source Code</a></li>\n<li><a class=\"ext\" title=\"Java Source Code\" href=\"http://blog.jobbole.com/61872/#java\" target=\"_blank\" rel=\"external nofollow noopener\">Java Source Code</a></li>\n<li><a class=\"ext\" title=\"ASP.NET (C#) Source Code\" href=\"http://blog.jobbole.com/61872/#csharp\" target=\"_blank\" rel=\"external nofollow noopener\">ASP.NET (C#) Source Code</a></li>\n<li><a class=\"ext\" target=\"_blank\" rel=\"external nofollow\" name=\"toc1\"></a><a class=\"ext\" title=\"Ruby (on Rails) Source Code\" href=\"http://blog.jobbole.com/61872/#ruby\" target=\"_blank\" rel=\"external nofollow noopener\">Ruby (on Rails) Source Code</a></li>\n</ul>\n<div>\n<h2>为什么密码需要进行哈希？</h2>\n</div>\n<div>\n<pre class=\"language-markup\"><code>hash(\"hello\") = 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824\nhash(\"hbllo\") = 58756879c05c68dfac9866712fad6a93f8146f337a69afe7dd238f3364946366\nhash(\"waltz\") = c0e81794384491161f1777c232bc6bd9ec38f616560b120fda8e90f383853542</code></pre>\n</div>\n<p>哈希算法是一个单向函数。它可以将任何大小的数据转化为定长的&ldquo;指纹&rdquo;，并且无法被反向计算。另外，即使数据源只改动了一丁点，哈希的结果也会完全不同（参考上面的例子）。这样的特性使得它非常适合用于保存密码，因为我们需要加密后的密码无法被解密，同时也能保证正确校验每个用户的密码。</p>\n<p>在基于哈希加密的账户系统中，通常用户注册和认证的流程是这样的：</p>\n<ol>\n<li>用户注册一个帐号</li>\n<li>密码经过哈希加密储存在数据库中。只要密码被写入磁盘，任何时候都不允许是明文</li>\n<li>当用户登录的时候，从数据库取出已经加密的密码，和经过哈希的用户输入进行对比</li>\n<li>如果哈希值相同，用户获得登入授权，否则，会被告知输入了无效的登录信息</li>\n<li>每当有用户尝试登录，以上两步都会重复</li>\n</ol>\n<p>在第4步中，永远不要告诉用户到底是用户名错了，还是密码错了。只需要给出一个大概的提示，比如&ldquo;无效的用户名或密码&rdquo;。这可以防止攻击者在不知道密码的情况下，枚举出有效的用户名。</p>\n<p>需要提到的是，用于保护密码的哈希函数和你在数据结构中学到的哈希函数是不同的。比如用于实现哈希表这之类数据结构的哈希函数，它们的目标是快速查找，而不是高安全性。只有<strong>加密哈希函数</strong>才能用于保护密码，例如SHA256，SHA512，RipeMD和WHIRLPOOL。</p>\n<p>也许你很容易就认为只需要简单地执行一遍加密哈希函数，密码就能安全，那么你大错特错了。有太多的办法可以快速地把密码从简单哈希值中恢复出来，但也有很多比较容易实现的技术能使攻击者的效率大大降低。黑客的进步也在激励着这些技术的进步，比如这样一个网站：你可以提交一系列待破解的哈希值，并且在不到1秒的时间内得到了结果。显然，简单哈希加密并不能满足我们对安全性的需求。<a class=\"ext\" target=\"_blank\" rel=\"external nofollow\" name=\"toc2\"></a></p>\n<p>那么下一节会讲到几种常用的破解简单哈希加密的办法。</p>\n<div>\n<h2>如何破解哈希加密</h2>\n</div>\n<h3><strong>字典攻击和暴力攻击</strong></h3>\n<div>\n<pre class=\"language-markup\"><code>Dictionary Attack\nTrying apple : failed\nTrying blueberry : failed\nTrying justinbeiber : failed\n...\nTrying letmein : failed\nTrying s3cr3t : success!\n \nBrute Force Attack\nTrying aaaa : failed\nTrying aaab : failed\nTrying aaac : failed\n...\nTrying acdb : failed\nTrying acdc : success!</code></pre>\n</div>\n<p>&bull; 破解哈希加密最简单的办法，就是去猜，将每个猜测值哈希之后的结果和目标值比对，如果相同则破解成功。两种最常见的猜密码的办法是<strong>字典攻击</strong>和<strong>暴力攻击</strong>。</p>\n<p>&bull; 字典攻击需要使用一个字典文件，它包含单词、短语、常用密码以及其他可能用作密码的字符串。其中每个词都是进过哈希后储存的，用它们和密码哈希比对，如果相同，这个词就是密码。字典文件的构成是从大段文本中分解出的单词，甚至还包括一些数据库中真实的密码。然后还可以对字典文件进行更进一步的处理使它更有效，比如把单词中的字母替换为它们的&ldquo;形近字&rdquo;（hello变为h3110）。</p>\n<p>&bull; 暴力攻击会尝试每一个在给定长度下各种字符的组合。这种攻击会消耗大量的计算，也通常是破解哈希加密中效率最低的办法，但是它最终会找到正确的密码。因此密码需要足够长，以至于遍历所有可能的字符串组合将耗费太长时间，从而不值得去破解它。</p>\n<p>&bull; 我们没有办法阻止字典攻击和暴击攻击，尽管可以降低它们的效率，但那也不是完全阻止。如果你的密码哈希系统足够安全，唯一的破解办法就是进行字典攻击或者暴力遍历每一个哈希值。</p>\n<h3><strong>查表法</strong></h3>\n<div>\n<pre class=\"language-markup\"><code>Searching: 5f4dcc3b5aa765d61d8327deb882cf99: FOUND: password5\nSearching: 6cbe615c106f422d23669b610b564800: not in database\nSearching: 630bf032efe4507f2c57b280995925a9: FOUND: letMEin12\nSearching: 386f43fab5d096a7a66d67c8f213e5ec: FOUND: mcd0nalds\nSearching: d5ec75d5fe70d428685510fae36492d9: FOUND: p@ssw0rd!</code></pre>\n</div>\n<p>查表法对于破解一系列算法相同的哈希值有着无与伦比的效率。主要的思想就是<strong>预计算</strong>密码字典中的每个密码，然后把哈希值和对应的密码储存到一个用于快速查询的数据结构中。一个良好的查表实现可以每秒进行数百次哈希查询，即使表中储存了几十亿个哈希值。</p>\n<p>如果你想更好地体验查表法的速度，尝试使用CrackStation的<a class=\"ext\" title=\"https://crackstation.net/\" href=\"https://crackstation.net/\" target=\"_blank\" rel=\"external nofollow noopener\">free hash cracker</a>来破解下图中四个SHA256加密的哈希值吧。</p>\n<div>\n<pre class=\"language-markup\"><code>c11083b4b0a7743af748c85d343dfee9fbb8b2576c05f3a7f0d632b0926aadfc\n08eac03b80adc33dc7d8fbe44b7c7b05d3a2c511166bdb43fcb710b03ba919e7\ne4ba5cbd251c98e6cd1c23f126a3b81d8d8328abc95387229850952b3ef9f904\n5206b8b8a996cf5320cb12ca91c7b790fba9f030408efe83ebb83548dc3007bd</code></pre>\n</div>\n<h3><strong>反向查表法</strong></h3>\n<pre class=\"language-markup\"><code>Searching for hash(apple) in users\' hash list... : Matches [alice3, 0bob0, charles8]\nSearching for hash(blueberry) in users\' hash list... : Matches [usr10101, timmy, john91]\nSearching for hash(letmein) in users\' hash list... : Matches [wilson10, dragonslayerX, joe1984]\nSearching for hash(s3cr3t) in users\' hash list... : Matches [bruce19, knuth1337, john87]\nSearching for hash(z@29hjja) in users\' hash list... : No users used this password</code></pre>\n<p>这种方法可以使攻击者同时对多个哈希值发起字典攻击或暴力攻击，而不需要预先计算出一个查询表。</p>\n<p>首先攻击者构造一个基于密码-用户名的一对多的表，当然数据需要从某个已经被入侵的数据库获得，然后猜测一系列哈希值并且从表中查找拥有此密码的用户。通常许多用户可能有着相同的密码，因此这种攻击方式也显得尤为有效。</p>\n<h3><strong>彩虹表</strong></h3>\n<p>彩虹表是一种在时间和空间的消耗上找寻平衡的破解技术。它和查表法很类似，但是为了使查询表占用的空间更小而牺牲了破解速度。因为它更小，于是我们可以在一定的空间内存储更多的哈希值，从而使攻击更加有效。能够破解任何8位及以下长度MD5值的彩虹表已经<a class=\"ext\" title=\"http://www.freerainbowtables.com/en/tables2/\" href=\"http://www.freerainbowtables.com/en/tables2/\" target=\"_blank\" rel=\"external nofollow noopener\">出现</a>了。</p>\n<p>下面我们会讲到一种让查表法和彩虹表都失去作用的技术，叫做加盐<a class=\"ext\" target=\"_blank\" rel=\"external nofollow\" name=\"toc3\"></a>。</p>\n<div>\n<h2>加盐</h2>\n</div>\n<div>\n<pre class=\"language-markup\"><code>hash(\"hello\") = 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824\nhash(\"hello\" + \"QxLUF1bgIAdeQX\") = 9e209040c863f84a31e719795b2577523954739fe5ed3b58a75cff2127075ed1\nhash(\"hello\" + \"bv5PehSMfV11Cd\") = d1d3ec2e6f20fd420d50e2642992841d8338a314b8ea157c9e18477aaef226ab\nhash(\"hello\" + \"YYLmfY6IehjZMQ\") = a49670c3c18b9e079b9cfaf51634f563dc8ae3070db2c4a8544305df1b60f007</code></pre>\n</div>\n<p>查表法和彩虹表只有在所有密码都以相同方式进行哈希加密时才有效。如果两个用户密码相同，那么他们密码的哈希值也是相同的。我们可以通过&ldquo;随机化&rdquo;哈希来阻止这类攻击，于是当相同的密码被哈希两次之后，得到的值就不相同了。</p>\n<p>比如可以在密码中混入一段&ldquo;随机&rdquo;的字符串再进行哈希加密，这个被字符串被称作盐值。如同上面例子所展示的，这使得同一个密码每次都被加密为完全不同的字符串。为了校验密码是否正确，我们需要储存盐值。通常和密码哈希值一起存放在账户数据库中，或者直接存为哈希字符串的一部分。</p>\n<p>盐值并不需要保密，由于随机化了哈希值，查表法、反向查表法和彩虹表都不再有效。攻击者无法确知盐值，于是就不能预先计算出一个查询表或者彩虹表。这样每个用户的密码都混入不同的盐值后再进行哈希，因此反向查表法也变得难以实施。</p>\n<p>下面讲讲我们在实现加盐哈希的过程中通常会犯哪些错误<a class=\"ext\" target=\"_blank\" rel=\"external nofollow\" name=\"toc4\"></a>。</p>\n<h3><strong>错误一：短盐值和盐值重复</strong></h3>\n<p>最常见的错误就是在多次哈希加密中使用相同的盐值或者太短的盐值。</p>\n<h4><strong>盐值重复</strong></h4>\n<p>每次哈希加密都使用相同的盐值是很容易犯的一个错误，这个盐值要么被硬编码到程序里，要么只在第一次使用时随机获得。这样加盐的方式是做无用功，因为两个相同的密码依然会得到相同的哈希值。攻击者仍然可以使用反向查表法对每个值进行字典攻击，只需要把盐值应用到每个猜测的密码上再进行哈希即可。如果盐值被硬编码到某个流行的软件里，可以专门为这个软件制作查询表和彩虹表，那么破解它生成的哈希值就变得很简单了。</p>\n<p>用户创建账户或每次修改密码时，都应该重新生成新的盐值进行加密。</p>\n<h4><strong>短盐值</strong></h4>\n<p>如果盐值太短，攻击者可以构造一个查询表包含所有可能的盐值。以只有3个ASCII字符的盐值为例，一共有95x95x95=857,375种可能。这看起来很多，但是如果对于每个盐值查询表只包含1MB最常见的密码，那么总共只需要837GB的储存空间。一个不到100美元的1000GB硬盘就能解决问题。<br />同样地，用户名也不应该被用作盐值。尽管在一个网站中用户名是唯一的，但是它们是可预测的，并且经常重复用于其他服务中。攻击者可以针对常见用户名构建查询表，然后对用户名盐值哈希发起进攻。</p>\n<p>为了使攻击者无法构造包含所有可能盐值的查询表，盐值必须足够长。一个好的做法是使用和哈希函数输出的字符串等长的盐值，比如SHA256算法的输出是256bits(32 bytes)，那么盐值也至少应该是32个随机字节。</p>\n<h3><strong>错误二：两次哈希和组合哈希函数</strong></h3>\n<hr />\n<p><em>（译注：此节标题原文中的Wacky Hash Functions直译是古怪的哈希函数，大概是由于作者不认可这种组合多种哈希函数的做法，为了便于理解，本文还是翻译为组合哈希函数）</em></p>\n<p>这节讲述了另一种对密码哈希的误解：使用组合哈希函数。人们经常不由自主地认为将不同的哈希函数组合起来，结果会更加安全。实际上这样做几乎没有好处，仅仅造成了函数之间互相影响的问题，甚至有时候会变得更加不安全。永远不要尝试发明自己的加密方法，只需只用已经被设计好的标准算法。有的人会说使用多种哈希函数会使计算更慢，从而破解也更慢，但是还有其他的办法能更好地减缓破解速度，后面会提到的。</p>\n<p>这里有些低端的组合哈希函数，我在网上某些论坛看到它们被推荐使用：</p>\n<pre class=\"language-markup\"><code>md5(sha1(password))\nmd5(md5(salt) + md5(password))\nsha1(sha1(password))\nsha1(str_rot13(password + salt))\nmd5(sha1(md5(md5(password) + sha1(password)) + md5(password)))</code></pre>\n<p>不要使用其中任何一种。</p>\n<p>注意：这节内容是有争议的。我已经收到的大量的邮件，为组合哈希函数而辩护。他们的理由是如果攻击者不知道系统使用的哪种哈希函数，那么也就很难预先为这种组合构造出彩虹表，于是破解起来会花费更多的时间。</p>\n<p>诚然，攻击者在不知道加密算法的时候是无法发动攻击的，但是不要忘了<a class=\"ext\" title=\"https://en.wikipedia.org/wiki/Kerckhoffs%27s_principle\" href=\"https://en.wikipedia.org/wiki/Kerckhoffs%27s_principle\" target=\"_blank\" rel=\"external nofollow noopener\">Kerckhoffs&rsquo;s principle</a>，攻击者通常很容易就能拿到源码（尤其是那些免费或开源的软件）。通过系统中取出的一些密码-哈希值对应关系，很容易反向推导出加密算法。破解组合哈希函数确实需要更多时间，但也只是受了一点可以确知的因素影响。更好的办法是使用一个很难被并行计算出结果的迭代算法，然后增加适当的盐值防止彩虹表攻击。</p>\n<p>当然你实在想用&ldquo;标准的&rdquo;组合哈希函数，比如HMAC，也是可以的。但如果只是为了使破解起来更慢，那么先读读下面讲到的密钥扩展。</p>\n<p>创造新的哈希函数可能带来安全问题，构造哈希函数的组合又可能带来函数间互相影响的问题，它们带来的一丁点好处和这些比起来真是微不足道。显然最好的做法是使用标准的、经过完整测试的算法。</p>\n<h4><strong>哈希碰撞</strong></h4>\n<p>哈希函数将任意大小的数据转化为定长的字符串，因此其中一定有些输入经过哈希计算之后得到了相同的结果。加密哈希函数的设计就是为了使这样的碰撞尽可能难以被发现。随着时间流逝，密码学家发现攻击者越来越容易找到碰撞了，最近的例子就是MD5算法的碰撞已经确定被发现了。</p>\n<p>碰撞攻击的出现表明很可能有一个和用户密码不同的字符串却和它有着相同的哈希值。然而，即使在MD5这样脆弱的哈希函数中找到碰撞也需要耗费大量的计算，因此这样的碰撞&ldquo;意外地&rdquo;在实际中出现的可能性是很低的。于是站在实用性的角度上可以这么说，加盐MD5和加盐SHA256的安全性是一样的。不过可能的话，使用本身更安全的哈希函数总是好的，比如SHA256、SHA512、RipeMD或者WHIRLPOOL<a class=\"ext\" target=\"_blank\" rel=\"external nofollow\" name=\"toc5\"></a>。</p>\n<h4><strong>正确的做法：恰当使用哈希加密</strong></h4>\n<p>本节会准确讲述应该如何对密码进行哈希加密。其中第一部分介绍最基本的要素，也是在哈希加密中一定要做到的；后面讲解怎样在这个基础上进行扩展，使得加密更难被破解。</p>\n<h4><strong>基本要素：加盐哈希</strong></h4>\n<p><strong>忠告：你不仅仅要用眼睛看文章，更要自己动手去实现后面讲到的&ldquo;让密码更难破解：慢哈希函数&rdquo;。</strong></p>\n<p>在前文中我们已经看到，利用查表法和彩虹表，普通哈希加密是多么容易被恶意攻击者破解，也知道了可以通过随机加盐的办法也解决这个问题。那么到底应该使用怎样的盐值呢，又如何把它混入密码？</p>\n<p style=\"text-align: center;\">盐值应该使用<strong>基于加密的伪随机数生成器（Cryptographically Secure Pseudo-Random Number Generator &ndash; CSPRNG）</strong>来生成。CSPRNG和普通的随机数生成器有很大不同，如C语言中的rand()函数。物如其名，CSPRNG专门被设计成用于加密，它能提供高度随机和无法预测的随机数。我们显然不希望自己的盐值被猜测到，所以一定要使用CSPRNG。下面的表格列出了当前主流<span class=\"wp_keywordlink\"><a class=\"ext\" title=\"如何选择语言和编程语言排名相关文章\" href=\"http://blog.jobbole.com/tag/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/\" target=\"_blank\" rel=\"external nofollow noopener\">编程语言</a></span>中的CSPRNG方法：</p>\n<table style=\"width: 612px;\" border=\"1\">\n<tbody>\n<tr>\n<td style=\"width: 186px;\"><strong>Platform</strong></td>\n<td style=\"width: 424px;\"><strong>CSPRNG</strong></td>\n</tr>\n<tr>\n<td style=\"width: 186px;\">PHP</td>\n<td style=\"width: 424px;\"><a class=\"ext\" title=\"http://php.net/manual/en/function.mcrypt-create-iv.php\" href=\"http://php.net/manual/en/function.mcrypt-create-iv.php\" target=\"_blank\" rel=\"external nofollow noopener\">mcrypt_create_iv</a>,&nbsp;<a class=\"ext\" title=\"http://php.net/manual/en/function.openssl-random-pseudo-bytes.php\" href=\"http://php.net/manual/en/function.openssl-random-pseudo-bytes.php\" target=\"_blank\" rel=\"external nofollow noopener\">openssl_random_pseudo_bytes</a></td>\n</tr>\n<tr>\n<td style=\"width: 186px;\">Java</td>\n<td style=\"width: 424px;\"><a class=\"ext\" title=\"http://docs.oracle.com/javase/6/docs/api/java/security/SecureRandom.html\" href=\"http://docs.oracle.com/javase/6/docs/api/java/security/SecureRandom.html\" target=\"_blank\" rel=\"external nofollow noopener\">java.security.SecureRandom</a></td>\n</tr>\n<tr>\n<td style=\"width: 186px;\">Dot NET (C#, VB)</td>\n<td style=\"width: 424px;\"><a class=\"ext\" title=\"http://msdn.microsoft.com/en-us/library/system.security.cryptography.rngcryptoserviceprovider.aspx\" href=\"http://msdn.microsoft.com/en-us/library/system.security.cryptography.rngcryptoserviceprovider.aspx\" target=\"_blank\" rel=\"external nofollow noopener\">System.Security.Cryptography.RNGCryptoServiceProvider</a></td>\n</tr>\n<tr>\n<td style=\"width: 186px;\">Ruby</td>\n<td style=\"width: 424px;\"><a class=\"ext\" title=\"http://rubydoc.info/stdlib/securerandom/1.9.3/SecureRandom\" href=\"http://rubydoc.info/stdlib/securerandom/1.9.3/SecureRandom\" target=\"_blank\" rel=\"external nofollow noopener\">SecureRandom</a></td>\n</tr>\n<tr>\n<td style=\"width: 186px;\">Python</td>\n<td style=\"width: 424px;\"><a class=\"ext\" title=\"http://docs.python.org/library/os.html\" href=\"http://docs.python.org/library/os.html\" target=\"_blank\" rel=\"external nofollow noopener\">os.urandom</a></td>\n</tr>\n<tr>\n<td style=\"width: 186px;\">Perl</td>\n<td style=\"width: 424px;\"><a class=\"ext\" title=\"http://search.cpan.org/~mkanat/Math-Random-Secure-0.06/lib/Math/Random/Secure.pm\" href=\"http://search.cpan.org/~mkanat/Math-Random-Secure-0.06/lib/Math/Random/Secure.pm\" target=\"_blank\" rel=\"external nofollow noopener\">Math::Random::Secure</a></td>\n</tr>\n<tr>\n<td style=\"width: 186px;\">C/C++ (Windows API)</td>\n<td style=\"width: 424px;\"><a class=\"ext\" title=\"http://en.wikipedia.org/wiki/CryptGenRandom\" href=\"http://en.wikipedia.org/wiki/CryptGenRandom\" target=\"_blank\" rel=\"external nofollow noopener\">CryptGenRandom</a></td>\n</tr>\n<tr>\n<td style=\"width: 186px;\">Any language on GNU/Linux or Unix</td>\n<td style=\"width: 424px;\">Read from&nbsp;<a class=\"ext\" title=\"http://en.wikipedia.org/wiki/dev/random\" href=\"http://en.wikipedia.org/wiki/dev/random\" target=\"_blank\" rel=\"external nofollow noopener\">/dev/random or /dev/urandom</a></td>\n</tr>\n</tbody>\n</table>\n<p>对于每个用户的每个密码，盐值都应该是独一无二的。每当有新用户注册或者修改密码，都应该使用新的盐值进行加密。并且这个盐值也应该足够长，使得有足够多的盐值以供加密。一个好的标准的是：盐值至少和哈希函数的输出一样长；盐值应该被储存和密码哈希一起储存在账户数据表中。</p>\n<h4><strong>存储密码的步骤</strong></h4>\n<ol>\n<li>使用CSPRNG生成一个长度足够的盐值</li>\n<li>将盐值混入密码，并使用<strong>标准的</strong>加密哈希函数进行加密，如SHA256</li>\n<li>把哈希值和盐值一起存入数据库中对应此用户的那条记录</li>\n</ol>\n<h4><strong>校验密码的步骤</strong></h4>\n<ol>\n<li>从数据库取出用户的密码哈希值和对应盐值</li>\n<li>将盐值混入用户输入的密码，并且使用同样的哈希函数进行加密</li>\n<li>比较上一步的结果和数据库储存的哈希值是否相同，如果相同那么密码正确，反之密码错误</li>\n</ol>\n<p>文章最后有几个加盐密码哈希的代码实现，分别使用了PHP、C#、Java和Ruby。</p>\n<h4><strong>在Web程序中，永远在服务器端进行哈希加密</strong></h4>\n<p>如果你正在开发一个Web程序，你可能会疑惑到底在哪进行加密。是使用JavaScript在用户的<span class=\"wp_keywordlink\"><a class=\"ext\" title=\"现代浏览器的工作原理\" href=\"http://blog.jobbole.com/12749/\" target=\"_blank\" rel=\"external nofollow noopener\">浏览器</a></span>上操作呢，还是将密码&ldquo;裸体&rdquo;传送到服务器再进行加密？</p>\n<p>即使浏览器端用JavaScript加密了，你仍然需要在服务端再次进行加密。试想有个网站在浏览器将密码经过哈希后传送到服务器，那么在认证用户的时候，网站收到哈希值和数据库中的值进行比对就可以了。这看起来比只在服务器端加密安全得多，因为至始至终没有将用户的密码明文传输，但实际上不是这样。</p>\n<p>问题在于，从客户端来看，经过哈希的密码逻辑上成为用户真正的密码。为了通过服务器认证，用户只需要发送密码的哈希值即可。如果有坏小子获取了这个哈希值，他甚至可以在不知道用户密码的情况通过认证。更进一步，如果他用某种手段入侵了网站的数据库，那么不需要去猜解任何人的密码，就可以随意使用每个人的帐号登录。</p>\n<p>这并不是说你不应该在浏览器端进行加密，但是如果你这么做了，一定要在服务端再次加密。在浏览器中进行哈希加密是个好想法，不过实现的时候注意下面几点：</p>\n<p>&bull; 客户端密码哈希并<strong>不能代替</strong>HTTPS（SSL/TLS）。如果浏览器和服务器之间的连接是不安全的，那么中间人攻击可以修改JavaScript代码，删除加密函数，从而获取用户密码。</p>\n<p>&bull; 有些浏览器不支持JavaScript，也有的用户禁用了浏览器的JavaScript功能。为了最好的兼容性，你的程序应该检测JavaScript是否可用，如果答案为否，需要在服务端模拟客户端的加密。</p>\n<p>&bull; 客户端哈希同样需要加盐，很显然的办法就是向服务器请求用户的盐值，但是不要这么做。因为这给了坏蛋一个机会，能够在不知道密码的情况下检测用户名是否有效。既然你已经在服务端对密码进行了加盐哈希，那么在客户端把用户名（或邮箱）加上网站特有的字符串（如域名）作为盐值是可行的。</p>\n<h4><strong>让密码更难破解：慢哈希函数</strong></h4>\n<p>加盐使攻击者无法采用特定的查询表和彩虹表快速破解大量哈希值，但是却不能阻止他们使用字典攻击或暴力攻击。高端的显卡（GPU）和定制的硬件可以每秒进行数十亿次哈希计算，因此这类攻击依然可以很高效。为了降低攻击者的效率，我们可以使用一种叫做<strong>密钥扩展</strong>的技术。</p>\n<p>这种技术的思想就是把哈希函数变得很慢，于是即使有着超高性能的GPU或定制硬件，字典攻击和暴力攻击也会慢得让攻击者无法接受。最终的目标是把哈希函数的速度降到足以让攻击者望而却步，但造成的延迟又不至于引起用户的注意。</p>\n<p>密钥扩展的实现是依靠一种CPU密集型哈希函数。不要尝试自己发明简单的迭代哈希加密，如果迭代不够多，是可以被高效的硬件快速并行计算出来的，就和普通哈希一样。应该使用标准的算法，比如<a class=\"ext\" title=\"http://en.wikipedia.org/wiki/PBKDF2\" href=\"http://en.wikipedia.org/wiki/PBKDF2\" target=\"_blank\" rel=\"external nofollow noopener\">PBKDF2</a>或者<a class=\"ext\" title=\"http://en.wikipedia.org/wiki/Bcrypt\" href=\"http://en.wikipedia.org/wiki/Bcrypt\" target=\"_blank\" rel=\"external nofollow noopener\">bcrypt</a>。<a class=\"ext\" title=\"https://defuse.ca/php-pbkdf2.htm\" href=\"https://defuse.ca/php-pbkdf2.htm\" target=\"_blank\" rel=\"external nofollow noopener\">这里</a>可以找到PBKDF2在PHP上的一种实现。</p>\n<p>这类算法使用一个安全因子或迭代次数作为参数，这个值决定了哈希函数会有多慢。对于桌面软件或者手机软件，获取参数最好的办法就是执行一个简短的性能基准测试，找到使哈希函数大约耗费0.5秒的值。这样，你的程序就可以尽可能保证安全，而又不影响到用户体验。</p>\n<p>如果你在一个Web程序中使用密钥扩展，记得你需要额外的资源处理大量认证请求，并且密钥扩展也使得网站更容易遭受拒绝服务攻击（DoS）。但我依然推荐使用密钥扩展，不过把迭代次数设定得低一点，你应该基于认证请求最高峰时的剩余硬件资源来计算迭代次数。要求用户每次登录时输入验证码可以消除拒绝服务的威胁。另外，一定要把你的系统设计为迭代次数可随时调整的。</p>\n<p>如果你担心计算量带来的负载，但又想在Web程序中使用密钥扩展，可以考虑在浏览器中用JavaScript完成。<a class=\"ext\" title=\"http://crypto.stanford.edu/sjcl/\" href=\"http://crypto.stanford.edu/sjcl/\" target=\"_blank\" rel=\"external nofollow noopener\">Stanford JavaScript Crypto Library</a>里包含了PBKDF2的实现。迭代次数应该被设置到足够低，以适应速度较慢的客户端，比如移动设备。同时当客户端不支持JavaScript的时候，服务端应该接手计算。客户端的密钥扩展并不能免除服务端进行哈希加密的职责，你必须对客户端传来的哈希值再次进行哈希加密，就像对付一个普通密码一样。</p>\n<h4><strong>无法破解的哈希加密：密钥哈希和密码哈希设备</strong></h4>\n<p>只要攻击者可以检测对一个密码的猜测是否正确，那么他们就可以进行字典攻击或暴力攻击。因此下一步就是向哈希计算中增加一个<strong>密钥</strong>，只有知道这个密钥的人才能校验密码。有两种办法可以实现：将哈希值加密，比如使用AES算法；将密钥包含到哈希字符串中，比如使用密钥哈希算法<a class=\"ext\" title=\"http://en.wikipedia.org/wiki/HMAC\" href=\"http://en.wikipedia.org/wiki/HMAC\" target=\"_blank\" rel=\"external nofollow noopener\">HMAC</a>。</p>\n<p>听起来很简单，做起来就不一样了。这个密钥需要在任何情况下都不被攻击者获取，即使系统因为漏洞被攻破了。如果攻击者获取了进入系统的最高权限，那么不论密钥被储存在哪，他们都可以窃取到。因此密钥需要储存在外部系统中，比如另一个用于密码校验的物理服务器，或者一个关联到服务器的特制硬件，如<a class=\"ext\" title=\"https://www.yubico.com/YubiHSM\" href=\"https://www.yubico.com/YubiHSM\" target=\"_blank\" rel=\"external nofollow noopener\">YubiHSM</a>。</p>\n<p>我强烈推荐大型服务（10万用户以上）使用这类办法，因为我认为面对如此多的用户是有必要的。</p>\n<p>如果你难以负担多个服务器或专用的硬件，仍然有办法在一个普通Web服务器上利用密钥哈希技术。大部分针对数据库的入侵都是由于<a class=\"ext\" title=\"http://en.wikipedia.org/wiki/SQL_injection\" href=\"http://en.wikipedia.org/wiki/SQL_injection\" target=\"_blank\" rel=\"external nofollow noopener\">SQL注入攻击</a>，因此不要给攻击者进入本地文件系统的权限（禁止数据库服务访问本地文件系统，如果它有这个功能的话）。这样一来，当你随机生成一个密钥存到通过Web程序无法访问的文件中，然后混入加盐哈希，得到的哈希值就不再那么脆弱了，即便这时数据库遭受了注入攻击。不要把将密钥硬编码到代码里，应该在安装时随机生成。这当然不如独立的硬件系统安全，因为如果Web程序存在SQL注入点，那么可能还存在其他一些问题，比如本地文件包含漏洞（Local File Inclusion），攻击者可以利用它读取本地密钥文件。无论如何，这个措施比没有好。</p>\n<p>请注意密钥哈希不代表无需进行加盐。高明的攻击者迟早会找到办法窃取密钥，因此依然对密码哈希进行加盐和密钥扩展很重要。</p>\n<h4><strong>其他安全措施</strong></h4>\n<p>哈希加密可以在系统发生入侵时保护密码，但这并不能使整个程序更加安全。首先还有很多事情需要做，来保证密码哈希（和其他用户数据）不被窃取。</p>\n<p>即使经验丰富的开发者也需要额外学习安全知识，才能写出安全的程序。这里有个关于Web程序漏洞的资源：<a class=\"ext\" title=\"https://www.owasp.org/index.php/Main_Page\" href=\"https://www.owasp.org/index.php/Main_Page\" target=\"_blank\" rel=\"external nofollow noopener\">The Open Web Application Security Project (OWASP)</a>，还有一个很好的介绍：<a class=\"ext\" title=\"http://owasptop10.googlecode.com/files/OWASP%20Top%2010%20-%202013.pdf\" href=\"http://owasptop10.googlecode.com/files/OWASP%20Top%2010%20-%202013.pdf\" target=\"_blank\" rel=\"external nofollow noopener\">OWASP Top Ten Vulnerability List</a>。除非你了解列表中所有的漏洞，才能尝试编写一个处理敏感数据的Web程序。雇主也有责任保证他所有的开发人员都有资质编写安全的程序。</p>\n<p>对你的程序进行第三方&ldquo;渗透测试&rdquo;是一个不错的选择。最好的<span class=\"wp_keywordlink\"><a class=\"ext\" title=\"程序员的本质\" href=\"http://blog.jobbole.com/821/\" target=\"_blank\" rel=\"external nofollow noopener\">程序员</a></span>也可能犯错，因此有一个安全专家审查你的代码寻找潜在的漏洞是有意义的。找寻值得信赖的机构（或招聘人员）来对你的代码进行审查。安全审查应该从编码的初期就着手进行，一直贯穿整个开发过程。</p>\n<p>监控你的网站来发现入侵行为也是很重要的，我推荐至少雇佣一个人全职负责监测和处理安全隐患。如果有个漏洞没被发现，攻击者可能通过网站利用恶意软件感染访问者，因此检测漏洞并且及时应对是十分重要的<a class=\"ext\" target=\"_blank\" rel=\"external nofollow\" name=\"toc6\"></a>。</p>\n<div>\n<h2>常见问题</h2>\n</div>\n<h3><strong>我应该使用什么哈希算法？</strong></h3>\n<p><strong>应该</strong>使用：</p>\n<ul>\n<li>本文末尾的PHP source code,&nbsp;Java source code,&nbsp;C# source code&nbsp;or the&nbsp;Ruby source code</li>\n<li>OpenWall的<a class=\"ext\" title=\"http://www.openwall.com/phpass/\" href=\"http://www.openwall.com/phpass/\" target=\"_blank\" rel=\"external nofollow noopener\">Portable PHP password hashing framework</a></li>\n<li>任何先进的、被良好测试过的哈希加密算法，比如SHA256，SHA512，RipeMD，WHIRLPOOL，SHA3等等</li>\n<li>设计良好的密钥扩展算法，如<a class=\"ext\" title=\"http://en.wikipedia.org/wiki/PBKDF2\" href=\"http://en.wikipedia.org/wiki/PBKDF2\" target=\"_blank\" rel=\"external nofollow noopener\">PBKDF2</a>，<a class=\"ext\" title=\"http://en.wikipedia.org/wiki/Bcrypt\" href=\"http://en.wikipedia.org/wiki/Bcrypt\" target=\"_blank\" rel=\"external nofollow noopener\">bcrypt</a>，<a class=\"ext\" title=\"http://www.tarsnap.com/scrypt.html\" href=\"http://www.tarsnap.com/scrypt.html\" target=\"_blank\" rel=\"external nofollow noopener\">scrypt</a></li>\n<li>安全的crypt()版本（$2y$，$5$，$6$）</li>\n</ul>\n<p><strong>不要</strong>使用：</p>\n<ul>\n<li>过时的函数，比如MD5或SHA1</li>\n<li>不安全的crypt()版本（$1$，$2$，$2x$，$3$）</li>\n<li>任何你自己设计的加密算法。只应该使用那些在公开领域中的，并且被密码学家完整测试过的技术</li>\n</ul>\n<p>尽管还没有一种针对MD5或SHA1非常效率的攻击手段，但是它们太古老也被广泛地认为不足以胜任存储密码的工作（某种程度上甚至是错误的），因此我也不推荐使用它们。但是有个例外，PBKDF2中频繁地使用了SHA1作为它底层的哈希函数。</p>\n<h3><strong>当用户忘记密码的时候，怎样进行重置？</strong></h3>\n<p>我个人的观点是，当前所有广泛使用的密码重置机制都是不安全的。如果你对安全性有极高的要求，比如一个加密服务，那么不要允许用户重置密码。<br />大多数网站向那些忘记密码的用户发送电子邮件来进行身份认证。首先，需要随机生成一个<strong>一次性</strong>的令牌，它直接关联到用户的账户。然后将这个令牌混入一个重置密码的链接中，发送到用户的电子邮箱。最后当用户点击这个包含有效令牌的链接时，提示他们可以设置新的密码。要确保这个令牌只对一个账户有效，以防攻击者从邮箱获取到令牌后，用来重置其他用户的密码。</p>\n<p>令牌必须在15分钟内使用，并且一旦被使用就立即失效。当用户重新请求令牌时，或用户登录成功时（说明他还记得密码），使原令牌失效也是一个好做法。如果一个令牌始终不过期，那么它一直可以用于入侵用户的帐号。电子邮件（SMTP）是一个纯文本协议，并且网络上有很多恶意路由在截取邮件信息。在用户修改密码后，那些包含重置密码链接的邮件在很长一段时间内依然缺乏保护。因此应该尽早使令牌过期，降低把用户信息暴露给攻击者的可能。</p>\n<p>攻击者是可以篡改令牌的，所以不要把账户信息和失效时间存储在里面。这些信息应该以不可猜解的二进制形式存在，并且只用来识别数据库中某条用户的记录。</p>\n<p>永远不要通过电子邮件向用户发送新密码，同时也记得在用户重置密码的时候随机生成一个新的盐值用于加密，不要重复使用之前密码的那个盐值。</p>\n<h3><strong>当账户数据库被泄漏或入侵时，应该怎么做？</strong></h3>\n<p>你首先需要做的，是查看系统被暴露到什么程度了，然后修复这个攻击者利用的漏洞。如果你没有应对入侵的经验，我强烈推荐雇一个第三方安全机构来做这件事。</p>\n<p>将一个漏洞精心掩盖期待没有人能注意到，是否听起来很省事而又诱人呢？但是这样只会让你显得更糟糕，因为你在用户不知情的情况下，将他们的密码和个人信息暴露在危险之中。即使用户还无法理解到底发生了什么，你也应该尽快履行告知的义务。比如在首页放置一个链接，指向对此问题更详细的说明，可能的话还可以通过电子邮件告知用户目前的情况。</p>\n<p>向你的用户说明你是如何保护他们的密码的&mdash;&mdash;最好是使用了加盐哈希&mdash;&mdash;即便如此恶意黑客也能使用字典攻击和暴力攻击。设想用户可能在很多服务中使用相同的密码，攻击者会用找到的密码去尝试登录其他网站。提示你的用户应该修改所有相似的密码，不论它们被使用在哪个服务上，并且强制用户下次登录你的网站时修改密码。大部分用户会尝试将密码&ldquo;修改&rdquo;为和之前相同的以便记忆，你应该使用老密码的哈希值来确保用户无法这么做。</p>\n<p>即使有加盐哈希的保护，攻击者也很可能快速破解其中一些脆弱的密码。为了减少攻击者使用的它们机会，你应该对这些密码的帐号发送认证电子邮件，直到用户修改了密码。可以参考上一个问题，其中有一些实现电子邮件认证的要点。</p>\n<p>另外也要告诉你的用户，网站到底储存了哪些个人信息。如果你的数据库中有用户的信用卡号，你应该指导用户检查自己近期的账单，并且注销掉这张信用卡。</p>\n<h3><strong>我应该使用什么样的密码规则？是否应该强制用户使用复杂的密码？</strong></h3>\n<p>如果你的服务对安全性没有严格的要求，那么不要对用户进行限制。我推荐在用户输入密码的时候，页面上显示出密码强度，由用户自己决定需要多安全的密码。如果你的服务对安全有特殊的需求，那就应该强制用户输入长度至少为12个字符的密码，并且其中至少包括两个字母、两个数字和两个符号。</p>\n<p>不要过于频繁地强制你的用户修改密码，最多6个月1次，因为那样做会使用户疲于选择一个强度足够好的密码。更好的做法是指导用户在他们感觉密码可能泄漏的时候去主动修改，并且提示用户不要把密码告诉任何人。如果这是在商业环境中，鼓励你的员工利用工作时间熟记并使用他们的密码。</p>\n<h3><strong>如果攻击者入侵了我的数据库，他们难道不能把其中的密码哈希替换为自己的值，然后登录系统么？</strong></h3>\n<p>当然可以，但是如果他已经入侵了你的数据库，那么很可能已经有权限访问你服务器上任何东西了，因此完全没必要登录账户去获取他想要的。对密码进行哈希加密的手段，（对网站而言）不是保护网站免受入侵，而是在入侵已经发生时保护数据库中的密码。</p>\n<p>通过为数据库连接设置两种权限，可以防止密码哈希在遭遇注入攻击时被篡改。一种权限用于创建用户：它对用户表可读可写；另一种用于用户登录，它只能读用户表而不能写。</p>\n<h3><strong>为什么我非得用像HMAC那种特殊的算法？为什么不能简单地把密钥混入密码？</strong></h3>\n<p>像MD5、SHA1和SHA2这类哈希函数是基于<a class=\"ext\" title=\"http://en.wikipedia.org/wiki/Merkle&acirc;\" href=\"http://en.wikipedia.org/wiki/Merkle%C3%A2%C2%80\" target=\"_blank\" rel=\"external nofollow noopener\">Merkle&ndash;Damg&aring;rd</a>构造的，因此在长度扩展攻击面前非常脆弱。就是说如果已经知道一个哈希值H(X)，对于任意的字符串Y，攻击者可以计算出H(pad(X) + Y)的值，而不需要知道X是多少，其中pad(X)是哈希函数的填充函数（padding function，比如MD5将数据每512bit分为一组，最后不足的将填充字节）。</p>\n<p>在攻击者不知道密钥（key）的情况下，他仍然可以根据哈希值H(key + message)计算出H(pad(key + message) + extension)。如果这个哈希值用于身份认证，并且依靠其中的密钥来防止攻击者篡改消息，这个办法已经行不通了。因为攻击者无需知道密钥，也能构造出包含message + extension的一个有效的哈希值。</p>\n<p>目前还不清楚攻击者能否用这个办法更快破解密码，但是由于这种攻击的出现，在密钥哈希中使用上述哈希函数已经被认为是差劲的实践了。也许某天高明的密码学家会发现一个利用长度扩展攻击的新思路，从而更快地破解密码，所以还是使用HMAC吧。</p>\n<h3><strong>盐值应该加到密码前面还是后面？</strong></h3>\n<p>都行，但是在一个程序中应该保持一致，以免出现互操作方面的问题。目前看来加到密码之前是比较常用的做法。</p>\n<h3><strong>为什么本文中的代码在比较哈希值的时候，都是经过固定的时间才返回结果？</strong></h3>\n<p>让比较过程耗费固定的时间可以保证攻击者无法对一个在线系统使用计时攻击，以此获取密码的哈希值，然后进行本地破解工作。</p>\n<p>比较两个字节序列（字符串）的标准做法是，从第一字节开始，每个字节逐一顺序比较。只要发现某字节不相同了，就可以立即返回&ldquo;假&rdquo;的结果。如果遍历整个字符串也没有找到不同的字节，那么两个字符串就是相同的，并且返回&ldquo;真&rdquo;。这意味着比较字符串的耗时决定于两个字符串到底有多大的不同。</p>\n<p>举个例子，使用标准的方法比较&ldquo;xyzabc&rdquo;和&ldquo;abcxyz&rdquo;，由于第一个字符就不同，不需要检查后面的内容就可以马上返回结果。相反，如果比较&ldquo;aaaaaaaaaaB&rdquo;和&ldquo;aaaaaaaaaaZ&rdquo;，比较算法就需要遍历最后一位前所有的&ldquo;a&rdquo;，然后才能知道它们是不相同的。</p>\n<p>假设攻击者妄图入侵一个在线系统，并且此系统限制了每秒只能尝试一次用户认证。还假设他已经知道了密码哈希所有的参数（盐值、哈希函数的类型等等），除了密码的哈希值和密码本身（显然啊，否则还破解个什么）。如果攻击者能精确测量在线系统耗时多久去比较他猜测的密码和真实密码，那么他就能使用计时攻击获取密码的哈希值，然后进行离线破解，从而绕过系统对认证频率的限制。</p>\n<p>首先攻击者准备256个字符串，它们的哈希值的第一字节包含了所有可能的情况。然后用它们去系统中尝试登录，并记录系统返回结果所消耗的时间，耗时最长的那个就是第一字节猜对的那个。接下来用同样的方式猜测第二字节、第三字节等等。直到攻击者获取了最够长的哈希值片段，最后只需在自己的机器上破解即可，完全不受在线系统的限制。</p>\n<p>乍看之下在网络上进行计时攻击是不可能做到的，然而有人已经实现了，并运用到<a class=\"ext\" title=\"https://crypto.stanford.edu/~dabo/papers/ssl-timing.pdf\" href=\"https://crypto.stanford.edu/~dabo/papers/ssl-timing.pdf\" target=\"_blank\" rel=\"external nofollow noopener\">实际中</a>了。因此本文提供的代码才使用固定的时间去比较字符串，不论它们有多相似。</p>\n<h3><strong>&ldquo;慢比较&rdquo;的代码是如何工作的？</strong></h3>\n<p>上一个问题解释了为什么&ldquo;慢比较&rdquo;是有必要的，现在来讲解一下代码具体是怎么实现的。</p>\n<pre class=\"language-markup\"><code>private static boolean slowEquals(byte[] a, byte[] b)\n{\n    int diff = a.length ^ b.length;\n    for(int i = 0; i &lt; a.length &amp;&amp; i &lt; b.length; i++)\n    diff |= a[i] ^ b[i];\n    return diff == 0;\n}</code></pre>\n<p>代码中使用了异或运算符&ldquo;^&rdquo;（XOR）来比较两个整数是否相等，而不是&ldquo;==&rdquo;。当且仅当两位相等时，异或的结果才是0。因为0 XOR 0 = 0, 1 XOR 1 = 0, 0 XOR 1 = 1, 1 XOR 0 = 1。应用到整数中每一位就是说，当且仅当字节两个整数各位都相等，结果才是0。</p>\n<p>代码中的第一行，比较a.length和b.length，相同的话diff是0，否则diff非0。然后使用异或比较数组中各字节，并且将结果和diff求或。如果有任何一个字节不相同，diff就会变成非0的值。因为或运算没有&ldquo;置0&rdquo;的功能，所以循环结束后diff是0的话只有一种可能，那就是循环前两个数组长度相等（a.length == b.length），并且数组中每一个字节都相同（每次异或的结果都非0）。<br />我们使用XOR而不是&ldquo;==&rdquo;来比较整数的原因是：&ldquo;==&rdquo;通常被翻译/编译/解释为带有分支的语句。例如C语言中的&ldquo;diff &amp;= a == b&rdquo;可能在x86机器成被编译为如下汇编语言：</p>\n<div>\n<pre class=\"language-markup\"><code>MOV EAX, [A]\nCMP [B], EAX\nJZ equal\nJMP done\nequal:\nAND [VALID], 1\ndone:\nAND [VALID], 0</code></pre>\n</div>\n<p>其中的分支导致代码运行的时间不固定，决定于两个整数相等的程度和CPU内部的跳转预测机制（branch prediction）。</p>\n<p>而C语言代码&ldquo;diff |=a ^ b&rdquo;会被编译为下面的样子，它执行的时间和两个整数是什么样的情况无关。</p>\n<div>\n<pre class=\"language-markup\"><code>MOV EAX, [A]\nXOR EAX, [B]\nOR [DIFF], EAX</code></pre>\n</div>\n<h3><strong>弄这么麻烦干嘛？</strong></h3>\n<p>用户在你的网站上输入密码，说明他们相信你会保障密码的安全。如果你的数据库被黑了，又没有对用户密码加以保护，恶意黑客就可以使用这些密码去入侵用户在其他网站或服务的账户（大部分人会在各处使用相同的密码）。这不仅仅关乎你网站的安全，更关系到用户的。你需要对用户的安全负责。</p>\n<div>\n<h2>PHP PBKDF2 密码哈希代码</h2>\n</div>\n<ul>\n<li><a class=\"ext\" title=\"PHP Source Code\" href=\"http://blog.jobbole.com/61872/#php\" target=\"_blank\" rel=\"external nofollow noopener\">PHP Source Code</a></li>\n<li><a class=\"ext\" title=\"Java Source Code\" href=\"http://blog.jobbole.com/61872/#java\" target=\"_blank\" rel=\"external nofollow noopener\">Java Source Code</a></li>\n<li><a class=\"ext\" title=\"ASP.NET (C#) Source Code\" href=\"http://blog.jobbole.com/61872/#csharp\" target=\"_blank\" rel=\"external nofollow noopener\">ASP.NET (C#) Source Code</a></li>\n<li><a class=\"ext\" title=\"Ruby (on Rails) Source Code\" href=\"http://blog.jobbole.com/61872/#ruby\" target=\"_blank\" rel=\"external nofollow noopener\">Ruby (on Rails) Source Code</a></li>\n</ul>\n<p>下面是PBKDF2在PHP中一种安全的实现，你也可以在<a class=\"ext\" title=\"https://defuse.ca/php-pbkdf2.htm\" href=\"https://defuse.ca/php-pbkdf2.htm\" target=\"_blank\" rel=\"external nofollow noopener\">这个页面</a>找到测试用例和基准测试的代码。</p>\n<p>&nbsp;</p>\n<hr />\n<p>文章和代码由<a class=\"ext\" title=\"https://defuse.ca/\" href=\"https://defuse.ca/\" target=\"_blank\" rel=\"external nofollow noopener\">Defuse Security</a>编写。</p>\n<p>原文链接：&nbsp;<a class=\"ext\" href=\"https://crackstation.net/hashing-security.htm\" target=\"_blank\" rel=\"external nofollow noopener\">Crackstation</a>&nbsp;&nbsp;&nbsp;翻译：&nbsp;<a class=\"ext\" href=\"http://blog.jobbole.com/\" target=\"_blank\" rel=\"external nofollow noopener\">伯乐在线&nbsp;</a>-&nbsp;<a class=\"ext\" href=\"http://blog.jobbole.com/author/oliverpp/\" target=\"_blank\" rel=\"external nofollow noopener\">蒋生武</a></p>\n<p>译文链接：&nbsp;<a class=\"ext\" href=\"http://blog.jobbole.com/61872/\" target=\"_blank\" rel=\"external nofollow noopener\">http://blog.jobbole.com/61872/</a></p>','2014-03-20 23:56:58','2019-06-26 13:04:33','2019-09-17 09:09:22',NULL),(5,1,1,0,73,'厌倦了编程书？来试试这3种提高编程技能的有趣方法吧','Tired of programming books? Try these three interesting ways to improve your programming skills','tired-of-programming-books-try-these-three-interesting-ways-to-improve-your-programming-skills','https://linux.cn/article-2799-1.html','如果你曾经从书上学习编写代码，你就知道那有多乏味。为什么不试试一些激动人心的方法来使学习更有乐趣呢？下面介绍的这些网站每个都有自己独特的风格，但是它们都加入了游戏元素。这些稀奇古怪而有趣的游戏能够使你找回学习的乐趣。','https://net.lnmpa.top/thumbnail/2019/07/1864286e290cdabdac4c478d05125be7.png-pic540','<p class=\"article_img\">如果你曾经从书上学习编写代码，你就知道那有多乏味。为什么不试试一些激动人心的方法来使学习更有乐趣呢？</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/07/1864286e290cdabdac4c478d05125be7.png-pic540\" alt=\"\" width=\"540\" height=\"420\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><span style=\"text-decoration: underline;\"><em>fun1</em></span></p>\n<p>下面介绍的这些网站每个都有自己独特的风格，但是它们都加入了游戏元素。这些稀奇古怪而有趣的游戏能够使你找回学习的乐趣。</p>\n<h3><a class=\"ext\" href=\"http://codecombat.com/\" target=\"_blank\" rel=\"external nofollow noopener\">Code Combat</a></h3>\n<p class=\"article_img\">如果你正在<a class=\"ext\" href=\"http://www.makeuseof.com/tag/5-great-free-resources-for-learning-javascript-by-doing/\" target=\"_blank\" rel=\"external nofollow noopener\">学习JavaScript</a>并且没有多少-或根本没有-编码经验，来试试这个免费的游戏。控制一个巫师和他的随从。关卡设置从简单的概念如预先编好的动作到带条件判断的行动到更高级的咒语例如计算。<br /><img class=\"aligncenter size-full wp-image-7962\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/d43c62a2a8db686f3d34c9e086a3b7bf.png-pic540\" alt=\"\" width=\"540\" height=\"369\" /><br />学习过程是在一个可爱的魔幻RPG中进行，有骑士，食人魔和法师。移动你的随从，瞄准你的敌人，发动攻击，并且粉碎黑暗的爪牙吧！</p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><span style=\"text-decoration: underline;\"><em>fun2</em></span></p>\n<p class=\"article_img\">Code Combat于2013年上线，所以现在关卡还很有限。但是Code Combat的开发团队将会像着了魔一样开发更多的教程和游戏，所以让我们共同期待。他们已经把所有东西开源了所以能人巧匠们(使用者)可以开发他们自己的关卡。<br /><img class=\"aligncenter size-full wp-image-7963\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/4112373123ec4c3df60bce7995be87d6.png-pic540\" alt=\"fun3\" width=\"540\" height=\"334\" /><br />Code Combat福利：如果你能够通过Gridmancer关卡，他们将会帮助你<a class=\"ext\" href=\"http://blog.codecombat.com/beat-this-level-get-a-programming-job\" target=\"_blank\" rel=\"external nofollow noopener\">在旧金山找一份编程工作</a>！</p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><span style=\"text-decoration: underline;\"><em>fun3</em></span></p>\n<h3><a class=\"ext\" href=\"http://www.codewars.com/\" target=\"_blank\" rel=\"external nofollow noopener\">Code Wars</a></h3>\n<p class=\"article_img\">虽然你在Code Wars上不会带上法师的帽子，但是你可以通过完成kata，或者编程挑战来收集点数获得升级。你可以使用Ruby,JavaScript或<a class=\"ext\" href=\"http://www.makeuseof.com/tag/coffeescript-is-javascript-without-the-headaches/\" target=\"_blank\" rel=\"external nofollow noopener\">Coffeescript</a>来完成kata。一个kata可以由不同的语言完成，这样你就可以很好的理解不同的语言如何完成同样的任务。计划会加入更多的语言，例如Python，Java，PHP，和Objective-C，所有这些语言支持已经在开发中。<br /><img class=\"aligncenter size-full wp-image-7964\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/443a75f70406c30e2d39e6eb9f3e58a3.png-pic540\" alt=\"fun4\" width=\"540\" height=\"356\" /><br />这个以武术/武士为主题的系统充满了乐趣和吸引力&ndash;每次当你完成了一个kata，你将会得到荣誉点数。收集足够的荣誉点数使你提升到下个级别，解锁更多的编程挑战。你也可以通过编写自己的kata，评论别人的kata，或者推荐你的朋友来到Code Wars获取荣誉点数。</p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><span style=\"text-decoration: underline;\"><em>fun4</em></span></p>\n<p class=\"article_img\">这些挑战都非常有趣和实用，并且Code Wars是唯一一个教你测试你自己代码的站点。但是这里的说明信息很少，所以请做好大量google解决问题的准备。虽然这是一个缓慢的过程，但是它确实是一个学习真正写代码是什么样子的好方法。<br /><img class=\"aligncenter size-full wp-image-7965\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/d301b36629c7c1e01f943be256ec1e43.png-pic540\" alt=\"fun5\" width=\"540\" height=\"374\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><span style=\"text-decoration: underline;\"><em>fun5</em></span></p>\n<p>它不像Code Combat那么傻瓜式，但是支持更多的语言，并且对于初学者来说更加成熟。Code Wars也拥有一个很强力的社区，它能够帮助初学者入门并且坚持下去。并且升级和获得声望奖励对自己也是一种鼓励！</p>\n<h3><a class=\"ext\" href=\"http://www.codeschool.com/\" target=\"_blank\" rel=\"external nofollow noopener\">Code School</a></h3>\n<p class=\"article_img\">和前面两个站点不同，Code School不是免费的。服务费用是290刀每年(29刀每月)，这感觉就像是打劫。但是Code School的团体创建了一个非常吸引人并且实用的网站，如果你热衷于学习编程，那这笔投资是值得的。通过订阅，你可以参加任何你喜欢的课程并且在任何时候切换它们。他们也提供了一个2天的&rdquo;<a class=\"ext\" href=\"https://www.codeschool.com/hall_passes/213f3fedb6b9/claim_shared\" target=\"_blank\" rel=\"external nofollow noopener\">Hall Pass</a>&ldquo;，它使你能够在48小时内免费试用网站上的一切内容。<br /><img class=\"aligncenter size-full wp-image-7966\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/9fb6d83c7c09daeffd250e8c0ac94955.png-pic540\" alt=\"fun6\" width=\"540\" height=\"353\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><span style=\"text-decoration: underline;\"><em>fun6</em></span></p>\n<p>这里有Ruby，Javascript，HTML/CSS和iOS开发课程，所以你的可选范围很宽泛。你也可以尝试一些选修内容例如Chrome开发工具，谷歌云端硬盘API，和Git。</p>\n<p>在上面讨论的3个网站里，Code School最没有游戏的感觉。每一个课程由一个简短视频和一个挑战组成；完成一个挑战会获得点数，询问提示会扣除这个问题所值的点数。</p>\n<p class=\"article_img\"><img class=\"aligncenter size-full wp-image-7967\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/4447b23ef5c92c941e09d76026b66233.png-pic540\" alt=\"fun7\" width=\"540\" height=\"350\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><span style=\"text-decoration: underline;\"><em>fun7</em></span></p>\n<p>Code School点数目前还干不了什么。在以前，完成一个课程，你会得到5刀可以用于Code School商店的代金券，但现在这个程序已经被废除了。但愿我们在将来能看到类似的机制！但现在，你可以收集点数和徽章并向你的朋友们展示。这确实代表了一些东西。</p>\n<h3>你应该选择哪一个</h3>\n<p>这里已经介绍了3种有趣的学习编程的方法 &ndash; 你应该先尝试哪一个呢？我推荐你<a class=\"ext\" href=\"http://www.makeuseof.com/tag/pick-programming-language-learn-today-get-great-job-2-years/\" target=\"_blank\" rel=\"external nofollow noopener\">先选一门编程语言</a>并且根据你的经验水平和你想开发的东西来选择网站。举例来说，如果你想开发一个在线应用，你应该选择JavaScript。如果你没有或只有一点编程经验，注册Code Combat吧。如果你了解基本概念，来试试Code Wars。如果你想<a class=\"ext\" href=\"http://www.makeuseof.com/tag/create-smartphone-app-infinite-monkeys-coding-knowledge-required/\" target=\"_blank\" rel=\"external nofollow noopener\">开发iPhone应用</a>或者Ruby On Rails应用， Code School是你的不错选择。</p>\n<p>如果你不知道你想要做什么或者不知道从哪开始， 我推荐Code Combat。它是三个网站中最友好并且最简单的，并且为你很好的介绍了编程语言的基本概念。如果你觉得你真的很喜欢它，那你就可以从那开始。</p>\n<p>Code School，虽然很实用，但是在开始之前需要掌握一些知识。如果你不清楚一个方法和一个数组的区别，你可能会想从更简单一些的地方开始。</p>\n<h3>更进一步</h3>\n<p>一旦你经过了这些网站的耳濡目染，你就已经为更具挑战的任务做好准备了，比如创建你的第一个应用。这时，限制你的只有你的想象力！</p>\n<p>为你的web应用找个安全的网页主机空间，或者写一个程序帮助你的日常工作。为你自己买一台树莓派或者Arduino来试验你的新技能。别忘了看看我们的<a class=\"ext\" href=\"http://www.makeuseof.com/pages/great-things-small-package-your-unofficial-raspberry-pi-manual\" target=\"_blank\" rel=\"external nofollow noopener\">树莓派指导</a>和<a class=\"ext\" href=\"http://www.makeuseof.com/pages/getting-started-with-arduino-a-beginners-guide\" target=\"_blank\" rel=\"external nofollow noopener\">Arduino指导</a>。</p>\n<p>你原来使用过任何游戏或者有趣的站点来学习编程吗？对于学习编程你最喜欢的方式又是什么呢？</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<hr />\n<p>原文链接：&nbsp;<a class=\"ext\" href=\"http://www.makeuseof.com/tag/bored-programming-books-try-3-fun-ways-level-coding-skills/\" target=\"_blank\" rel=\"external nofollow noopener\">Dann Albright</a>&nbsp;翻译：&nbsp;<a class=\"ext\" href=\"http://www.geekfan.net/\" target=\"_blank\" rel=\"external nofollow noopener\">极客范&nbsp;</a>-&nbsp;<a class=\"ext\" href=\"http://www.geekfan.net/author/boydw/\" target=\"_blank\" rel=\"external nofollow noopener\">Boyd Wang</a><br />译文链接：&nbsp;<a class=\"ext\" href=\"http://www.geekfan.net/7960/\" target=\"_blank\" rel=\"external nofollow noopener\">http://www.geekfan.net/7960/</a></p>','2014-04-03 05:43:33','2019-06-27 01:47:18','2019-09-17 09:35:29',NULL),(6,1,1,0,47,'排名前8的 PHP 调试工具，你认可吗？','Top 8 PHP debugging tools, do you agree?','top-8-php-debugging-tools-do-you-agree','https://linux.cn/article-2836-1.html','Web 开发并不是一项轻松的任务，有超级多服务端脚本语言提供给开发者，但是当前 PHP 因为具有额外的一些强大的功能而越来越流行。PHP 是最强大的服务端脚本语言之一，同时也是 web 开发者和设计者用的最多，最经常使用的语言。\nPHP 有非常多的工具，其中包括测试和优化工具，文档工具，代码编辑器，安全工具，同时也支持框架和在线工具。这就是为什么在那么短的时间内吸引了那么的开发者使用它。工具总是能帮助简化和加速开发的过程。','https://net.lnmpa.top/thumbnail/2019/07/c53e7cb873f27c66b30289137276490a.png-pic540','<p class=\"article_img\">Web 开发并不是一项轻松的任务，有超级多服务端脚本语言提供给开发者，但是当前 PHP 因为具有额外的一些强大的功能而越来越流行。PHP 是最强大的服务端脚本语言之一，同时也是 web 开发者和设计者用的最多，最经常使用的语言。</p>\n<p>PHP 有非常多的工具，其中包括测试和优化工具，文档工具，代码编辑器，安全工具，同时也支持框架和在线工具。这就是为什么在那么短的时间内吸引了那么的开发者使用它。工具总是能帮助简化和加速开发的过程。</p>\n<p>今天我们主要是围绕最受开发者们欢迎的前 8个 PHP 的调试工具。调试工具在开发过程中占有很重要的地位，开发者的代码有特别多的行数，同时也可能存在错误，而调试工具就能帮助开发者找出这些错误并能很好的调试程序。</p>\n<h3>1) Pinba</h3>\n<p>Pinba 是个开源的 MySQL 存储引擎，主要任务是帮助 web 开发者监控所有 PHP 脚本的性能。使用 MySQL 作为只读接口，作为一个 PHP 的实时监控服务器。</p>\n<p class=\"article_img\"><img id=\"aimg_W1100\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/a108723d6d278dcd24c2b7eb56b6058c.png-pic540\" alt=\"\" width=\"540\" height=\"364\" border=\"0\" /></p>\n<h3>2) PHP Dyn</h3>\n<p>PHP Dyn 是个令人惊奇的扩展，帮助调试 PHP 脚本。它的主要是能跟踪执行脚本，也是一款提供给 PHP 开发者的开源软件。</p>\n<p class=\"article_img\"><img id=\"aimg_kYaFv\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/eb03e61a8921d4f6e4141ecafea6a97b.png-pic540\" alt=\"\" width=\"540\" height=\"364\" border=\"0\" /></p>\n<h3>3) Kint</h3>\n<p>Kint 是另一个调试 PHP 脚本的最好的调试工具，非常容易使用，强大，而且 PHP 的 web 开发者可以随意定制。</p>\n<p class=\"article_img\"><img id=\"aimg_SNIqW\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/6e3dc520689bcb2971d49f72fb5427cc.png-pic540\" alt=\"\" width=\"540\" height=\"\" border=\"0\" /></p>\n<h3>4) PHP MD</h3>\n<p>PHPMD 可以从源代码中找到错误，并且使用一系列有限的定义规则就可以轻松解决问题。</p>\n<p class=\"article_img\"><img id=\"aimg_oQ59x\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/922799bf3c24bf8076d15a6508379658.png-pic540\" alt=\"\" width=\"540\" height=\"364\" border=\"0\" /></p>\n<h3>5) PHP Debug Bar</h3>\n<p>PHP Debug Bar 是另一个非常棒的 PHP 调试工具，可以显示 web 应用的 pst 数据。</p>\n<p class=\"article_img\"><img id=\"aimg_ntZlD\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/b2b14c4bcb2d2938751354f7078a9d64.png-pic540\" alt=\"\" width=\"540\" height=\"364\" border=\"0\" /></p>\n<h3>6) Whoops</h3>\n<p>Whoops 是个更高效的 PHP 调试库，帮助开发者构建和维护他们的项目，使其做得更好。Whoops 也是个开源软件，有着许多杰出的特性。</p>\n<p class=\"article_img\"><img id=\"aimg_WckWP\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/03dbc86858d3798f02e23a3a7a8fe032.png-pic540\" alt=\"\" width=\"540\" height=\"364\" border=\"0\" /></p>\n<h3>7) Xdebug</h3>\n<p>Xdebug 是提供给 PHP 用户的一个扩展，有着许多高级的特性，每一时刻都有不同类型的更新。</p>\n<p class=\"article_img\"><img id=\"aimg_oKjJV\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/07/c53e7cb873f27c66b30289137276490a.png-pic540\" alt=\"\" width=\"540\" height=\"364\" border=\"0\" /></p>\n<h3>8) Krumo</h3>\n<p>Krumo 是 PHP 调试工具的杰出代表，可以显示任意的 PHP 变量的结构信息。</p>\n<p class=\"article_img\"><img id=\"aimg_an7gL\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/f39d29c9af8ff98171f32218ca815144.png-pic540\" alt=\"\" width=\"540\" height=\"364\" border=\"0\" /></p>\n<p>欣赏完这些超级棒的 PHP 调试工具，分享一下你的经验，大家畅所欲言吧！</p>\n<p>&nbsp;</p>\n<hr />\n<p>文章转载自：开源中国社区 [<a class=\"ext\" href=\"http://www.oschina.net/\" target=\"_blank\" rel=\"external nofollow noopener\">http://www.oschina.net</a>]&nbsp;<a class=\"ext\" href=\"http://www.oschina.net/news/49207/best-php-debugging-tools\" target=\"_blank\" rel=\"external nofollow noopener\">http://www.oschina.net/news/49207/best-php-debugging-tools</a></p>','2014-04-11 10:37:47','2019-06-27 02:40:30','2019-09-16 06:49:49',NULL),(7,1,1,0,45,'如何参与一个GitHub开源项目？','How to participate in a GitHub open source project?','how-to-participate-in-a-github-open-source-project','https://linux.cn/article-2849-1.html','本文是Github官方给出的参与Github上开源项目的一些指导，对希望加入开源社区的开发者是一个不错的参考。\n最近一年开源项目特别的热，很多技术大会或论坛都以开源项目作为主题进行探讨，可见这是一种趋势。而Github作为开源项目的著名托管地，可谓无人不知，越来越多的个人和公司纷纷加入到Github的大家族里来，为开源尽一份绵薄之力。对于个人来讲，你把自己的项目托管到Github上并不表示你参与了Github开源项目，只能说你开源了自己的项目，可以任别人自由下载。','https://net.lnmpa.top/thumbnail/2019/07/55511905c7cf320d4caeb2df23852575.png-pic540','<p>最近一年开源项目特别的热，很多技术大会或论坛都以开源项目作为主题进行探讨，可见这是一种趋势。而Github作为开源项目的著名托管地，可谓无人不知，越来越多的个人和公司纷纷加入到Github的大家族里来，为开源尽一份绵薄之力。对于个人来讲，你把自己的项目托管到Github上并不表示你参与了Github开源项目，只能说你开源了自己的项目，可以任别人自由下载。</p>\n<p>那么该如何参与Github的开源项目呢？相信很多人都有这方面的疑问，网上也有一些参差不齐的教程教大家如何&ldquo;Pull Request&rdquo;、如何&ldquo;Commit&rdquo;等等。但这些教程往往不够全面或不够完全正确，搞不好可能让你陷入一个误区。鉴于此，前几天Github官方团队写了一篇很棒的文章&nbsp;<a class=\"ext\" href=\"https://guides.github.com/overviews/os-contributing/\" target=\"_blank\" rel=\"external nofollow noopener\">Contributing to Open Source on GitHub</a>，专业指导大家如何参与Github的开源项目。&nbsp;下面是&nbsp;<a class=\"ext\" href=\"https://guides.github.com/overviews/os-contributing/\" target=\"_blank\" rel=\"external nofollow noopener\">原文</a>的翻译。</p>\n<hr />\n<p>参与开源项目的最佳办法就是加入到你正在使用的已有项目上来。Github上有500多万开源项目，涉及到各个领域的技术，像&nbsp;<a class=\"ext\" href=\"https://github.com/sinker/tacofancy\" target=\"_blank\" rel=\"external nofollow noopener\">recipes</a>,&nbsp;<a class=\"ext\" href=\"https://github.com/tobiasahlin/SpinKit\" target=\"_blank\" rel=\"external nofollow noopener\">HTML/CSS</a>,&nbsp;<a class=\"ext\" href=\"https://github.com/sferik/t\" target=\"_blank\" rel=\"external nofollow noopener\">Ruby</a>,&nbsp;<a class=\"ext\" href=\"https://github.com/dfm/emcee\" target=\"_blank\" rel=\"external nofollow noopener\">Astrophysics</a>等等。该指南将涵盖你在一个典型的项目中可能出现的事情以及如何为开源项目作出贡献。&nbsp;</p>\n<h2>找项目</h2>\n<p>我们推荐你从已正在使用的或感兴趣的项目开始。这里有几个很棒的地方供你参考：&nbsp;</p>\n<ul class=\"normal_li\">\n<li><a class=\"ext\" href=\"https://github.com/explore\" target=\"_blank\" rel=\"external nofollow noopener\">GitHub Explore</a>：受欢迎和热门的项目。&nbsp;</li>\n<li><a class=\"ext\" href=\"https://github.com/stars?direction=desc&amp;sort=created\" target=\"_blank\" rel=\"external nofollow noopener\">GitHub Stars</a>：被其他人star过的项目（指的是你自己库的项目）。&nbsp;</li>\n<li><a class=\"ext\" href=\"https://github.com/showcases\" target=\"_blank\" rel=\"external nofollow noopener\">GitHub Showcases</a>：一个能搜索相关库的方法。&nbsp;</li>\n<li><a class=\"ext\" href=\"http://news.layervault.com/\" target=\"_blank\" rel=\"external nofollow noopener\">LayerVault News</a>：前端和设计相关的项目。&nbsp;</li>\n</ul>\n<p>&nbsp;</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/06b37b312694f3266cf96f478e98fde7.png-pic540\" alt=\"\" width=\"540\" height=\"81\" border=\"0\" />&nbsp;</p>\n<h2>一个典型的项目</h2>\n<p>下面是一些你在Github开源项目中可能遇到的因素。</p>\n<h4>The Community（社区）</h4>\n<p>项目通常会有一个社区维护，由不同角色（正规或非正规）的其他用户组成：&nbsp;</p>\n<ul class=\"normal_li\">\n<li>所有者（Owner）：即创建该项目且在他们Github账户上有该项目的用户或组织。&nbsp;</li>\n<li>维护者和协作者（Maintainers and Collaborators）： 致力于一个项目并促进该项目发展的用户。通常所有者和维护者是同一个用户或组织，他们对项目库都有写的权限。&nbsp;</li>\n<li>贡献者（Contributors）：每一个对该项目发出过pull&nbsp;request并合并到项目中的用户都是贡献者。&nbsp;</li>\n<li>社区成员（Community Members）：即那些经常使用且非常关心该项目的用户，他们在讨论功能特征和pull&nbsp;request上非常活跃。</li>\n</ul>\n<h4>The Docs（文档）</h4>\n<p>一般项目中都有的文件。&nbsp;</p>\n<ul class=\"normal_li\">\n<li>Readme：几乎所有的Github项目都包含一个README.md文件。readme提供了该项目的一个概览及关于如何使用、构建甚至如何贡献于一个项目的相关细节。</li>\n<li>Contributing：项目和项目维护者不同，所以每个项目所期望的作贡献的最佳方法也会有所不同。一定要注意一个标注为CONTRIBUTING的文档，Contributing文档详细描述了一个项目的维护者希望看到贡献的补丁或功能应该符合怎样的规格。这可能包含要写什么测试，代码语法规范或补丁集中的区域。</li>\n<li>License：一个LICENSE文件当然就是该项目的许可证了。一个开源项目的license会告诉用户他们能做和不能做的（例如使用、修改、重新发布），及告诉贡献者他们允许其他人做的。有许多的办法对开源项目加上许可证，你可以在&nbsp;<a class=\"ext\" href=\"http://choosealicense.com/\" target=\"_blank\" rel=\"external nofollow noopener\">choosealicense.com</a>读到更多的关于每个许可证的含义。</li>\n<li>Documentation and Wikis：许多大型项目有的不只有一个readme来指导人么如何使用他们的项目。在这种情况下你通常能够发现一个指向库中名为&ldquo;docs&rdquo;的另一个文件或文件夹的链接。</li>\n</ul>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/7340f45b266619e9fcaefa9cf763794a.png-pic540\" alt=\"\" width=\"540\" height=\"217\" border=\"0\" /></p>\n<p>另外，该库也可能使用Github&nbsp;wiki来代替文档。&nbsp;</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/89750d8e432751be204aad6996a50a55.png-pic540\" alt=\"\" width=\"500\" height=\"278\" border=\"0\" />&nbsp;</p>\n<p>&nbsp;</p>\n<h2>贡献于一个项目</h2>\n<p>既然你已经找到了理解该项目的相关资料，下面你就可以采取一些行动了。</p>\n<h4>建立一个话题</h4>\n<p>如果你发现了你正在使用的项目中的一个bug（但是你不知道怎么去修复它），或对文档有不解或对项目有疑问 &mdash;&nbsp;那么创建一个话题吧！这非常容易且一般你不管创建什么话题，你都可能不是唯一一个出现该问题的人，所以其他人可能会发现你的话题很有帮助。关于更多的话题介绍，请查看我们的&nbsp;<a class=\"ext\" href=\"http://guides.github.com/overviews/issues\" target=\"_blank\" rel=\"external nofollow noopener\">Issues guide</a>。</p>\n<h4>话题专业提示</h4>\n<ul class=\"normal_li\">\n<li>在建话题之前检查已有的话题：话题重复对双方都无利，所以搜索整个正开放和已关闭的话题以检查你遇到的问题是否已经有人解决了。&nbsp;</li>\n<li>务必对自己的问题有清晰的认识：期望的结果是什么？然而却发生了什么？&nbsp;详细描述其他人如何重现该问题。</li>\n<li>在像&nbsp;<a class=\"ext\" href=\"http://jsfiddle.net/\" target=\"_blank\" rel=\"external nofollow noopener\">JSFiddle</a>或&nbsp;<a class=\"ext\" href=\"http://codepen.io/\" target=\"_blank\" rel=\"external nofollow noopener\">CodePen</a>类似的平台上重现该问题并给出问题demo的链接。&nbsp;</li>\n<li>包含一些系统相关的细节，比如用的什么浏览器、库或操作系统及版本号。&nbsp;</li>\n<li>在你的话题或在&nbsp;<a class=\"ext\" href=\"http://gist.github.com/\" target=\"_blank\" rel=\"external nofollow noopener\">Gist</a>里贴出你的错误输出或日志。如果在话题里贴出来，请用三个反引号```&nbsp;包围起来使得能够良好的呈现给大家。</li>\n</ul>\n<h4>Pull Request</h4>\n<p>如果你能够修复bug或自己添加功能 &mdash;&nbsp;太棒了，请发一个pull&nbsp;request吧！确保你已经读过任何关于contributing的文档，且需要理解license以及已经签过CLA（如果需要的话）。一旦你提交了一个pull&nbsp;request，维护者就会将你的分支与已有的分支作比较来决定是否要合并（即pull&nbsp;in）你作的改动。</p>\n<h4>Pull Request专业提示</h4>\n<ul class=\"normal_li\">\n<li><a class=\"ext\" href=\"http://guides.github.com/overviews/forking/\" target=\"_blank\" rel=\"external nofollow noopener\">Fork</a>&nbsp;该项目库及将它clone到本地。通过添加为远程的方式在本地连接到原来的&lsquo;upstream&rsquo;库。经常从&lsquo;upstream&rsquo;库pull in改动以保持库最新，这样当你提交pull&nbsp;request时，就不大可能发生合并冲突了。点&nbsp;<a class=\"ext\" href=\"https://help.github.com/articles/syncing-a-fork\" target=\"_blank\" rel=\"external nofollow noopener\">这里</a>看更多的指导细节。&nbsp;</li>\n<li>为你的编辑单独建立一个<a class=\"ext\" href=\"http://guides.github.com/overviews/flow/\" target=\"_blank\" rel=\"external nofollow noopener\">分支</a>&nbsp;。</li>\n<li>务必清楚所出现的问题以及如何重现该问题或为什么你的功能有帮助。然后同样的要清楚做一些改变有哪些步骤。&nbsp;</li>\n<li>最好测试一下。在任何已有的测试（如果存在）上运行你所做的改动并在必要时创建新的测试。不管测试存不存在，都要确保你的改动不会破坏已有的项目。&nbsp;</li>\n<li>如果你的改动包含了HTML/CSS方面的不同，那么请包含改动前和改动后的截图。将你的图片拖放到你pull&nbsp;request的正文里。&nbsp;</li>\n<li>尽你所能的在项目的风格上多做努力。这可能意味着使用不同于你自己Github库中采用的缩进，分号或注释，但是这让维护者更容易合并，也让其他人更容易理解和以后的维护。</li>\n</ul>\n<h4><a class=\"ext\" href=\"http://cms.csdnimg.cn/article/201404/14/534b7275380df.jpg\" target=\"_blank\" rel=\"external nofollow noopener\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/21fb8c0794c0acada248e60f575842bc.png-pic540\" alt=\"\" width=\"540\" height=\"420\" border=\"0\" /></a></h4>\n<h4>开放的Pull Requests</h4>\n<p>一旦你打开一个pull&nbsp;request，就会有一个讨论，围绕你提出的改变作出探讨。其他的贡献者和用户可能会参与进来，但最终由维护者做决定。你可能会被要求对你的pull&nbsp;request做一些改变，如果这样，请给你的分支添加更多的commit并push它们 &mdash;&nbsp;它们将自动的加入到已有的pull&nbsp;request里。</p>\n<p>如果你的pull&nbsp;request被合并了&mdash;&mdash;太好了！如果没被合并的话，也没什么大不了的，也许这不是项目维护者所期望看到的改动，亦或者他们已经致力于该bug或功能。这种情况有可能发生，所以我们的建议是：对收到的结果做出反馈，进一步努力然后再次pull&nbsp;request出去&mdash;&nbsp;或者创建你自己的开源项目。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<hr />\n<p><strong>VIA</strong>&nbsp;<a class=\"ext\" href=\"https://guides.github.com/overviews/os-contributing/\" target=\"_blank\" rel=\"external nofollow noopener\">GitHub</a>&nbsp;&amp;&nbsp;<a class=\"ext\" href=\"http://blog.csdn.net/lanxuezaipiao/article/details/23546349\" target=\"_blank\" rel=\"external nofollow noopener\">CSDN 博客</a></p>','2014-04-14 08:41:39','2019-06-27 02:43:33','2019-09-18 16:43:02',NULL),(8,1,1,0,56,'Perl开发者必须了解的14个资源','14 Resources Perl Developers Must Know','14-resources-perl-developers-must-know','https://linux.cn/article-2861-1.html','Perl语言虽在上月编程排名中跌至其历史最低点，不过Perl语言设计者Larry Wall表示，开发团队正在对Perl 6进行全力开发，使其更快、更强、更具可移植性和扩展性，我们整理了Perl开发者需要了解的14个资源，仅供参考。\n\nPerl语言虽然在上月编程排名中跌至其历史最低点，不过Perl语言设计者Larry Wall在我们对其专访中表示，Perl开发团队正在对Perl 6进行全力开发，使其更快、更强、更具可移植性和可扩展性 ，“我们是放长线钓大鱼，Perl 6一定会笑到最后的。”','https://net.lnmpa.top/thumbnail/2019/07/7abff346aa380e2a99eb710b32dc53fe.png-pic540','<p>Perl语言虽在上月编程排名中跌至其历史最低点，不过Perl语言设计者Larry Wall表示，开发团队正在对Perl 6进行全力开发，使其更快、更强、更具可移植性和扩展性，我们整理了Perl开发者需要了解的14个资源，仅供参考。</p>\n<div align=\"left\">Perl语言虽然在上月编程排名中跌至其历史最低点，不过Perl语言设计者Larry Wall在我们对其<a class=\"ext\" href=\"http://code.csdn.net/news/2818932\" target=\"_blank\" rel=\"external nofollow noopener\">专访</a>中表示，Perl开发团队正在对Perl 6进行全力开发，使其更快、更强、更具可移植性和可扩展性 ，&ldquo;我们是放长线钓大鱼，Perl 6一定会笑到最后的。&rdquo;</div>\n<div align=\"left\"><a class=\"ext\" href=\"https://img.linux.net.cn/data/attachment/album/201404/15/154754nzysbsgyiryblyyb.jpghttps://net.lnmpa.top/thumbnail/2019/07/7abff346aa380e2a99eb710b32dc53fe.png-pic540\" target=\"_blank\" rel=\"noopener\"><img id=\"aimg_m38GG\" class=\"zoom\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/07/7abff346aa380e2a99eb710b32dc53fe.png-pic540\" alt=\"\" width=\"435\" height=\"291\" border=\"0\" /></a></div>\n<div align=\"left\">下面，我们整理了Perl开发者不得不了解的14个资源，希望对Perl开发者有用，仅供参考。</div>\n<div align=\"left\">&nbsp;</div>\n<ul style=\"list-style-type: square;\">\n<li><a class=\"ext\" href=\"http://shop.oreilly.com/product/9780596004927.do\" target=\"_blank\" rel=\"external nofollow noopener\">Programming Perl</a>：Perl语言设计者Larry Wall亲自操刀，经典的大骆驼书，重点推荐。</li>\n<li>\n<div align=\"left\"><a class=\"ext\" href=\"http://www.perl.org/books/beginning-perl/\" target=\"_blank\" rel=\"external nofollow noopener\">Beginning Perl</a>：Perl官方推出的一本适合Perl语言初学者的一本书。如果已有相关的编程经验，可以更加快速上手Perl。</div>\n<div align=\"left\">&nbsp;</div>\n</li>\n<li>\n<div align=\"left\"><a class=\"ext\" href=\"http://www.catalystframework.org/\" target=\"_blank\" rel=\"external nofollow noopener\">CatalystFramework.org</a>：一款开源的Perl MVC web框架，可帮助开发者快速开发web应用。</div>\n<div align=\"left\">&nbsp;</div>\n</li>\n<li>\n<div align=\"left\"><a class=\"ext\" href=\"http://www.cpan.org/\" target=\"_blank\" rel=\"external nofollow noopener\">CPAN.org</a>：CPAN是&ldquo;Perl程序库&rdquo;（Comprehensive Perl Archive Network）的英文单词缩写，包 含了约10万个模块。</div>\n<div align=\"left\">&nbsp;</div>\n</li>\n<li>\n<div align=\"left\"><a class=\"ext\" href=\"http://www.tutorialspoint.com/perl/perl_modules.htm\" target=\"_blank\" rel=\"external nofollow noopener\">Tutorials Point</a>：教你如何用Perl来写软件包和模块，给出了详细教程。</div>\n<div align=\"left\">&nbsp;</div>\n</li>\n<li>\n<div align=\"left\"><a class=\"ext\" href=\"http://www.epic-ide.org/\" target=\"_blank\" rel=\"external nofollow noopener\">EPIC</a>：一款基于Eclipse平台的开源的Perl IDE（包括编辑器和调试器），支持Windows、Mac和Linux三个平台，非常适合Perl编程。</div>\n<div align=\"left\">&nbsp;</div>\n</li>\n<li>\n<div align=\"left\"><a class=\"ext\" href=\"http://www.extremeperl.org/bk/home\" target=\"_blank\" rel=\"external nofollow noopener\">Extreme Perl</a>：关于如何使用Perl来极限编程的一本书。</div>\n<div align=\"left\">&nbsp;</div>\n</li>\n<li>\n<div align=\"left\"><a class=\"ext\" href=\"http://learn.perl.org/\" target=\"_blank\" rel=\"external nofollow noopener\">Learn Perl</a>：官方给出的Perl学习指南。</div>\n<div align=\"left\">&nbsp;</div>\n</li>\n<li>\n<div align=\"left\"><a class=\"ext\" href=\"http://www.greenteapress.com/perl/\" target=\"_blank\" rel=\"external nofollow noopener\">Learning Perl the Hard Way</a>：《笨方法学Perl》，这是笨方法学习编程语言的系列之一。</div>\n<div align=\"left\">&nbsp;</div>\n</li>\n<li>\n<div align=\"left\"><a class=\"ext\" href=\"http://www.masonhq.com/\" target=\"_blank\" rel=\"external nofollow noopener\">Mason + Poet</a>：Mason是用来生成HTML和其他动态内容、基于Perl的模板系统，Amazon.com也有所应用。</div>\n<div align=\"left\">&nbsp;</div>\n</li>\n<li>\n<div align=\"left\"><a class=\"ext\" href=\"http://perl6.org/\" target=\"_blank\" rel=\"external nofollow noopener\">Perl 6官网</a>：想知道目前Perl 6进展如何？那就来Perl 6官网看看吧。</div>\n<div align=\"left\">&nbsp;</div>\n</li>\n<li>\n<div align=\"left\"><a class=\"ext\" href=\"http://perldesignpatterns.com/\" target=\"_blank\" rel=\"external nofollow noopener\">Perl Design Patterns Tiny Wiki</a>：关于Perl语言的任何事情，在这里都有记录。</div>\n<div align=\"left\">&nbsp;</div>\n</li>\n<li>\n<div align=\"left\"><a class=\"ext\" href=\"http://www.tutorialspoint.com/perl/perl_oo_perl.htm\" target=\"_blank\" rel=\"external nofollow noopener\">Perl Object Oriented Programming</a>：教你用Perl来面向对象编程。</div>\n<div align=\"left\">&nbsp;</div>\n</li>\n<li>\n<div align=\"left\"><a class=\"ext\" href=\"http://www.troubleshooters.com/codecorn/littperl/perlreg.htm\" target=\"_blank\" rel=\"external nofollow noopener\">Perl Regular Expressions</a>：你需要知道的关于Perl正则表达式的基本知识。</div>\n</li>\n</ul>\n<div align=\"left\">Via&nbsp;<a class=\"ext\" href=\"http://www.efytimes.com/e1/fullnews.asp?edid=135678\" target=\"_blank\" rel=\"external nofollow noopener\">Efytimes</a></div>\n<div align=\"left\">&nbsp;</div>\n<div align=\"left\">相关链接：</div>\n<ul>\n<li><a class=\"ext\" href=\"http://perlchina.org/\" target=\"_blank\" rel=\"external nofollow noopener\">Perl中国社区</a></li>\n<li><a class=\"ext\" href=\"http://www.perl.org/\" target=\"_blank\" rel=\"external nofollow noopener\">Perl官网</a></li>\n</ul>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<hr />\n<p>via ：&nbsp;<a class=\"ext\" href=\"http://code.csdn.net/news/2819314\" target=\"_blank\" rel=\"external nofollow noopener\">http://code.csdn.net/news/2819314</a>&nbsp;</p>','2014-04-16 05:12:51','2019-06-27 03:14:29','2019-09-18 22:24:04',NULL),(9,1,1,0,77,'少有人知的 GitHub 使用技巧','Few people know how to use GitHub','few-people-know-how-to-use-github','https://linux.cn/article-2894-1.html','GitHub 大家常上吧？可是使用 GitHub 的各种小窍门你就不一定知道了。本文将各种使用 GitHub 的小窍门分享给大家。','https://net.lnmpa.top/thumbnail/2019/07/625c3d2231c69c008fa8d89d4f980b7d.png-pic540','<p><a class=\"ext\" href=\"https://github.com/\" target=\"_blank\" rel=\"external nofollow noopener\">GitHub</a>&nbsp;大家常上吧？可是使用 GitHub 的各种小窍门你就不一定知道了。本文将各种使用 GitHub 的小窍门分享给大家。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/07/625c3d2231c69c008fa8d89d4f980b7d.png-pic540\" alt=\"\" width=\"540\" height=\"540\" /></p>\n<h3>diff时忽略空格</h3>\n<p>有些修改只是增减了空格，在URL中添加?w=1就可以忽略。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/11b1d9650c8628430e6382b2642ecdd7.png-pic540\" alt=\"\" width=\"540\" height=\"200\" /></p>\n<h3>查看某个作者的提交历史</h3>\n<p>在URL中添加?author=username，例如：</p>\n<pre class=\"language-markdown\"><code>https://github.com/rails/rails/commits/master?author=dhh</code></pre>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/81b7b421552eeb0e17931b1eda90839f.png-pic540\" alt=\"\" width=\"540\" height=\"325\" /></p>\n<h3>比较版本</h3>\n<p>使用类似如下的URL比较分支：</p>\n<pre class=\"language-markdown\"><code>https://github.com/rails/rails/compare/master...4-1-stable</code></pre>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/7ee4b4f896d5df3ab2e6ddb70f3c8f3a.png-pic540\" alt=\"\" width=\"600\" height=\"337\" /></p>\n<p>同样可以使用一下格式：</p>\n<pre class=\"language-markdown\"><code>https://github.com/rails/rails/compare/master@{1.day.ago}...master\nhttps://github.com/rails/rails/compare/master@{2014-10-04}...master</code></pre>\n<p>如果想和派生仓库比较，加上派生仓库名作前缀即可：</p>\n<pre class=\"language-markdown\"><code>https://github.com/rails/rails/compare/byroot:master...master</code></pre>\n<h3>通过 HTML 方式嵌入 Gist</h3>\n<p><a class=\"ext\" href=\"https://gist.github.com/\" target=\"_blank\" rel=\"external nofollow noopener\">Gists</a>是 GitHub 推出的基于 Git 的代码片段服务。Gists页面提供JavaScript代码，可以将 Gist 嵌入到其他站点。但是很多站点粘贴 JavaScript 无效，这时候你可以在 Gist URL 后附加.pibb，得到一个纯 HTML 的版本，然后就可以复制粘贴 HTML 源码到其他网站了。例如&nbsp;<a class=\"ext\" href=\"https://gist.github.com/tiimgreen/10545817.pibb\" target=\"_blank\" rel=\"external nofollow noopener\">https://gist.github.com/tiimgreen/10545817.pibb</a></p>\n<h3>Git.io</h3>\n<p><a class=\"ext\" href=\"http://git.io/\" target=\"_blank\" rel=\"external nofollow noopener\">Git.io</a>&nbsp;是适用于 GitHub 的短网址服务。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/97d0796af585371e05f9c4bfc907423e.png-pic540\" alt=\"\" width=\"540\" height=\"183\" /></p>\n<p>当然，为了方便，也可以使用Curl访问：</p>\n<pre class=\"language-markdown\"><code>$ curl -i http://git.io -F \"url=https://github.com/...\"\nHTTP/1.1 201 Created\nLocation: http://git.io/abc123\n&nbsp;\n$ curl -i http://git.io/abc123\nHTTP/1.1 302 Found\nLocation: https://github.com/...</code></pre>\n<p>你甚至可以指定短网址的字段：</p>\n<pre class=\"language-markdown\"><code>$ curl -i http://git.io -F \"url=https://github.com/technoweenie\" \\\n-F \"code=t\"\nHTTP/1.1 201 Created\nLocation: http://git.io/t</code></pre>\n<h3>高亮行</h3>\n<p>例如，在 URL 中加上&nbsp;#L52&nbsp;可以高亮第52行。或者你也可以直接点击行数。</p>\n<p>多行高亮同样支持。你可以使用类似#L53-L60格式，或者在按住shift的同时点击。</p>\n<ol class=\"linenums\">\n<li class=\"L0\"><span class=\"pln\">https</span><span class=\"pun\">:</span><span class=\"com\">//github.com/rails/rails/blob/master/activemodel/lib/active_model.rb#L53-L60</span></li>\n</ol>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/93f276589619336bb89c9923167570d8.png-pic540\" alt=\"\" width=\"540\" height=\"332\" /></p>\n<h3>快速引用</h3>\n<p>你可以选中别人的评论文字，然后按r，这些内容会以引用的形式被复制在文本框中：</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/a9942d05886dbae64927d6c7d6d2a64d.gif-pic540\" alt=\"\" width=\"540\" height=\"376\" /></p>\n<p class=\"article_img\">&nbsp;</p>\n<h3>任务列表</h3>\n<p>在工单或合并请求中，你可以使用任务列表语法：</p>\n<pre class=\"language-markdown\"><code>- [ ] Be awesome\n- [ ] Do stuff\n- [ ] Sleep</code></pre>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/a7c77ae9eea31f179ee6242afe404041.png-pic540\" alt=\"\" width=\"540\" height=\"204\" /></p>\n<p>勾选之后，会更新 Markdown：</p>\n<pre class=\"language-markdown\"><code>- [x] Be awesome\n- [x] Do stuff\n- [ ] Sleep</code></pre>\n<h3>合并请求的 diff 和 patch</h3>\n<p>可以在 URL 后添加&nbsp;.diff&nbsp;和&nbsp;.patch，以对应的模式查看合并请求:</p>\n<pre class=\"language-markdown\"><code>https://github.com/tiimgreen/github-cheat-sheet/pull/15\nhttps://github.com/tiimgreen/github-cheat-sheet/pull/15.diff\nhttps://github.com/tiimgreen/github-cheat-sheet/pull/15.patch</code></pre>\n<p>结果是纯文本的：</p>\n<pre class=\"language-markdown\"><code>diff --git a/README.md b/README.md\nindex 88fcf69..8614873 100644\n--- a/README.md)\n+++ b/README.md\n@@ -28,6 +28,7 @@ All the hidden and not hidden features of Git and GitHub. This cheat sheet was i\n- [Merged Branches](#merged-branches)\n- [Quick Licensing](#quick-licensing)\n- [TODO Lists](#todo-lists)\n+- [Relative Links](#relative-links)\n- [.gitconfig Recommendations](#gitconfig-recommendations)\n- [Aliases](#aliases)\n- [Auto-correct](#auto-correct)\n@@ -381,6 +382,19 @@ When they are clicked, they will be updated in the pure Markdown:\n- [ ] Sleep\n&nbsp;\n(...)</code></pre>\n<p>&nbsp;</p>\n<hr />\n<p>编撰&nbsp;<a class=\"ext\" href=\"http://sf.gg/\" target=\"_blank\" rel=\"external nofollow noopener\">SegmentFault</a><br />参考&nbsp;<a class=\"ext\" href=\"https://github.com/tiimgreen/github-cheat-sheet\" target=\"_blank\" rel=\"external nofollow noopener\">github-cheat-sheet</a>&nbsp;</p>\n<p>via ：&nbsp;<a class=\"ext\" href=\"http://segmentfault.com/a/1190000000475547\" target=\"_blank\" rel=\"external nofollow noopener\">http://segmentfault.com/a/1190000000475547</a>&nbsp;</p>','2014-04-21 09:15:31','2019-06-27 03:20:53','2019-09-19 15:09:25',NULL),(10,1,1,0,54,'5 个不用 Bootstrap 的理由','Five reasons for not using Bootstrap','five-reasons-for-not-using-bootstrap','https://linux.cn/article-2899-1.html','在以前我们的博客文章中，我们讨论了在web设计和开发项目中使用Twitter Bootstrap的好处。\n\nTwitter Bootstrap也有很多的缺点。让我们看看这些主要的问题','https://net.lnmpa.top/thumbnail/2019/07/02a63cd40341d100b0abf2b0147b36df.jpg-pic540','<p>在以前我们的博客文章中，我们讨论了在web设计和开发项目中使用Twitter Bootstrap的好处。</p>\n<p>Twitter Bootstrap也有很多的缺点。让我们看看这些主要的问题：</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/07/02a63cd40341d100b0abf2b0147b36df.jpg-pic540\" alt=\"When_not_to_use_Twitter_Bootstrap_by_Zing_Design\" width=\"540\" height=\"410\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><span style=\"text-decoration: underline;\"><em>When_not_to_use_Twitter_Bootstrap_by_Zing_Design</em></span></p>\n<h3>1. 它不遵循最佳实践</h3>\n<p>我们在使用Twitter Bootstrap时遇到的最大问题之一是你的DOM元素上将拥挤大量的类。这打破了良好的web设计基本规则之一，HTML不再有语义，而且内容和表示不再分离。前端纯粹主义者会觉得这相当令人讨厌，以为它使可扩展性、重用性和维护性遇到了更大的挑战。表示和交互不再独立于内容在Twitter Bootstrap中也被进一步的强化。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/bbbb/2019/07/5f0a0e1a763c3ac43f7a91115822d2c2.png-pic540\" alt=\"A snapshot of some HTML from one of the Twitter Bootstrap templates.\" width=\"540\" height=\"173\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><span style=\"text-decoration: underline;\"><em>A snapshot of some HTML from one of the Twitter Bootstrap templates.</em></span></p>\n<p>哦，如此多不必要的类！</p>\n<h3>2. 它将与我现有设置发生碰撞</h3>\n<p>如果你被空投到一个干了一半的大项目中，想要使用 Twitter Bootstrappy 享受其所有的好处会如何呢？糟糕的是，你会碰到一大堆的问题，冲突首先会从生成 HTML、CSS和JavaScript 开始。然后是它们的资源，你必须深入项目中那些阴暗的角落，搞清楚哪些脚本和样式需要删除或替换。Twitter Bootstrap 会潜在创建额外的工作，当你深入项目会不可避免地发现和修复奇怪的错误，你为自己辩护的理由将会击败你优先选用它的目的。</p>\n<h3 id=\"content_h3_3_5\">3. Twitter Bootstrap 太重</h3>\n<p>坦率的说，Twitter Bootstrap包括126kb的CSS和29kb的JavaScript。如果你想要使用Twitter Bootstap的所有功能，你应该好好考虑资源的加载时间。当然，对于一些地方这可能不是问题，但是在新西兰互联网不得不横跨太平洋，这时数据达到那儿将是很缓慢的。因此考虑你的目标市场。Twitter Bootstrap将帮助你建立一个有吸引力的、响应式的网站，但是一些手机用户将因为缓慢的加载时间和消耗电量的脚本而别拒之门外。</p>\n<h3 id=\"content_h3_4_5\">4. 不支持SASS</h3>\n<p>可能是最大的争论之一，BootStrap使用<a class=\"ext\" href=\"http://www.oschina.net/p/lesscss\" target=\"_blank\" rel=\"external nofollow noopener\">Less</a>构建，原生不支持<a class=\"ext\" href=\"http://www.oschina.net/p/compass+css\" target=\"_blank\" rel=\"external nofollow noopener\">Compass</a>和<a class=\"ext\" href=\"http://www.oschina.net/p/sass\" target=\"_blank\" rel=\"external nofollow noopener\">SASS</a>。现在请不要误会我的意思，Less是好的，我以前使用它，它肯定有它的优点。但是SASS是更好的，带有一个类似于Compass的框架，使用它好像完全不需要过多的考虑。一些人建立了<a class=\"ext\" href=\"https://github.com/vwall/compass-twitter-bootstrap\" target=\"_blank\" rel=\"external nofollow noopener\">Compass gem的Bootstrap</a>，但是坦率的说，你将不得不使用Less。在将来的文章中，我将更多的讨论SASS和Less。与此同时，Chris Coyier已经写了一篇<a class=\"ext\" href=\"http://css-tricks.com/sass-vs-less/\" target=\"_blank\" rel=\"external nofollow noopener\">文章</a>比较两者。</p>\n<h3 id=\"content_h3_5_5\">5. &ldquo;晕！我的新网站看起来和其他人一个样！&rdquo;</h3>\n<p>Twitter Bootstrap 超级受欢迎，因此几乎每个开发者都会使用它。虽然它以后当然可以自定义你的应用或网站设计，你会发现时间限制迫使你坚持使用大量的 vanilla Bootstrap 风格。这会导致无意中创造了很多类似的，通用和难忘的网站。因为使用 Twitter Bootstrap 现成的是很快速和容易的，结果创新往往被丢弃了。当你有紧迫的时间限制时，在 Bootstrap 的结构化环境中，与众不同的创新设计很难实现。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<hr />\n<p><span class=\"label\">参与翻译(3人)：</span><a class=\"t_user ext\" href=\"http://my.oschina.net/zqstarmoon\" target=\"_blank\" rel=\"external nofollow noopener\">地狱星星</a>,&nbsp;<a class=\"t_user ext\" href=\"http://my.oschina.net/theforever\" target=\"_blank\" rel=\"external nofollow noopener\">赵亮-碧海情天</a>,&nbsp;<a class=\"t_user ext\" href=\"http://my.oschina.net/andylam2010\" target=\"_blank\" rel=\"external nofollow noopener\">andylam</a></p>\n<p>via :&nbsp;http://www.oschina.net/translate/5-reasons-not-to-use-twitter-bootstrap</p>','2014-04-22 11:22:45','2019-06-27 03:25:05','2019-09-18 22:23:28',NULL),(11,1,1,0,55,'PHP语言需要避免的10大误区','Ten Misconceptions to Avoid in PHP Language','ten-misconceptions-to-avoid-in-php-language','https://linux.cn/article-2907-1.html','PHP是一种非常流行的开源服务器端脚本语言，你在万维网看到的大多数网站都是使用php开发的。但是，你大概很奇怪的注意到有少部分的人发誓要离php远远的。但是令人更奇怪的是或者很震惊的说他们不用php是因为一些被证实的语言缺点。他们决定不用php，是因为误解。\n\n是的，你读到的那些是误解。','https://net.lnmpa.top/thumbnail/2019/07/3797f385bb91a88f4ef1c7b0ebce3476.png-pic540','<p>PHP是一种非常流行的开源服务器端脚本语言，你在万维网看到的大多数网站都是使用php开发的。但是，你大概很奇怪的注意到有少部分的人发誓要离php远远的。但是令人更奇怪的是或者很震惊的说他们不用php是因为一些被证实的语言缺点。他们决定不用php，是因为误解。</p>\n<p>是的，你读到的那些是误解。</p>\n<p>让我们看看这些误解是：</p>\n<h3>1. PHP是一种面向对象语言，但面向对象并不彻底</h3>\n<p>这完全不对。所有认为php不是彻底面向对象的程序员，尤其是Java程序员，都需要上一个PHP的基础培训；他们会发现PHP中大量面向对象的特性。例如：接口、方法、抽象类等等。我同意早期的PHP版本确实不支持太多面向对象的特性，但PHP5已经有强大的面向对象支持。而且，你一定想不到编码在PHP中会变得如此简单，那是因为PHP和面向对象结合的原因。&nbsp;<br />所以，消除这个误解吧。</p>\n<h3>2.PHP无法实现特定功能</h3>\n<p>我很清楚这种表述很含糊，但是我不能想出任何更好的说法。这是一个很含糊的误解，开发人员认为PHP不能帮助他们实现一些诸如内存访问的功能或者一些PHP主要发行版没有提供支持的功能。但事实是PHP是一种可扩展的语言，所以你需要做的是用C或者C++编码，然后创建对应的扩展。</p>\n<p class=\"article_img\"><img id=\"aimg_c8ER4\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/07/3797f385bb91a88f4ef1c7b0ebce3476.png-pic540\" alt=\"\" width=\"540\" height=\"336\" border=\"0\" /></p>\n<p>其实，你根本不需要自己动手去创建扩展，因为这里已经有数以百计的可用扩展。你唯一需要做的就是去寻找它们。</p>\n<h3>3.PHP 是不安全的</h3>\n<p>开发者对PHP的另外一个误解就是PHP网站和应用是不安全的。但是，为什么你会希望它在默认情况下是安全，为什么不编写安全的代码？ 我知道这里一直存在很多不安全的PHP代码，因为最初的学习曲线是简单的而且很容易上手。所以，作为一个开发者，你需要使它尽可能的安全。</p>\n<p>.Net可以帮助你在默认情况下是安全的，相比之下PHP确实缺少很多。但是如果你是一个训练有素的程序员，那么你其实不要默认情况的安全帮助。Include通常是安全的，但是你需要要小心。如果它们的路径是动态生成的，对指令的透彻理解可以帮助你让代码更安全。</p>\n<h3>4. 它不能适应大型应用</h3>\n<p>大型复杂应用需要建立在自身可靠和高性能的语言之上，这是PHP在一定程度上所没有的。但是，如果你设计和开发的应用程序架构稳定，为什么你会对它的性能和可扩展性有疑问呢？&nbsp;<br />事实上一些顶尖网站，如Facebook、维基百科和雅虎等等，都是基于PHP构建的，就像我们所想的那样，这些巨型网站都工作的很好。</p>\n<h3>5. PHP只能用于网站开发</h3>\n<p>这也是一个误解，尽管看起来它有点合乎逻辑，因为PHP是网站开发中最常见的语言。但也有一些被称为命令行界面的东西，这可以确保你的PHP应用程序可以在Web服务器之外运行。&nbsp;<br />你可能不相信，但即使是那些很大程度上取决于CPU能力的应用程序，也可以用PHP开发的，使用PHP CLI来运行。&nbsp;</p>\n<p>更重要的是，如果你想使用PHP开发桌面应用程序，不用担心，使用Windows特定扩展你可以做到这一点。&nbsp;</p>\n<h3>6.开发过程慢</h3>\n<p>这是一直广为流传的误解。我不知道起源于何处？这个流言可能来自于曾经一个时期php代码很乱并且代码中四处充斥着Mysql语句（他们以此为反例，但是实际上我们都不这样用）。问题是为什么这样开发过程就慢了？当大量的php框架出现时，可以大大的加速开发的过程。毋庸置疑，你可以在短时间内开发出很大的程序，不论它有多么的复杂。所以，你用php开发一点都不慢，特别是当你使用php框架的时候。</p>\n<h3>7.专业开发人员不使用PHP</h3>\n<p>PHP是针对初学者的，它是为那些不是认认真真做开发的人设计的。这些说法都和PHP的使用有关。这只是一种误解，认同它没有任何意义。这里有如此多的网络应用，包括一些大型的，都是使用PHP构建的。可以想象这些说法是多么不正确。</p>\n<p class=\"article_img\"><img id=\"aimg_EutMP\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/bbbb/2019/07/c7a39c5307cf8b0da2f921350b4c589e.gif-pic540\" alt=\"\" width=\"540\" height=\"163\" border=\"0\" /></p>\n<h3>8. 性能问题</h3>\n<p>这是一个棘手问题。这不是一个误解。和硬币有两个面一样，这个问题也是两方面的。事实上到处充斥着垃圾代码，隐式转换、不适用的模块、缺少操作符重载等等都能影响一个php应用的性能。但是这个依赖于你是不是有足够的能力去用好这个语言，用它编写稳定地、快速地应用。</p>\n<p>性能是由你设计的架构和你写的代码来决定的！</p>\n<h3>9. 便宜没好货</h3>\n<p>这条貌似在逻辑上很站得住脚，但是用到php上那就是完全是误解了！事实上，php的最大优势就是他的免费和开源，这意味着大多数提供应用开发服务的开发 者必须都精通它。虽然免费开源会带来一定问题，但是这也为了使用他们服务的客户提供成本优势。与商业开发语言相比较，php的开发成本比价低，但是这并非 意味着它的质量值得怀疑。和正确的开发者一起工作，可以获得更高性能的php应用。</p>\n<h3>10. PHP言过其实</h3>\n<p>真是这样么？你随口瞎说的吧。我不认为这样，还有很多的开发者也都不这样认为。</p>\n<h3>结束语</h3>\n<p>这不是所有php谎言的终结者。随着php语言不断的发展，变得越来与强大，误解也会跟着增长的。但请不要被他们忽悠了。多读，多问，自己动动手，然后你就知道，是不是真的了 。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<hr />\n<p>转载自：<a class=\"ext\" href=\"http://www.oschina.net/translate/top-php-misconceptions-to-avoid\" target=\"_blank\" rel=\"external nofollow noopener\">开源中国</a></p>','2014-04-23 11:26:19','2019-06-27 03:28:37','2019-09-17 09:35:26',NULL),(12,1,1,0,76,'快乐Node码农的11个习惯','Happy Node\'s 11 Habits','happy-node-s-11-habits','https://linux.cn/article-2913-1.html','从问世到现在将近20年，JavaScript一直缺乏其它有吸引力的编程语言，比如Python和Ruby，的很多优点：命令行界面，REPL，包管理器，以及组织良好的开源社区。感谢Node.js和npm，现如今的JavaScript鸟枪换炮了。Web开发者有了强大的新工具，接下来就看他们的想象力了。\n下面这个提示和技巧清单，能让你和你的node程序保持快乐。','https://net.lnmpa.top/thumbnail/2019/07/94d97bec8b09eb252a27eee1a6fa38a1.png-pic540','<p>从问世到现在将近20年，JavaScript一直缺乏其它有吸引力的编程语言，比如Python和Ruby，的很多优点：命令行界面，REPL，包管理器，以及组织良好的开源社区。感谢Node.js和npm，现如今的JavaScript鸟枪换炮了。Web开发者有了强大的新工具，接下来就看他们的想象力了。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/07/94d97bec8b09eb252a27eee1a6fa38a1.png-pic540\" alt=\"\" width=\"540\" height=\"438\" /></p>\n<p>下面这个提示和技巧清单，能让你和你的node程序保持快乐。</p>\n<h3><a class=\"ext\" href=\"https://gist.github.com/wuhaixing/9755199#1-%E7%94%A8npm-init%E5%BC%80%E5%A7%8B%E6%96%B0%E9%A1%B9%E7%9B%AE\" target=\"_blank\" rel=\"external nofollow noopener\" name=\"1-%E7%94%A8npm-init%E5%BC%80%E5%A7%8B%E6%96%B0%E9%A1%B9%E7%9B%AE\"></a>1. 用npm init开始新项目</h3>\n<p>npm有个init命令，可以引导你完成创建package.json文件的过程。即便你非常熟悉package.json和它的属性，也可以把npm init当作将你的新程序或模块导入正轨的简便办法。 它可以聪明地为你设置默认值，比如通过上层目录的名称推断模块名，从~/.npmrc中读取创作者的信息，以及用你的git设置确定代码库。</p>\n<pre class=\"language-bash\"><code>mkdir my-node-app\ncd my-node-app\nnpm init</code></pre>\n<h3>2.声明所有依赖项</h3>\n<p>在将模块安装到项目本地时坚持使用--save (或 --save-dev)是个好习惯。这些选项会将指定的模块添加到package.json的dependencies（或devDependencies）清单中，并使用合理的默认<a class=\"ext\" href=\"https://github.com/isaacs/node-semver#ranges\" target=\"_blank\" rel=\"external nofollow noopener\">semver范围</a>。</p>\n<pre class=\"language-bash\"><code>npm install domready --save</code></pre>\n<p>注意，现在npm使用<a class=\"ext\" href=\"http://fredkschott.com/post/2014/02/npm-no-longer-defaults-to-tildes/\" target=\"_blank\" rel=\"external nofollow noopener\">插入符风格的semver范围</a>：</p>\n<pre class=\"language-json\"><code>\"dependencies\": {\n    \"domready\": \"^1.0.4\"\n}</code></pre>\n<h3>3.指定启动脚本</h3>\n<p>在package.json中设定scripts.start，你就可以在命令行中用npm start启动程序了。这个非常方便，因为克隆了你的程序的其他node开发人员不用猜就能轻松运行它。</p>\n<p>额外奖励：如果在package.json中定义了scripts.start，你就<strong>不需要Procfile了</strong>(Heroku平台用Procfile来声明在你程序的dynos上运行什么命令)。使用npm start会自动创建一个作为<a class=\"ext\" href=\"https://github.com/heroku/heroku-buildpack-nodejs/blob/97a5856d3d4407e9fde82bac31cb308430e459f7/bin/compile#L122-L135\" target=\"_blank\" rel=\"external nofollow noopener\">web进程</a>的Procfile。</p>\n<p>这里有个启动脚本示例：</p>\n<pre class=\"language-json\"><code>\"scripts\": {\n    \"start\": \"node index.js\"\n}</code></pre>\n<h3>4.指定测试脚本</h3>\n<p>就像团队中的所有人都应该可以运行程序一样，他们也应该可以测试它。package.json中的scripts.test就是用来指定运行测试套件的脚本的。如果你用mocha之类的东西运行测试，一定要确保把它包含在package.json里的devDependencies中，并且指向安装在你项目本地的文件，而不是全局安装的mocha：</p>\n<pre class=\"language-json\"><code>\"scripts\": {\n    \"test\": \"mocha\"\n}</code></pre>\n<h3>5.不要把依赖项放在源码的版本控制中</h3>\n<p>很多node程序使用的npm模块带有C语言写的依赖项，比如bson、ws和hiredis，这些依赖项必须在Heroku的64位Linux架构下进行编译。编译过程可能非常耗时。为了让构建过程尽可能的快，Heroku的node buildpack在下载和编译完依赖项后会<a class=\"ext\" href=\"https://github.com/heroku/heroku-buildpack-nodejs/blob/a096187082363bdee6a34dd8ddb90344601649ad/bin/compile#L58-76\" target=\"_blank\" rel=\"external nofollow noopener\">缓存它们</a>，以便在后续部署中重用。这个缓存是为了降低网络流量并减少编译次数。</p>\n<p>忽略node_modules目录也是模块创作者推荐的npm实践。应用程序和模块之间少了一个区别！</p>\n<pre class=\"language-json\"><code>echo node_modules &amp;gt;&amp;gt; .gitignore</code></pre>\n<h3>6.用环境变量配置npm</h3>\n<p>以下内容摘自<a class=\"ext\" href=\"https://npmjs.org/doc/misc/npm-config.html\" target=\"_blank\" rel=\"external nofollow noopener\">npm配置</a>：</p>\n<blockquote>\n<p>所有以npm_config_开头的环境变量都会被解释为配置参数。比如说环境中有npm_config_foo=bar时，会将配置参数foo设置为bar。任何没有给出值的环境配置的值都会设置为true。配置值对大小写不敏感，所以NPM_CONFIG_FOO=bar也一样。</p>\n</blockquote>\n<p>最近在所有的Heroku构建中都有程序的环境。这一变化让Heroku上的node用户无需修改程序代码就可以控制他们的npm配置。习惯#7是这一方式的完美例证。</p>\n<h3>7.带着你自己的npm注册中心</h3>\n<p>最近几年公共npm注册中心出现了<a class=\"ext\" href=\"http://modulecounts.com/\" target=\"_blank\" rel=\"external nofollow noopener\">突飞猛进式的增长</a>，因此会偶尔不稳定。所以很多node用户开始寻求公共注册中心之外的方案，他们或者是出于开发和构建过程中速度及稳定性方面的考虑，或者是因为要放置私有的node模块。</p>\n<p>最近几个月冒出了一些可供选择的npm注册中心。<a class=\"ext\" href=\"http://blog.nodejitsu.com/using-private-npm-on-heroku/\" target=\"_blank\" rel=\"external nofollow noopener\">Nodejitsu</a>和<a class=\"ext\" href=\"https://addons.heroku.com/gemfury#hello\" target=\"_blank\" rel=\"external nofollow noopener\">Gemfury</a>提供收费的私有注册中心，此外也有一些免费的，比如<a class=\"ext\" href=\"https://github.com/jbuck/npm-readonly-mirror\" target=\"_blank\" rel=\"external nofollow noopener\">Mozilla的只读S3/CloudFront镜像</a>和<a class=\"ext\" href=\"http://npmjs.eu/\" target=\"_blank\" rel=\"external nofollow noopener\">Maciej Małecki的欧洲镜像</a>。</p>\n<p>在Heroku上配置node程序使用定制注册中心很容易：</p>\n<pre class=\"language-markup\"><code>heroku config:set npm_config_registry=http://registry.npmjs.eu</code></pre>\n<h3>8.追踪过期的依赖项</h3>\n<p>如果你编程的时间足够长，可能已经领教过<a class=\"ext\" href=\"http://zh.wikipedia.org/wiki/%E7%9B%B8%E4%BE%9D%E6%80%A7%E5%9C%B0%E7%8B%B1\" target=\"_blank\" rel=\"external nofollow noopener\">相依性地狱</a>的厉害了。好在Node.js和npm接纳了semver，即&nbsp;<a class=\"ext\" href=\"http://semver.org/\" target=\"_blank\" rel=\"external nofollow noopener\">语义化版本管理规范</a>&nbsp;，设置了一个健全的依赖项管理先例。在这个方案下，版本号和它们的变化方式传达的含义涉及到了底层代码，以及从一个版本到下一版本修改了什么。</p>\n<p>npm有一个很少有人知道的命令，outdated。它可以跟npm update结合使用，能够找出程序的那些依赖项已经过期了，需要更新：</p>\n<pre class=\"language-bash\"><code>cd my-node-app\nnpm outdated\n&nbsp;\nPackage Current Wanted Latest Location\n------- ------- ------ ------ --------\nexpress 3.4.8 3.4.8 4.0.0-rc2 express\njade 1.1.5 1.1.5 1.3.0 jade\ncors 2.1.1 2.1.1 2.2.0 cors\njade 0.26.3 0.26.3 1.3.0 mocha &amp;gt; jade\ndiff 1.0.7 1.0.7 1.0.8 mocha &amp;gt; diff\nglob 3.2.3 3.2.3 3.2.9 mocha &amp;gt; glob\ncommander 2.0.0 2.0.0 2.1.0 mocha &amp;gt; commander</code></pre>\n<p>如果你做的是开源的node程序或模块，可以看看<a class=\"ext\" href=\"https://david-dm.org/\" target=\"_blank\" rel=\"external nofollow noopener\">david-dm</a>，<a class=\"ext\" href=\"https://nodei.co/\" target=\"_blank\" rel=\"external nofollow noopener\">NodeICO</a>和<a class=\"ext\" href=\"http://shields.io/\" target=\"_blank\" rel=\"external nofollow noopener\">shields.io</a>，你可以用这三个优秀服务所提供的图片徽章在项目的README或网站上显示生动的依赖信息。</p>\n<h3>9.用npm脚本运行定制的构建步骤</h3>\n<p>随着npm生态系统的持续增长，开发和构建过程的自动化选择也会随之增长。<a class=\"ext\" href=\"http://gruntjs.com/\" target=\"_blank\" rel=\"external nofollow noopener\">Grunt</a>是迄今为止node世界中最流行的构建工具，但像<a class=\"ext\" href=\"http://gulpjs.com/\" target=\"_blank\" rel=\"external nofollow noopener\">gulp.js</a>这种新工具，以及<a class=\"ext\" href=\"http://substack.net/task_automation_with_npm_run\" target=\"_blank\" rel=\"external nofollow noopener\">普通的老式npm脚本</a>也因为较轻的负载受到欢迎。</p>\n<p>在你把node程序部署到Heroku上时，要运行npm install --production命令以确保程序的npm依赖项会被下载下来装上。但那个命令也会做其它事情：它会运行你在package.json文件中定义的所有npm脚本钩子，比如preinstall和postinstall。这里有个样本：</p>\n<pre class=\"language-json\"><code>{\n  \"name\": \"my-node-app\",\n  \"version\": \"1.2.3\",\n  \"scripts\": {\n    \"preinstall\": \"echo here it comes!\",\n    \"postinstall\": \"echo there it goes!\",\n    \"start\": \"node index.js\",\n    \"test\": \"tap test/*.js\"\n  }\n}</code></pre>\n<p>这些脚本可以是行内bash命令，或者也可以指向可执行的命令行文件。你还可以在脚本内引用其他npm脚本：</p>\n<pre class=\"language-json\"><code>{\n  \"scripts\": {\n    \"postinstall\": \"npm run build &amp;amp;&amp;amp; npm run rejoice\",\n    \"build\": \"grunt\",\n    \"rejoice\": \"echo yay!\",\n    \"start\": \"node index.js\"\n  }\n}</code></pre>\n<h3>10.尝试新东西</h3>\n<p>ES6，也就是被大众称为JavaScript的ECMAScript语言规范的下一版，其工作名称为Harmony。 Harmony给JavaScript带来了很多振奋人心的新特性，其中很多已经出现在较新版本的node中了。</p>\n<p>Harmony实现了<a class=\"ext\" href=\"https://github.com/lukehoban/es6features\" target=\"_blank\" rel=\"external nofollow noopener\">很多新特性</a>，比如<a class=\"ext\" href=\"https://github.com/JustinDrake/node-es6-examples#block-scoping\" target=\"_blank\" rel=\"external nofollow noopener\">块作用域</a>、<a class=\"ext\" href=\"https://github.com/JustinDrake/node-es6-examples#generators\" target=\"_blank\" rel=\"external nofollow noopener\">生成器</a>、<a class=\"ext\" href=\"https://github.com/JustinDrake/node-es6-examples#proxies\" target=\"_blank\" rel=\"external nofollow noopener\">代理</a>、<a class=\"ext\" href=\"https://github.com/JustinDrake/node-es6-examples#weak-maps\" target=\"_blank\" rel=\"external nofollow noopener\">弱映射</a>等等。</p>\n<p>要在你的node程序中启用harmony的特性，需要指定一个比较新的node引擎，比如0.11.x，并在启动脚本中设置--harmony选项：</p>\n<pre class=\"language-json\"><code>{ \n \"scripts\": {\n    \"start\": \"node --harmony index.js\"\n  },\n  \"engines\": {\n    \"node\": \"0.11.x\"\n  }\n}</code></pre>\n<h3><a class=\"ext\" href=\"https://gist.github.com/wuhaixing/9755199#11-browserify\" target=\"_blank\" rel=\"external nofollow noopener\" name=\"11-browserify\"></a>11. Browserify</h3>\n<p>客户端JavaScript有乱如麻团般的遗留代码，但那并不是语言本身的错。由于缺乏合理的依赖项管理工具，让jQuery-插件拷贝-粘帖的黑暗时代延续了好多年。感谢npm，带着我们步入了前端振兴的年代：npm注册中心像野草一样疯长，为浏览器设计的模块也呈现出了惊人的增长势头。</p>\n<p><a class=\"ext\" href=\"http://browserify.org/articles\" target=\"_blank\" rel=\"external nofollow noopener\">Browserify</a>是一个让node模块可以用在浏览器中的神奇工具。如果你是前端开发人员，browserify将会改变你的人生。可能不是今天，也不是明天，但不会太久。如果你想开始使用browserify，请参阅<a class=\"ext\" href=\"http://browserify.org/articles\" target=\"_blank\" rel=\"external nofollow noopener\">这些文章</a>。</p>\n<h3>你有哪些习惯？</h3>\n<p>不管你已经做过一段时间node程序，还是<a class=\"ext\" href=\"https://devcenter.heroku.com/articles/getting-started-with-nodejs\" target=\"_blank\" rel=\"external nofollow noopener\">刚刚开始</a>，我们都希望这些小技巧能对你有所帮助。如果你有一些（健康的）node习惯想要跟大家分享，请在发tweet时带上<a class=\"ext\" href=\"https://twitter.com/search?q=%23node_habits&amp;src=typd&amp;f=realtime\" target=\"_blank\" rel=\"external nofollow noopener\">#node_habits</a>标签。编码快乐！</p>\n<h3><a class=\"ext\" href=\"https://gist.github.com/wuhaixing/9755199#%E4%BD%9C%E8%80%85%E7%AE%80%E4%BB%8B\" target=\"_blank\" rel=\"external nofollow noopener\" name=\"%E4%BD%9C%E8%80%85%E7%AE%80%E4%BB%8B\"></a>作者简介</h3>\n<p>本文最初由<a class=\"ext\" href=\"http://zeke.sikelianos.com/\" target=\"_blank\" rel=\"external nofollow noopener\">Zeke sikelianos</a>发表在<a class=\"ext\" href=\"https://www.heroku.com/\" target=\"_blank\" rel=\"external nofollow noopener\">Heroku</a>上。Zeke在Heroku工作，用ruby和coffeescript编写开源软件。他从事设计师这一职业已经有14年了，信奉信息自由的精神，并且相信用计算机可以创造出美好的事物。</p>\n<hr />\n<p><strong>查看英文原文：</strong><a class=\"ext\" href=\"https://blog.heroku.com/archives/2014/3/11/node-habits\" target=\"_blank\" rel=\"external nofollow noopener\">What&rsquo;s New in Node.js v0.12 &ndash; Running Multiple Instances in a Single Process</a>&nbsp;</p>\n<p>via ：&nbsp;<a class=\"ext\" href=\"http://www.infoq.com/cn/articles/node.js-habits\" target=\"_blank\" rel=\"external nofollow noopener\">http://www.infoq.com/cn/articles/node.js-habits</a>&nbsp;</p>\n<p>感谢<a class=\"ext\" href=\"http://www.infoq.com/cn/author/%E5%90%B4%E6%B5%B7%E6%98%9F\" target=\"_blank\" rel=\"external nofollow noopener\">吴海星</a>对本文的策划。</p>','2014-04-23 11:30:50','2019-06-27 03:38:15','2019-09-18 22:07:43',NULL),(13,1,1,0,57,'HTML Email 编写指南','Html email 编写指南','html-email','https://linux.cn/article-2939-1.html','今天，我想写一个\"低技术\"问题。\n话说我订阅了不少了新闻邮件（Newsletter），比如JavaScript Weekly。每周收到一封邮件，了解本周的大事。\n有一天，我就在想，是不是我也能做一个这样的邮件？\n然后，就发现这事不那么容易。抛开后台和编辑工作，单单是设计一个Email样板，就需要不少心思。','https://net.lnmpa.top/thumbnail/2019/07/b77db2cd5804ecbce3ea60fcc471640b.jpg-pic540','<p>作者：&nbsp;<a class=\"fn url ext\" href=\"http://www.ruanyifeng.com/\" target=\"_blank\" rel=\"external nofollow noopener\">阮一峰</a></p>\n<p>今天，我想写一个\"低技术\"问题。</p>\n<p>话说我订阅了不少了新闻邮件（Newsletter），比如<a class=\"ext\" href=\"http://javascriptweekly.com/\" target=\"_blank\" rel=\"external nofollow noopener\">JavaScript Weekly</a>。每周收到一封邮件，了解本周的大事。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/07/b77db2cd5804ecbce3ea60fcc471640b.jpg-pic540\" alt=\"\" width=\"349\" height=\"460\" /></p>\n<p>有一天，我就在想，是不是我也能做一个这样的邮件？</p>\n<p>然后，就发现这事不那么容易。抛开后台和编辑工作，单单是设计一个Email样板，就需要不少心思。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/58d8281de558fc969613f478a3f7c141.jpg-pic540\" alt=\"\" width=\"540\" height=\"540\" /></p>\n<p>因为这种带格式的邮件，其实就是一张网页，正式名称叫做<a class=\"ext\" href=\"http://en.wikipedia.org/wiki/HTML_email\" target=\"_blank\" rel=\"external nofollow noopener\">HTML Email</a>。它能否正常显示，完全取决于邮件客户端。大多数的邮件客户端（比如Outlook和Gmail），会过滤HTML设置，让邮件面目全非。</p>\n<p>我发现，编写HTML Email的窍门，就是使用15年前的网页制作方法。下面就是我整理的编写指南。</p>\n<h3>1. Doctype</h3>\n<p>目前，兼容性最好的Doctype是XHTML 1.0 Strict，事实上Gmail和Hotmail会删掉你的Doctype，换上这个Doctype。</p>\n<pre class=\"language-markup\"><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n　&lt;head&gt;\n　　&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt;\n　　&lt;title&gt;HTML Email编写指南&lt;/title&gt;\n　　&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/&gt;\n　&lt;/head&gt;\n&lt;/html&gt;</code></pre>\n<p>使用这个Doctype，也就意味着，不能使用HTML5的语法。</p>\n<h3>2. 布局</h3>\n<p>网页的布局（layout）必须使用表格（table）。首先，放置一个最外层的大表格，用来设置背景。</p>\n<pre class=\"language-markup\"><code>&lt;body style=\"margin: 0; padding: 0;\"&gt;\n　&lt;table border=\"1\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\"&gt;\n　　&lt;tr&gt;\n　　　&lt;td&gt; Hello! &lt;/td&gt;\n　　&lt;/tr&gt;\n　&lt;/table&gt;\n&lt;/body&gt;</code></pre>\n<p>表格的 border 属性等于1, 是为了方便开发。正式发布的时候，再把这个属性设为0。</p>\n<p>在内层，放置第二个表格。用来展示内容。第二个table的宽度定为600像素，防止超过客户端的显示宽度。</p>\n<pre class=\"language-markup\"><code>&lt;table align=\"center\" border=\"1\" cellpadding=\"0\" cellspacing=\"0\" width=\"600\" style=\"border-collapse: collapse;\"&gt;\n　&lt;tr&gt;\n　　&lt;td&gt; Row 1 &lt;/td&gt;\n　&lt;/tr&gt;\n　&lt;tr&gt;\n　　&lt;td&gt; Row 2 &lt;/td&gt;\n　&lt;/tr&gt;\n　&lt;tr&gt;\n　　&lt;td&gt; Row 3 &lt;/td&gt;\n　&lt;/tr&gt;\n&lt;/table&gt;</code></pre>\n<p>邮件内容有几个部分，就设置几行（row）。</p>\n<h3>3. 图片</h3>\n<p>图片是唯一可以引用的外部资源。其他的外部资源，比如样式表文件、字体文件、视频文件等，一概不能引用。</p>\n<p>有些客户端会给图片链接加上边框，要去除边框。</p>\n<pre class=\"language-css\"><code>img {outline:none; text-decoration:none; -ms-interpolation-mode: bicubic;}\na img {border:none;}</code></pre>\n<pre class=\"language-markup\"><code>&lt;img border=\"0\" style=\"display:block;\"&gt;</code></pre>\n<p>需要注意的是，不少客户端默认不显示图片（比如Gmail），所以要确保即使没有图片，主要内容也能被阅读。</p>\n<h3>4. 行内样式</h3>\n<p>所有的CSS规则，最好都采用行内样式。因为放置在网页头部的样式，很可能会被客户端删除。客户端对CSS规则的支持情况，请看<a class=\"ext\" href=\"http://www.campaignmonitor.com/css/\" target=\"_blank\" rel=\"external nofollow noopener\">这里</a>。</p>\n<p>另外，不要采用CSS的简写形式，有些客户端不支持。比如，不要写成下面这样：</p>\n<pre class=\"language-markup\"><code>style=\"font: 8px/14px Arial, sans-serif;\"</code></pre>\n<p>如果想表达</p>\n<pre class=\"language-markup\"><code>&lt;p style=\"margin: 1em 0;\"&gt;&lt;/p&gt;</code></pre>\n<p>要写成下面这样：</p>\n<pre class=\"language-markup\"><code>&lt;p style=\"margin-top: 1em; margin-bottom: 1em; margin-left: 0; margin-right: 0;\"&gt;&lt;/p&gt;</code></pre>\n<h3>5. W3C校验和测试工具</h3>\n<p>要保证最终的代码，能够通过<a class=\"ext\" href=\"http://validator.w3.org/\" target=\"_blank\" rel=\"external nofollow noopener\">W3C</a>的校验，因为某些客户端会把不合格属性剥离。还要使用测试工具（<a class=\"ext\" href=\"http://mailchimp.com/features/inbox-inspector/\" target=\"_blank\" rel=\"external nofollow noopener\">1</a>,&nbsp;<a class=\"ext\" href=\"https://litmus.com/\" target=\"_blank\" rel=\"external nofollow noopener\">2</a>,&nbsp;<a class=\"ext\" href=\"http://www.emailonacid.com/\" target=\"_blank\" rel=\"external nofollow noopener\">3</a>），查看在不同客户端的显示结果。</p>\n<p>发送HTML Email的时候，不要忘记MIME类型不能使用</p>\n<pre class=\"language-markup\"><code>Content-Type: text/plain;</code></pre>\n<p>而要使用</p>\n<pre class=\"language-markup\"><code>Content-Type: Multipart/Alternative;</code></pre>\n<p>发送工具可以考虑使用&nbsp;<a class=\"ext\" href=\"http://mailchimp.com/\" target=\"_blank\" rel=\"external nofollow noopener\">MailChimp</a>&nbsp;和&nbsp;<a class=\"ext\" href=\"http://www.campaignmonitor.com/\" target=\"_blank\" rel=\"external nofollow noopener\">Campaign Monitor</a>&nbsp;。</p>\n<h3>6. 模板</h3>\n<p>使用别人已经做好的模板，是一个不错的选择（<a class=\"ext\" href=\"http://mailchimp.com/features/email-templates/\" target=\"_blank\" rel=\"external nofollow noopener\">这里</a>和<a class=\"ext\" href=\"http://www.campaignmonitor.com/templates/all/\" target=\"_blank\" rel=\"external nofollow noopener\">这里</a>），网上还可以搜到<a class=\"ext\" href=\"http://www.google.com.hk/search?q=email+template\" target=\"_blank\" rel=\"external nofollow noopener\">更多</a>。</p>\n<p>自己开发的话，可以参考<a class=\"ext\" href=\"http://htmlemailboilerplate.com/\" target=\"_blank\" rel=\"external nofollow noopener\">HTML Email Boilerplate</a>和<a class=\"ext\" href=\"http://www.emailology.org/#1\" target=\"_blank\" rel=\"external nofollow noopener\">Emailology</a>。</p>\n<h3>7. 参考链接</h3>\n<p>进一步研究，请参考下面的文章。</p>\n<p>　　- Sean Powell，<a class=\"ext\" href=\"http://hub.tutsplus.com/tutorials/say-hello-to-the-html-email-boilerplate--webdesign-5143\" target=\"_blank\" rel=\"external nofollow noopener\">Say Hello to the HTML Email Boilerplate</a><br />　　- Nicole Merlin，<a class=\"ext\" href=\"http://webdesign.tutsplus.com/tutorials/htmlcss-tutorials/build-an-html-email-template-from-scratch/\" target=\"_blank\" rel=\"external nofollow noopener\">Build an HTML Email Template From Scratch</a><br />　　- Nicole Merlin，&nbsp;<a class=\"ext\" href=\"http://hub.tutsplus.com/tutorials/what-you-should-know-about-html-email--webdesign-12908\" target=\"_blank\" rel=\"external nofollow noopener\">What You Should Know About HTML Email</a>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<hr />\n<p>via ：&nbsp;<a class=\"ext\" href=\"http://www.ruanyifeng.com/blog/2013/06/html_email.html\" target=\"_blank\" rel=\"external nofollow noopener\">http://www.ruanyifeng.com/blog/2013/06/html_email.html</a></p>','2014-04-27 19:15:37','2019-06-27 11:21:21','2019-09-19 17:59:34',NULL),(14,1,1,0,61,'10款流行的Markdown编辑器，总有一款适合你','Ten popular Markdown editors, there\'s always one for you','ten-popular-markdown-editors-there-s-always-one-for-you','https://linux.cn/article-2994-1.html','作为一个开源人，如果你不会使用Markdown语法，那你就OUT了！Markdown 是 2004 年由 John Gruberis 设计和开发的纯文本格式的语法，非常的简单实用。 CSDN CODE平台的 帮助文档、项目README文件、文档项目甚至包括ISSUES和项目评论等都是支持Markdown语法的！\n以下，我们收集了10个业界最受欢迎的Markdown编辑器，喜欢用Markdown的朋友都来看看吧！（以下排名仅为一家之言，请勿拍砖）','https://net.lnmpa.top/thumbnail/2019/07/bf35698fe4ad5fd4902a96e4cf53c23f.png-pic540','<p>作为一个开源人，如果你不会使用Markdown语法，那你就OUT了！Markdown 是 2004 年由 John Gruberis 设计和开发的纯文本格式的语法，非常的简单实用。&nbsp;<a class=\"ext\" href=\"http://code.csdn.net/\" target=\"_blank\" rel=\"external nofollow noopener\">CSDN CODE</a>平台的&nbsp;<a class=\"ext\" href=\"https://code.csdn.net/help\" target=\"_blank\" rel=\"external nofollow noopener\">帮助文档</a>、项目README文件、文档项目甚至包括ISSUES和项目评论等都是支持Markdown语法的！</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/07/bf35698fe4ad5fd4902a96e4cf53c23f.png-pic540\" alt=\"\" width=\"400\" height=\"300\" /></p>\n<p>以下，我们收集了10个业界最受欢迎的Markdown编辑器，喜欢用Markdown的朋友都来看看吧！（以下排名仅为一家之言，请勿拍砖）</p>\n<h3><strong>1.MarkdownPad</strong>&nbsp;</h3>\n<p class=\"article_img\"><strong><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/28f27645ea7cdf3d8d4f62b688b61aad.jpg-pic540\" alt=\"\" width=\"400\" height=\"287\" border=\"0\" data-pinit=\"registered\" /><br /></strong></p>\n<p>用户可以通过键盘快捷键和工具栏按钮来使用或者移除 Markdown 格式。MarkdownPad左右栏的分割方式令用户可以实时看到 HTML 格式的 Markdown 文档。&nbsp;</p>\n<p>下载地址：&nbsp;<a class=\"ext\" href=\"http://markdownpad.com/\" target=\"_blank\" rel=\"external nofollow noopener\">http://markdownpad.com/</a></p>\n<h3><strong>2.ReText</strong></h3>\n<p class=\"article_img\"><strong><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/bed03c043fb7f3ec871bf983af6006b4.jpg-pic540\" alt=\"\" width=\"400\" height=\"278\" border=\"0\" data-pinit=\"registered\" /><br /></strong></p>\n<p>ReText 是一个使用 Markdown 语法和 reStructuredText (reST) 结构的文本编辑器，编辑的内容支持导出到 PDF、ODT 和 HTML 以及纯文本，支持即时预览、网页生成以及 HTML 语法高亮、全屏模式，可导出文件到 Google Docs 等。&nbsp;</p>\n<p>下载地址：&nbsp;<a class=\"ext\" href=\"http://sourceforge.net/p/retext/home/ReText/\" target=\"_blank\" rel=\"external nofollow noopener\">http://sourceforge.net/p/retext/home/ReText/</a></p>\n<h3><strong>3.WMD</strong></h3>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/2fdc623767b919888880d689156313bd.jpg-pic540\" alt=\"\" width=\"400\" height=\"206\" border=\"0\" data-pinit=\"registered\" />&nbsp;</p>\n<p>WMD (wmd-editor)是一个简单轻量级的HTML编辑器，使用的是 Markdown 文本格式数据，适合用来做博客评论、发帖和一些基本的内容发布系统，支持流行的各种浏览器。&nbsp;</p>\n<p>下载地址：&nbsp;<a class=\"ext\" href=\"http://code.google.com/p/wmd/\" target=\"_blank\" rel=\"external nofollow noopener\">http://code.google.com/p/wmd/</a></p>\n<h3><strong>4.Mou</strong></h3>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/d3f87a5bc044635c55675b1146374383.jpg-pic540\" alt=\"\" width=\"400\" height=\"270\" border=\"0\" data-pinit=\"registered\" />&nbsp;</p>\n<p>Mou 是 Mac下杰出的 Markdown 编辑器，提供语法高亮、在线预览、同步滚动、全屏模式，支持自定保存、自动匹配，允许自定义主题，支持 CSS，HTML 和 PDF 导出等。&nbsp;</p>\n<p>下载地址：&nbsp;<a class=\"ext\" href=\"http://mouapp.com/\" target=\"_blank\" rel=\"external nofollow noopener\">http://mouapp.com/</a></p>\n<h3><strong>5.EpicEditor</strong></h3>\n<p class=\"article_img\"><strong><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/9f05368a531f744f3c1a7f58dc2f9904.jpg-pic540\" alt=\"\" width=\"400\" height=\"254\" border=\"0\" data-pinit=\"registered\" /><br /></strong></p>\n<p>EpicEditor 是一个可嵌入式的 JavaScript Markdown 编辑器，提供全屏编辑、在线预览、自动保存草稿和离线编辑支持。对开发者提供可可靠的 API 做风格设置。&nbsp;</p>\n<p>下载地址：&nbsp;<a class=\"ext\" href=\"http://epiceditor.com/\" target=\"_blank\" rel=\"external nofollow noopener\">http://epiceditor.com/</a>&nbsp;</p>\n<h3><strong>6.CuteMarkEd</strong></h3>\n<p class=\"article_img\"><strong><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/9f029c722f3a0d36df9c6d743c2d3a14.jpg-pic540\" alt=\"\" width=\"400\" height=\"220\" border=\"0\" data-pinit=\"registered\" /><br /></strong></p>\n<p>CuteMarkEd 是一个 Markdown 编辑器，提供实时 HTML 预览、数学表达式和源码高亮。&nbsp;</p>\n<p>下载地址：<a class=\"ext\" href=\"http://cloose.github.io/CuteMarkEd\" target=\"_blank\" rel=\"external nofollow noopener\">http://cloose.github.io/CuteMarkEd</a></p>\n<h3><strong>7.MarkPad</strong></h3>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/08e0ce3bf9c65b1997e7d59295b36eb7.jpg-pic540\" alt=\"\" width=\"400\" height=\"180\" border=\"0\" data-pinit=\"registered\" /></p>\n<p>MarkPad 是款开源的 Markdown 编辑器，与 Window 8 风格和谐友好的界面，可以直接在你的博客或者 GitHub 中打开、保存文档，直接将图片粘贴到 Markdown 文档中。</p>\n<p>下载地址：<a class=\"ext\" href=\"http://code52.org/DownmarkerWPF/\" target=\"_blank\" rel=\"external nofollow noopener\">http://code52.org/DownmarkerWPF/</a></p>\n<h3><strong>8.Haroopad</strong></h3>\n<p class=\"article_img\"><strong><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/9bebbd244fc67be13d600d70358824d7.jpg-pic540\" alt=\"\" width=\"400\" height=\"225\" border=\"0\" data-pinit=\"registered\" /><br /></strong></p>\n<p>Haroopad 是一款覆盖三大主流桌面系统的编辑器，支持 Windows、Mac OS X 和 Linux。 主题样式丰富，语法标亮支持 54 种编程语言。该工具重点推荐 Ubuntu/Linux 用户使用，从此可以告别 gedit 加 Markdown 插件这种工作方式了。&nbsp;</p>\n<p>下载地址：&nbsp;<a class=\"ext\" href=\"http://pad.haroopress.com/user.html\" target=\"_blank\" rel=\"external nofollow noopener\">http://pad.haroopress.com/user.html</a></p>\n<h3><strong>9.MarkdownEditor</strong></h3>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/4867f066d63be4eb48e329ad778b070c.jpg-pic540\" alt=\"\" width=\"400\" height=\"211\" border=\"0\" data-pinit=\"registered\" />&nbsp;</p>\n<p>MarkdownEditor 是一款基于浏览器的 Markdown 文本编辑器，功能非常简单实用。&nbsp;</p>\n<p>在线地址：&nbsp;<a class=\"ext\" href=\"http://jbt.github.io/markdown-editor\" target=\"_blank\" rel=\"external nofollow noopener\">http://jbt.github.io/markdown-editor</a></p>\n<h3><strong>10.QMarkdowner</strong></h3>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/d22d79852b2fc2e7787ef6feb206de91.jpg-pic540\" alt=\"\" width=\"400\" height=\"225\" border=\"0\" data-pinit=\"registered\" /></p>\n<p>QMarkdowner是一款基于PyQt4的markdown编辑器，支持实时编辑与实时预览和全屏预览。</p>\n<p>下载地址：<a class=\"ext\" href=\"https://github.com/dragondjf/QMarkdowner\" target=\"_blank\" rel=\"external nofollow noopener\">https://github.com/dragondjf/QMarkdowner</a>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<hr />\n<p>via：&nbsp;<a class=\"ext\" href=\"http://code.csdn.net/news/2819623\" target=\"_blank\" rel=\"external nofollow noopener\">http://code.csdn.net/news/2819623</a></p>','2014-05-09 21:23:08','2019-06-27 11:25:38','2019-09-18 15:38:38',NULL),(15,1,1,0,54,'随机数是骗人的，.Net、Java、C为我作证','Random numbers are deceptive,.Net, Java, and C testify to me','random-numbers-are-deceptive-net-java-and-c-testify-to-me','https://linux.cn/article-3119-1.html','几乎所有编程语言中都提供了\"生成一个随机数\"的方法，也就是调用这个方法会生成一个数，我们事先也不知道它生成什么数。\n这要从计算机中\"随机数\"产生的原理说起了。我们知道，计算机是很严格的，在确定的输入条件下，产生的结果是唯一确定的，不会每次执行的结果不一样。那么怎么样用软件实现产生看似不确定的随机数呢？','https://net.lnmpa.top/thumbnail/2019/07/0c457e49a43f27dfe194c5b2f10a3797.png-pic540','<p>几乎所有编程语言中都提供了\"生成一个随机数\"的方法，也就是调用这个方法会生成一个数，我们事先也不知道它生成什么数。比如在.Net中编写下面的代码：</p>\n<pre class=\"language-aspnet\"><code>Random rand = newRandom();\nConsole.WriteLine(rand.Next());</code></pre>\n<p>运行后结果如下：</p>\n<p class=\"article_img\">&nbsp;<img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/a1ce481e5a8241f6d2ece375cd19b9e1.png-pic540\" alt=\"\" width=\"234\" height=\"58\" /></p>\n<p>&nbsp; &nbsp; Next()方法用来返回一个随机数。同样的代码你执行和我的结果很可能不一样，而且我多次运行的结果也很可能不一样，这就是随机数。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/07/0c457e49a43f27dfe194c5b2f10a3797.png-pic540\" alt=\"\" width=\"256\" height=\"256\" /></p>\n<h3>一、陷阱</h3>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;看似很简单的东西，使用的时候有陷阱。我编写下面的代码想生成100个随机数：</p>\n<pre class=\"language-aspnet\"><code>for (int&nbsp;i=0;i&lt;100;i++)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;Random rand = new&nbsp;Random();\n&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(rand.Next());\n}</code></pre>\n<p class=\"article_img\">&nbsp;<img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/11b3bb98b9ccf1ffadc485461d6df050.png-pic540\" alt=\"\" width=\"330\" height=\"305\" /></p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;太奇怪了，竟然生成的\"随机数\"有好多连续一样的，这算什么\"随机数\"呀。有人指点\"把new Random()\"放到for循环外面就可以了：</p>\n<pre class=\"language-aspnet\"><code>Random rand = newRandom();\nfor(int&nbsp;i=0;i&lt;100;i++)\n{\n    Console.WriteLine(rand.Next());\n}</code></pre>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;运行结果：</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/b162e2f0c267b53a5a92d2ea7fe0b7c1.png-pic540\" alt=\"\" width=\"193\" height=\"203\" /></p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;确实可以了！&nbsp;</p>\n<h3>二、这是为什么呢？</h3>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;这要从计算机中\"随机数\"产生的原理说起了。我们知道，计算机是很严格的，在确定的输入条件下，产生的结果是唯一确定的，不会每次执行的结果不一样。那么怎么样用软件实现产生看似不确定的随机数呢？</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;生成随机数的算法有很多种，最简单也是最常用的就是&nbsp;\"线性同余法\"： &nbsp;第n+1个数=(第n个数*29+37) % 1000，其中%是\"求余数\"运算符。很多像我一样的人见了公式都头疼，我用代码解释一下吧，MyRand是一个自定义的生成随机数的类：</p>\n<pre class=\"language-aspnet\"><code>class MyRand {\n     private int seed;\n     public MyRand(int seed)\n     {\n         this.seed = seed;\n     }\n     public int Next()\n     {\n         int next = (seed * 29 + 37) % 1000;\n         seed = next;\n         return next;\n     }\n}</code></pre>\n<p>&nbsp;如下调用：</p>\n<pre class=\"language-aspnet\"><code>MyRand rand = newMyRand(51);\nfor&nbsp;(int&nbsp;i = 0; i &lt; 10; i++) &nbsp;\n{\n&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(rand.Next());\n}</code></pre>\n<p>执行结果如下：</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/14ad59cdfff653925206e0a3cdc10388.png-pic540\" alt=\"\" width=\"218\" height=\"190\" /></p>\n<p>生成的数据是不是看起来\"随机\"了。简单解释一下这个代码：我们创建MyRand的一个对象，然后构造函数传递一个数51，这个数被赋值给seed，每次调用Next方法的时候根据(seed * 29 + 37) % 1000计算得到一个随机数，把这个随机数赋值给seed，然后把生成的随机数返回。这样下次再调用Next()的时候seed就不再是51，而是上次生成的随机数了，这样就看起来好像每一次生成的内容都很\"随机\"了。注意\"%1000\"取余预算的目的是保证生成的随机数不超过1000。&nbsp;</p>\n<p>当然无论是你运行还是我每次运行，输出结果都是一样的随机数，因为根据给定的初始数据51，我们就可以依次推断下来下面生成的所有\"随机数\"是什么都可以算出来了。这个初始的数据51就被称为\"随机数种子\"，这一系列的516、1、66、951、616&hellip;&hellip;数字被称为\"随机数序列\"。我们把51改成52，就会有这样的结果：</p>\n<figure class=\"image\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/ef3c816f2062dbb01f0e71479b796cee.png-pic540\" alt=\"\" width=\"249\" height=\"194\" />\n<figcaption>Caption</figcaption>\n</figure>\n<h3>三、楼主好人，跪求种子</h3>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;那么怎么可以使得每次运行程序的时候都生成不同的\"随机数序列\"呢？因为我们每次执行程序时候的时间很可能不一样，因此我们可以用当前时间做\"随机数种子\"</p>\n<pre class=\"language-aspnet\"><code>MyRand rand = newMyRand(Environment.TickCount);\nfor&nbsp;(int&nbsp;i = 0; i &lt; 10; i++) &nbsp;\n{\n&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(rand.Next());\n}</code></pre>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Environment.TickCount为\"系统启动后经过的微秒数\"。这样每次程序运行的时候Environment.TickCount都不大可能一样（靠手动谁能一微秒内启动两次程序呢），所以每次生成的随机数就不一样了。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/8a758d8703e1fcfeb2749aee52ee1c81.png-pic540\" alt=\"\" width=\"225\" height=\"185\" /></p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;当然如果我们把new MyRand(Environment.TickCount)放到for循环中：&nbsp;</p>\n<pre class=\"language-aspnet\"><code>for&nbsp;(int&nbsp;i = 0; i &lt; 100; i++) &nbsp;\n{\n&nbsp;&nbsp;&nbsp;&nbsp;MyRand rand = newMyRand(Environment.TickCount);\n&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(rand.Next());\n}</code></pre>\n<p class=\"article_img\">&nbsp;<img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/f6dd69945879d004b9c035661a18c6c5.png-pic540\" alt=\"\" width=\"110\" height=\"224\" /></p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;运行结果又变成\"很多是连续\"的了，原理很简单：由于for循环体执行很快，所以每次循环的时候Environment.TickCount很可能还和上次一样（两行简单的代码运行用不了一毫秒那么长事件），由于这次的\"随机数种子\"和上次的\"随机数种子\"一样，这样Next()生成的第一个\"随机数\"就一样了。从\"-320\"变成\"-856\"是因为运行到\"-856\"的时候时间过了一毫秒。&nbsp;</p>\n<h3>四、各语言的实现</h3>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;我们看到.Net的Random类有一个int类型参数的构造函数：</p>\n<pre class=\"language-aspnet\"><code>public&nbsp;Random(int&nbsp;Seed)</code></pre>\n<p>就是和我们写的MyRand一样接受一个\"随机数种子\"。而我们之前调用的无参构造函数就是给<strong>Random</strong>(<strong>int</strong>&nbsp;Seed)传递Environment.TickCount类进行构造的，代码如下：</p>\n<pre class=\"language-aspnet\"><code>public&nbsp;Random()&nbsp;:&nbsp;this(Environment.TickCount)\n{\n}</code></pre>\n<p>这下我们终于明白最开始的疑惑了。 &nbsp;</p>\n<p>同样道理，在C/C++中生成10个随机数不应该如下调用：</p>\n<pre class=\"language-c\"><code>int i;\nfor(i=0;i&lt;10;i++)\n{\n    srand( (unsigned)time( NULL ) );\n    printf(\"%d\\n\",rand());\n}</code></pre>\n<p>&nbsp;而应该：</p>\n<pre class=\"language-c\"><code>srand( (unsigned)time( NULL ) ); //把当前时间设置为\"随机数种子\" \nint i; \nfor(i=0;i&lt;10;i++) \n{\n    printf(\"%d\\n\",rand()); \n}</code></pre>\n<h3>&nbsp;五、\"奇葩\"的Java</h3>\n<p>Java学习者可能会提出问题了，在Java低版本中，如下使用会像.Net、C/C++中一样产生相同的随机数：&nbsp;</p>\n<pre class=\"language-java\"><code>for(int i=0;i&lt;100;i++) \n{\n     Random rand = new Random();\n     System.out.println(rand.nextInt()); \n}</code></pre>\n<p>&nbsp;因为低版本Java中Rand类的无参构造函数的实现同样是用当前时间做种子：</p>\n<pre class=\"language-java\"><code>public Random() \n{\n    this(System.currentTimeMillis()); \n} </code></pre>\n<p>但是在高版本的Java中，比如Java1.8中，上面的\"错误\"代码执行却是没问题的：</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/259227adcc550b72980a7e3e863ce06d.png-pic540\" alt=\"\" width=\"124\" height=\"200\" /></p>\n<p>为什么呢？我们来看一下这个Random无参构造函数的实现代码：</p>\n<pre class=\"language-java\"><code>public Random() \n{ \n    this(seedUniquifier() ^ System.nanoTime()); \n}\nprivate static long seedUniquifier() { \n    for (;;) \n    { \n        long current = seedUniquifier.get(); \n        long next = current * 181783497276652981L; \n        if (seedUniquifier.compareAndSet(current, next))  return next; \n     } \n } \n \nprivatestaticfinal AtomicLong seedUniquifier  = new AtomicLong(8682522807148012L); </code></pre>\n<p>这里不再是使用当前时间来做\"随机数种子\"，而是使用System.nanoTime()这个纳秒级的时间量并且和采用原子量AtomicLong根据上次调用构造函数算出来的一个数做异或运算。关于这段代码的解释详细参考这篇文章《<a class=\"ext\" href=\"http://t1174779123.iteye.com/blog/2037719\" target=\"_blank\" rel=\"external nofollow noopener\">解密随机数生成器（2）&mdash;&mdash;从java源码看线性同余算法</a>》</p>\n<p>最核心的地方就在于使用static变量AtomicLong来记录每次调用Random构造函数时使用的种子，下次再调用Random构造函数的时候避免和上次一样。</p>\n<h3>六、高并发系统中的问题</h3>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;前面我们分析了，对于使用系统时间做\"随机数种子\"的随机数生成器，如果要产生多个随机数，那么一定要共享一个\"随机数种子\"才会避免生成的随机数短时间之内生成重复的随机数。但是在一些高并发的系统中一个不注意还会产生问题，比如一个网站在服务器端通过下面的方法生成验证码：</p>\n<pre class=\"language-aspnet\"><code>Random rand = new Random();\nInt code = rand.Next();</code></pre>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;当网站并发量很大的时候，可能一个毫秒内会有很多个人请求验证码，这就会造成这几个人请求到的验证码是重复的，会给系统带来潜在的漏洞。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再比如我今天看到的一篇文章《当随机不够随机：一个在线扑克游戏的教训》里面就提到了\"由于随机数产生器的种子是基于服务器时钟的，黑客们只要将他们的程序与服务器时钟同步就能够将可能出现的乱序减少到只有&nbsp;200,000&nbsp;种。到那个时候一旦黑客知道&nbsp;5&nbsp;张牌，他就可以实时的对&nbsp;200,000&nbsp;种可能的乱序进行快速搜索，找到游戏中的那种。所以一旦黑客知道手中的两张牌和&nbsp;3&nbsp;张公用牌，就可以猜出转牌和河牌时会来什么牌，以及其他玩家的牌。\" &nbsp;</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;这种情况有如下几种解决方法：</p>\n<ol>\n<li>把Random对象作为一个全局实例（static）来使用。Java中Random是线程安全的（内部进行了加锁处理）；.Net中Random不是线程安全的，需要加锁处理。不过加锁会存在会造成处理速度慢的问题。而且由于初始的种子是确定的，所以攻击者存在着根据得到的若干随机数序列推测出\"随机数种子\"的可能性。</li>\n<li>因为每次生成Guid的值都不样，网上有的文章说可以创建一个Guid计算它的HashCode或者MD5值的方式来做种子：&nbsp;new Random(Guid.NewGuid().GetHashCode())&nbsp;。但是我认为Guid的生成算法是确定的，在条件充足的情况下也是可以预测的，这样生成的随机数也有可预测的可能性。当然只是我的猜测，没经过理论的证明。</li>\n<li>采用\"真随机数发生器\"，快看下一节分解！</li>\n</ol>\n<h3>&nbsp;七、真随机数发生器</h3>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;根据我们之前的分析，我们知道这些所谓的随机数不是真的\"随机\"，只是看起来随机，因此被称为\"伪随机算法\"。在一些对随机要求高的场合会使用一些物理硬件采集物理噪声、宇宙射线、量子衰变等现实生活中的真正随机的物理参数来产生真正的随机数。</p>\n<p>当然也有聪明的人想到了不借助增加\"随机数发生器\"硬件的方法生成随机数。我们操作计算机时候鼠标的移动、敲击键盘的行为都是不可预测的，外界命令计算机什么时候要执行什么进程、处理什么文件、加载什么数据等也是不可预测的，因此导致的CPU运算速度、硬盘读写行为、内存占用情况的变化也是不可预测的。因此如果采集这些信息来作为随机数种子，那么生成的随机数就是不可预测的了。</p>\n<p>在Linux/Unix下可以使用\"/dev/random\"这个真随机数发生器，它的数据主来来自于硬件中断信息，不过产生随机数的速度比较慢。</p>\n<p>Windows下可以调用系统的CryptGenRandom()函数，它主要依据当前进程Id、当前线程Id、系统启动后的TickCount、当前时间、QueryPerformanceCounter返回的高性能计数器值、用户名、计算机名、CPU计数器的值等等来计算。和\"/dev/random\"一样CryptGenRandom()的生成速度也比较慢，而且消耗比较大的系统资源。</p>\n<p>当然.Net下也可以使用RNGCryptoServiceProvider&nbsp;类（System.Security.Cryptography命名空间下）来生成真随机数，根据StackOverflow上一篇帖子介绍RNGCryptoServiceProvider&nbsp;并不是对CryptGenRandom()函数的封装，但是和CryptGenRandom()原理类似。 &nbsp;</p>\n<h3>八、总结</h3>\n<p>有人可能会问：既然有\"/dev/random\" 、CryptGenRandom()这样的\"真随机数发生器\"，为什么还要提供、使用伪随机数这样的\"假货\"？因为前面提到了\"/dev/random\" 、CryptGenRandom()生成速度慢而且比较消耗性能。在对随机数的不可预测性要求低的场合，使用伪随机数算法即可，因为性能比较高。对于随机数的不可预测性要求高的场合就要使用真随机数发生器，真随机数发生器硬件设备需要考虑成本问题，而\"/dev/random\"、CryptGenRandom()则性能较差。</p>\n<p>万事万物都没有完美的，没有绝对的好，也没有绝对的坏，这才是多元世界美好的地方。&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<hr />\n<p>via:&nbsp;<a class=\"ext\" href=\"http://www.cnblogs.com/rupeng/p/3723018.html\" target=\"_blank\" rel=\"external nofollow noopener\">http://www.cnblogs.com/rupeng/p/3723018.html</a></p>','2014-05-30 21:27:17','2019-06-27 11:35:50','2019-09-17 09:09:28',NULL),(16,1,1,0,61,'Bash Getopts - 让你的脚本支持命令行参数','Bash Getopts - Let your script support command line parameters','bash-getopts-let-your-script-support-command-line-parameters','https://linux.cn/article-3204-1.html','以前我总想知道如何为我的Bash脚本创建命令行参数。经过搜索，我发现了2个函数可以处理这个问题，getopt 函数和 getopts 函数。我无意争论哪一个函数更好的。getopts 是一个shell内建命令，而且似乎比 getopt 更容易实现这个功能，所以在这篇文章里我准备讲讲getopts。\n\n开始的时候，我只试着处理传递给脚本的命令行参数。最后，我添加了另外一些有用的功能函数，使得这个脚本可以成为其他任何交互式脚本处理命令行的开始模板。我还添加了一个纯文本格式的帮助函数，让脚本更加容易阅读。\n与其来一长段文字解释 getopts 在bash中是如何工作的，我认为不如直接来一个能工作的脚本更让人觉得轻松一些。','https://net.lnmpa.top/thumbnail/2019/07/805218b7dde9831c42cccebf5d1fed89.png-pic540','<p>以前我总想知道如何为我的Bash脚本创建命令行参数。经过搜索，我发现了2个函数可以处理这个问题，<strong>getopt</strong>&nbsp;函数和&nbsp;<strong>getopts</strong>&nbsp;函数。我无意争论哪一个函数更好的。<strong>getopts</strong>&nbsp;是一个shell内建命令，而且似乎比&nbsp;<strong>getopt</strong>&nbsp;更容易实现这个功能，所以在这篇文章里我准备讲讲getopts。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/07/805218b7dde9831c42cccebf5d1fed89.png-pic540\" alt=\"\" width=\"256\" height=\"256\" /></p>\n<h3>bash getopts</h3>\n<p>开始的时候，我只试着处理传递给脚本的命令行参数。最后，我添加了另外一些有用的功能函数，使得这个脚本可以成为其他任何交互式脚本处理命令行的开始模板。我还添加了一个纯文本格式的帮助函数，让脚本更加容易阅读。</p>\n<p>与其来一长段文字解释&nbsp;<strong>getopts</strong>&nbsp;在bash中是如何工作的，我认为不如直接来一个能工作的脚本更让人觉得轻松一些。</p>\n<pre class=\"language-bash\"><code>#!/bin/bash\n \n######################################################################\n#This is an example of using getopts in Bash. It also contains some\n#other bits of code I find useful.\n#Author: Linerd\n#Website: http://tuxtweaks.com/\n#Copyright 2014\n#License: Creative Commons Attribution-ShareAlike 4.0\n#http://creativecommons.org/licenses/by-sa/4.0/legalcode\n######################################################################\n \n#Set Script Name variable\nSCRIPT=`basename ${BASH_SOURCE[0]}`\n \n#Initialize variables to default values.\nOPT_A=A\nOPT_B=B\nOPT_C=C\nOPT_D=D\n \n#Set fonts for Help.[译注: 这里tput用来更改终端文本属性,比如加粗，高亮等]\nNORM=`tput sgr0`\nBOLD=`tput bold`\nREV=`tput smso`\n \n#Help function\nfunction HELP {\n  echo -e \\\\n\"Help documentation for ${BOLD}${SCRIPT}.${NORM}\"\\\\n\n  echo -e \"${REV}Basic usage:${NORM} ${BOLD}$SCRIPT file.ext${NORM}\"\\\\n\n  echo \"Command line switches are optional. The following switches are recognized.\"\n  echo \"${REV}-a${NORM}  --Sets the value for option ${BOLD}a${NORM}. Default is ${BOLD}A${NORM}.\"\n  echo \"${REV}-b${NORM}  --Sets the value for option ${BOLD}b${NORM}. Default is ${BOLD}B${NORM}.\"\n  echo \"${REV}-c${NORM}  --Sets the value for option ${BOLD}c${NORM}. Default is ${BOLD}C${NORM}.\"\n  echo \"${REV}-d${NORM}  --Sets the value for option ${BOLD}d${NORM}. Default is ${BOLD}D${NORM}.\"\n  echo -e \"${REV}-h${NORM}  --Displays this help message. No further functions are performed.\"\\\\n\n  echo -e \"Example: ${BOLD}$SCRIPT -a foo -b man -c chu -d bar file.ext${NORM}\"\\\\n\n  exit 1\n}\n \n#Check the number of arguments. If none are passed, print help and exit.\nNUMARGS=$#\necho -e \\\\n\"Number of arguments: $NUMARGS\"\nif [ $NUMARGS -eq 0 ]; then\n  HELP\nfi\n \n### Start getopts code ###\n \n#Parse command line flags\n#如果选项需要后跟参数，在选项后面加\":\"\n#注意\"-h\"选项后面没有\":\"，因为他不需要参数。选项字符串最开始的\":\"是用来去掉来自getopts本身的报错的，同时获取不能识别的选项。（译注：如果选项字符串不以\":\"开头，发生错误（非法的选项或者缺少参数）时，getopts会向错误输出打印错误信息；如果以\":\"开头，则不会打印[在man中叫slient error reporting]，同时将出错的选项赋给OPTARG变量）\n \nwhile getopts :a:b:c:d:h FLAG; do\n  case $FLAG in\n    a)  #set option \"a\"\n      OPT_A=$OPTARG\n      echo \"-a used: $OPTARG\"\n      echo \"OPT_A = $OPT_A\"\n      ;;\n    b)  #set option \"b\"\n      OPT_B=$OPTARG\n      echo \"-b used: $OPTARG\"\n      echo \"OPT_B = $OPT_B\"\n      ;;\n    c)  #set option \"c\"\n      OPT_C=$OPTARG\n      echo \"-c used: $OPTARG\"\n      echo \"OPT_C = $OPT_C\"\n      ;;\n    d)  #set option \"d\"\n      OPT_D=$OPTARG\n      echo \"-d used: $OPTARG\"\n      echo \"OPT_D = $OPT_D\"\n      ;;\n    h)  #show help\n      HELP\n      ;;\n    \\?) #unrecognized option - show help\n      echo -e \\\\n\"Option -${BOLD}$OPTARG${NORM} not allowed.\"\n      HELP\n      #在这里如果你不想打印完整的帮助信息，只想显示简单的错误信息，去掉上面的两行，同时使用下面的两行。\n      #echo -e \"Use ${BOLD}$SCRIPT -h${NORM} to see the help documentation.\"\\\\n\n      #exit 2\n      ;;\n  esac\ndone\n \nshift $((OPTIND-1))  #This tells getopts to move on to the next argument.\n \n### End getopts code ###\n \n \n### Main loop to process files ###\n \n#这里你可以用你的脚本处理逻辑来替代。这个例子只是在终端中打印文件的文件名和后缀名。你可以把任意其他的文件处理任务放到这个while-do循环中。   \n \nwhile [ $# -ne 0 ]; do\n  FILE=$1\n  TEMPFILE=`basename $FILE`\n  #TEMPFILE=\"${FILE##*/}\"  #另外一种获取不带后缀的文件名的方法。\n  FILE_BASE=`echo \"${TEMPFILE%.*}\"`  #file without extension\n  FILE_EXT=\"${TEMPFILE##*.}\"  #file extension\n \n \n  echo -e \\\\n\"Input file is: $FILE\"\n  echo \"File withouth extension is: $FILE_BASE\"\n  echo -e \"File extension is: $FILE_EXT\"\\\\n\n  shift  #Move on to next input file.\ndone\n \n### End main loop ###\n \nexit 0</code></pre>\n<p>将上面的代码复制到你的文本编辑器里，然后保存到你的可执行路径下。我将这个脚本命名为&nbsp;<strong>options</strong>&nbsp;并保存到&nbsp;<strong>/home/linerd/bin</strong>&nbsp;路径下。保存之后记得给你的脚本添加可执行权限。</p>\n<pre class=\"language-bash\"><code>chmod +x ~/bin/options</code></pre>\n<p>现在脚本已经可以运行了。试试用&nbsp;<strong>-h</strong>&nbsp;参数来打印帮助信息吧。</p>\n<pre class=\"language-bash\"><code>options -h</code></pre>\n<p>遇到不支持的选项，脚本同样可以给出提示，并打印帮助信息。</p>\n<pre class=\"language-bash\"><code>options -z</code></pre>\n<p>最后，getopts可以以任意的顺序处理你给的命令行参数。唯一的限制是你要处理的文件必须放在所有参数的最后。</p>\n<pre class=\"language-bash\"><code>options -d bar -c chu -b man -a foo example1.txt example2.txt</code></pre>\n<p>现在你可以从这些例子里看到如何通过命令行参数给脚本里的变量赋值。这个脚本里除了getopts还有很多其他的东西，但是我认为这些就足以成为一个新脚本的开头模板了。如果你有兴趣更深入地学习bash的getopts，你可以找找深埋在man page的&ldquo;Builtins&rdquo;这一节里的文档，也可以从&nbsp;<a class=\"ext\" href=\"http://tuxtweaks.com/2014/05/bash-getopts/www.gnu.org/software/bash/manual/html_node/Bourne-Shell-Builtins.html\" target=\"_blank\" rel=\"external nofollow noopener\">Bash Reference Manual</a>&nbsp;找到信息。</p>\n<h3>接下来呢?</h3>\n<p>你会用getops来干什么呢？在评论里告诉我吧。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<hr />\n<p>via:&nbsp;<a class=\"ext\" href=\"http://tuxtweaks.com/2014/05/bash-getopts/\" target=\"_blank\" rel=\"external nofollow noopener\">http://tuxtweaks.com/2014/05/bash-getopts/</a></p>\n<p>译者： CNprober &lt;<a class=\"ext\" href=\"mailto:travelwithheart@yeah.net\" target=\"_blank\" rel=\"external nofollow noopener\">travelwithheart@yeah.net</a>, QQ619913541&gt; 校对：<a class=\"ext\" href=\"https://github.com/wxy\" target=\"_blank\" rel=\"external nofollow noopener\">wxy</a></p>\n<p>本文由&nbsp;<a class=\"ext\" href=\"https://github.com/LCTT/TranslateProject\" target=\"_blank\" rel=\"external nofollow noopener\">LCTT</a>&nbsp;原创翻译，<a href=\"https://linux.cn/article-3204-1.html\">Linux中国</a>&nbsp;荣誉推出</p>','2014-06-16 19:38:08','2019-06-27 11:42:36','2019-09-17 20:21:46',NULL),(17,1,1,0,55,'ngxtop：在命令行实时监控 Nginx 的神器','Ngxtop: Real-time monitoring of Nginx artifacts on the command line','ngxtop-real-time-monitoring-of-nginx-artifacts-on-the-command-line','https://linux.cn/article-3205-1.html','Nginx网站服务器在生产环境中运行的时候需要进行实时监控。实际上，诸如Nagios, Zabbix, Munin 的网络监控软件是支持 Nginx 监控的。\n\n如果你不需要以上软件提供的综合性报告或者长期数据统计功能，只是需要一种快速简便的办法去监控 Nginx 服务器的请求的话，我建议你采用一个叫 ngxtop 的命令行工具。\n\n你马上就会发现 ngxtop 从界面和名称都借鉴了著名的top命令。ngxtop 是通过分析 Nginx 或者其他的日志文件，使用类似 top 命令的界面实时展示出来的。你可以说你知道的其他高端监控工具，但是在简洁这方面 ngxtop 无疑是最好的。简单就意味着不可替代。\n\n本指南中，我将介绍如何使用 ngxtop 实时监控 Nginx 网站服务器。','https://net.lnmpa.top/thumbnail/2019/07/56ac5217bd5df940b678198d0554cb62.jpg/2019/07/4e90bd1846e06e80f1be1a8ae8bba49c.jpg-pic540','<p>Nginx网站服务器在生产环境中<a class=\"ext\" href=\"http://xmodulo.com/2014/01/compile-install-nginx-web-server.html\" target=\"_blank\" rel=\"external nofollow noopener\">运行</a>的时候需要进行实时监控。实际上，诸如<a class=\"ext\" href=\"http://xmodulo.com/2013/12/monitor-common-services-nagios.html\" target=\"_blank\" rel=\"external nofollow noopener\">Nagios</a>, Zabbix, Munin 的网络监控软件是支持 Nginx 监控的。</p>\n<p>如果你不需要以上软件提供的综合性报告或者长期数据统计功能，只是需要一种快速简便的办法去监控 Nginx 服务器的请求的话，我建议你采用一个叫&nbsp;<a class=\"ext\" href=\"https://github.com/lebinh/ngxtop\" target=\"_blank\" rel=\"external nofollow noopener\">ngxtop</a>&nbsp;的命令行工具。</p>\n<p>你马上就会发现 ngxtop 从界面和名称都借鉴了著名的top命令。ngxtop 是通过分析 Nginx 或者其他的日志文件，使用类似 top 命令的界面实时展示出来的。你可以说你知道的其他高端监控工具，但是在简洁这方面 ngxtop 无疑是最好的。简单就意味着不可替代。</p>\n<p>本指南中，我将介绍如何使用 ngxtop 实时监控 Nginx 网站服务器。</p>\n<h3>Linux 上安装 ngxtop</h3>\n<p>首先在 Linux 系统中安装依赖库<a class=\"ext\" href=\"http://ask.xmodulo.com/install-pip-linux.html\" target=\"_blank\" rel=\"external nofollow noopener\">pip</a>（LCTT译注：ngxtop是用python编写的）。</p>\n<p>然后使用如下命令安装 ngxtop。</p>\n<pre class=\"language-bash\"><code>sudo pip install ngxtop</code></pre>\n<h3>ngxtop 使用</h3>\n<p>基本使用方法如下：</p>\n<pre class=\"language-bash\"><code>ngxtop [options]\nngxtop [options] (print|top|avg|sum) &lt;var&gt;\nngxtop info</code></pre>\n<p>这里是一些通用选项。</p>\n<ul>\n<li><strong>-l&nbsp;</strong>: 指定日志文件的完整路径 (Nginx 或 Apache2)</li>\n<li><strong>-f&nbsp;</strong>: 日志格式</li>\n<li><strong>--no-follow</strong>: 处理当前已经写入的日志文件，而不是实时处理新添加到日志文件的日志</li>\n<li><strong>-t&nbsp;</strong>: 更新频率</li>\n<li><strong>-n&nbsp;</strong>: 显示行号</li>\n<li><strong>-o&nbsp;<var></var></strong>: 排序规则(默认是访问计数)</li>\n<li><strong>-a ..., --a ...</strong>: 添加表达式(一般是聚合表达式如： sum, avg, min, max 等)到输出中。</li>\n<li><strong>-v</strong>: 输出详细信息</li>\n<li><strong>-i&nbsp;</strong>: 只处理符合规则的记录</li>\n</ul>\n<p>以下是一些内置变量，他们的含义不言自明。</p>\n<ul>\n<li>body<em>bytes</em>send</li>\n<li>http_referer</li>\n<li>http<em>user</em>agent</li>\n<li>remote_addr</li>\n<li>remote_user</li>\n<li>request</li>\n<li>status</li>\n<li>time_local</li>\n</ul>\n<h3>使用 ngxtop 监控 Nginx</h3>\n<p>ngxtop 默认会从其配置文件 (/etc/nginx/nginx.conf) 中查找 Nginx 日志的地址。所以，监控 Nginx ，运行以下命令即可：</p>\n<pre class=\"language-bash\"><code>ngxtop</code></pre>\n<p>这将会列出10个 Nginx 服务，按请求数量排序。</p>\n<p>显示前20个最频繁的请求：</p>\n<pre class=\"language-bash\"><code>ngxtop -n 20</code></pre>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/07/56ac5217bd5df940b678198d0554cb62.jpg/2019/07/4e90bd1846e06e80f1be1a8ae8bba49c.jpg-pic540\" alt=\"\" width=\"540\" height=\"365\" /></p>\n<p>获取Nginx基本信息：</p>\n<pre class=\"language-bash\"><code>ngxtop info</code></pre>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/a8b29359789e85fa248211c33ace7eb1.jpg-pic540\" alt=\"\" width=\"540\" height=\"196\" /></p>\n<p>你可以自定义显示的变量，简单列出需要显示的变量。使用 \"print\" 命令显示自定义请求。</p>\n<pre class=\"language-bash\"><code>ngxtop print request http_user_agent remote_addr</code></pre>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/8241a7c82ada01b602e8cdda7e04e388.jpg-pic540\" alt=\"\" width=\"540\" height=\"329\" /></p>\n<p>显示请求最多的客户端IP地址</p>\n<pre class=\"language-bash\"><code>ngxtop top remote_addr</code></pre>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/02c41cdaf395ee3353ea76444046222d.jpg-pic540\" alt=\"\" width=\"540\" height=\"182\" /></p>\n<p>显示状态码是404的请求</p>\n<pre class=\"language-bash\"><code>ngxtop -i \'status == 404\' print request status</code></pre>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/07/e9e7e94ed8ae1a03ad0956748d30083d.jpg-pic540\" alt=\"\" width=\"540\" height=\"201\" /></p>\n<p>除了Nginx，ngtop 还可以处理其他的日志文件，比如 Apache 的访问文件。使用以下命令监控 Apache 服务器:</p>\n<pre class=\"language-bash\"><code>tail -f /var/log/apache2/access.log | ngxtop -f common</code></pre>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<hr />\n<p>via:&nbsp;<a class=\"ext\" href=\"http://xmodulo.com/2014/06/monitor-nginx-web-server-command-line-real-time.html\" target=\"_blank\" rel=\"external nofollow noopener\">http://xmodulo.com/2014/06/monitor-nginx-web-server-command-line-real-time.html</a></p>\n<p>译者：<a class=\"ext\" href=\"https://github.com/shipsw\" target=\"_blank\" rel=\"external nofollow noopener\">shipsw</a>&nbsp;校对：<a class=\"ext\" href=\"https://github.com/wxy\" target=\"_blank\" rel=\"external nofollow noopener\">wxy</a></p>\n<p>本文由&nbsp;<a class=\"ext\" href=\"https://github.com/LCTT/TranslateProject\" target=\"_blank\" rel=\"external nofollow noopener\">LCTT</a>&nbsp;原创翻译，<a href=\"https://linux.cn/article-3205-1.html\">Linux中国</a> 荣誉推出</p>','2014-06-16 20:34:45','2019-06-27 12:39:19','2019-09-18 11:36:37',NULL),(18,1,1,0,57,'黑客内核：编写属于你的第一个Linux内核模块','Hacker Kernel: Write your first Linux Kernel Module','hacker-kernel-write-your-first-linux-kernel-module','https://linux.cn/article-3251-1.html','内核编程常常看起来像是黑魔法，而在亚瑟 C 克拉克的眼中，它八成就是了。Linux内核和它的用户空间是大不相同的：抛开漫不经心，你必须小心翼翼，因为你编程中的一个bug就会影响到整个系统。浮点运算做起来可不容易，堆栈固定而狭小，而你写的代码总是异步的，因此你需要想想并发会导致什么。而除了所有这一切之外，Linux内核只是一个很大的、很复杂的C程序，它对每个人开放，任何人都去读它、学习它并改进它，而你也可以是其中之一。','https://net.lnmpa.top/thumbnail/2019/07/31073ce5577ebcc7976998f49fa16620.jpg-pic540','<blockquote>\n<p>曾经多少次想要在内核游荡？曾经多少次茫然不知方向？你不要再对着它迷惘，让我们指引你走向前方&hellip;&hellip;</p>\n</blockquote>\n<p>内核编程常常看起来像是黑魔法，而在亚瑟 C 克拉克的眼中，它八成就是了。Linux内核和它的用户空间是大不相同的：抛开漫不经心，你必须小心翼翼，因为你编程中的一个bug就会影响到整个系统。浮点运算做起来可不容易，堆栈固定而狭小，而你写的代码总是异步的，因此你需要想想并发会导致什么。而除了所有这一切之外，Linux内核只是一个很大的、很复杂的C程序，它对每个人开放，任何人都去读它、学习它并改进它，而你也可以是其中之一。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/07/31073ce5577ebcc7976998f49fa16620.jpg-pic540\" alt=\"\" width=\"540\" height=\"345\" /></p>\n<p>学习内核编程的最简单的方式也许就是写个内核模块：一段可以动态加载进内核的代码。模块所能做的事是有限的&mdash;&mdash;例如，他们不能在类似进程描述符这样的公共数据结构中增减字段（LCTT译注：可能会破坏整个内核及系统的功能）。但是，在其它方面，他们是成熟的内核级的代码，可以在需要时随时编译进内核（这样就可以摒弃所有的限制了）。完全可以在Linux源代码树以外来开发并编译一个模块（这并不奇怪，它称为树外开发），如果你只是想稍微玩玩，而并不想提交修改以包含到主线内核中去，这样的方式是很方便的。</p>\n<p>在本教程中，我们将开发一个简单的内核模块用以创建一个<strong>/dev/reverse</strong>设备。写入该设备的字符串将以相反字序的方式读回（&ldquo;Hello World&rdquo;读成&ldquo;World Hello&rdquo;）。这是一个很受欢迎的程序员面试难题，当你利用自己的能力在内核级别实现这个功能时，可以使你得到一些加分。在开始前，有一句忠告：你的模块中的一个bug就会导致系统崩溃（虽然可能性不大，但还是有可能的）和数据丢失。在开始前，请确保你已经将重要数据备份，或者，采用一种更好的方式，在虚拟机中进行试验。</p>\n<h3 id=\"toc_1\">尽可能不要用root身份</h3>\n<blockquote>\n<p>默认情况下，<strong>/dev/reverse</strong>只有root可以使用，因此你只能使用<strong>sudo</strong>来运行你的测试程序。要解决该限制，可以创建一个包含以下内容的<strong>/lib/udev/rules.d/99-reverse.rules</strong>文件：</p>\n<pre class=\"language-bash\"><code>SUBSYSTEM==\"misc\", KERNEL==\"reverse\", MODE=\"0666\"</code></pre>\n<p>别忘了重新插入模块。让非root用户访问设备节点往往不是一个好主意，但是在开发其间却是十分有用的。这并不是说以root身份运行二进制测试文件也不是个好主意。</p>\n</blockquote>\n<h4 id=\"toc_2\">模块的构造</h4>\n<p>由于大多数的Linux内核模块是用C写的（除了底层的特定于体系结构的部分），所以推荐你将你的模块以单一文件形式保存（例如，reverse.c）。我们已经把完整的源代码放在<a class=\"ext\" href=\"https://github.com/vsinitsyn/reverse\" target=\"_blank\" rel=\"external nofollow noopener\">GitHub上</a>&mdash;&mdash;这里我们将看其中的一些片段。开始时，我们先要包含一些常见的文件头，并用预定义的宏来描述模块：</p>\n<pre class=\"language-c\"><code>#include &lt;linux/init.h&gt;\n#include &lt;linux/kernel.h&gt;\n#include &lt;linux/module.h&gt;\n \nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Valentine Sinitsyn &lt;valentine.sinitsyn@gmail.com&gt;\");\nMODULE_DESCRIPTION(\"In-kernel phrase reverser\");</code></pre>\n<p>这里一切都直接明了，除了<strong>MODULE_LICENSE()</strong>：它不仅仅是一个标记。内核坚定地支持GPL兼容代码，因此如果你把许可证设置为其它非GPL兼容的（如，&ldquo;Proprietary&rdquo;[专利]），某些特定的内核功能将在你的模块中不可用。</p>\n<h3 id=\"toc_3\">什么时候不该写内核模块</h3>\n<blockquote>\n<p>内核编程很有趣，但是在现实项目中写（尤其是调试）内核代码要求特定的技巧。通常来讲，在没有其它方式可以解决你的问题时，你才应该在内核级别解决它。以下情形中，可能你在用户空间中解决它更好：</p>\n<ul>\n<li>你要开发一个USB驱动 &mdash;&mdash; 请查看<a class=\"ext\" href=\"http://www.libusb.org/\" target=\"_blank\" rel=\"external nofollow noopener\">libusb</a>。</li>\n<li>你要开发一个文件系统 &mdash;&mdash; 试试<a class=\"ext\" href=\"http://fuse.sf.net/\" target=\"_blank\" rel=\"external nofollow noopener\">FUSE</a>。</li>\n<li>你在扩展Netfilter &mdash;&mdash; 那么<a class=\"ext\" href=\"http://www.linuxvoice.com/be-a-kernel-hacker/www.netfilter.org/projects/libnetfilter_queue\" target=\"_blank\" rel=\"external nofollow noopener\">libnetfilter_queue</a>对你有所帮助。</li>\n</ul>\n<p>通常，内核里面代码的性能会更好，但是对于许多项目而言，这点性能丢失并不严重。</p>\n</blockquote>\n<p>由于内核编程总是异步的，没有一个<strong>main()</strong>函数来让Linux顺序执行你的模块。取而代之的是，你要为各种事件提供回调函数，像这个：</p>\n<pre class=\"language-c\"><code>static int __init reverse_init(void)\n{\n    printk(KERN_INFO \"reverse device has been registered\\n\");\n    return 0;\n}\n \nstatic void __exit reverse_exit(void)\n{\n    printk(KERN_INFO \"reverse device has been unregistered\\n\");\n}\n \nmodule_init(reverse_init);\nmodule_exit(reverse_exit);</code></pre>\n<p>这里，我们定义的函数被称为模块的插入和删除。只有第一个的插入函数是必要的。目前，它们只是打印消息到内核环缓冲区（可以在用户空间通过<strong>dmesg</strong>命令访问）；<strong>KERN_INFO</strong>是日志级别（注意，没有逗号）。<strong>__init</strong>和<strong>__exit</strong>是属性 &mdash;&mdash; 联结到函数（或者变量）的元数据片。属性在用户空间的C代码中是很罕见的，但是内核中却很普遍。所有标记为<strong>__init</strong>的，会在初始化后释放内存以供重用（还记得那条过去内核的那条&ldquo;Freeing unused kernel memory&hellip;[释放未使用的内核内存&hellip;&hellip;]&rdquo;信息吗？）。<strong>__exit</strong>表明，当代码被静态构建进内核时，该函数可以安全地优化了，不需要清理收尾。最后，<strong>module_init()</strong>和<strong>module_exit()</strong>这两个宏将<strong>reverse_init()</strong>和<strong>reverse_exit()</strong>函数设置成为我们模块的生命周期回调函数。实际的函数名称并不重要，你可以称它们为<strong>init()</strong>和<strong>exit()</strong>，或者<strong>start()</strong>和<strong>stop()</strong>，你想叫什么就叫什么吧。他们都是静态声明，你在外部模块是看不到的。事实上，内核中的任何函数都是不可见的，除非明确地被导出。然而，在内核程序员中，给你的函数加上模块名前缀是约定俗成的。</p>\n<p>这些都是些基本概念 - 让我们来做更多有趣的事情吧。模块可以接收参数，就像这样：</p>\n<pre class=\"language-bash\"><code># modprobe foo bar=1</code></pre>\n<p><strong>modinfo</strong>命令显示了模块接受的所有参数，而这些也可以在<strong>/sys/module//parameters</strong>下作为文件使用。我们的模块需要一个缓冲区来存储参数 &mdash;&mdash; 让我们把这大小设置为用户可配置。在<strong>MODULE_DESCRIPTION()</strong>下添加如下三行：</p>\n<pre class=\"language-markup\"><code>static unsigned long buffer_size = 8192;\nmodule_param(buffer_size, ulong, (S_IRUSR | S_IRGRP | S_IROTH));\nMODULE_PARM_DESC(buffer_size, \"Internal buffer size\");</code></pre>\n<p>这儿，我们定义了一个变量来存储该值，封装成一个参数，并通过sysfs来让所有人可读。这个参数的描述（最后一行）出现在modinfo的输出中。</p>\n<p>由于用户可以直接设置<strong>buffer_size</strong>，我们需要在<strong>reverse_init()</strong>来清除无效取值。你总该检查来自内核之外的数据 &mdash;&mdash; 如果你不这么做，你就是将自己置身于内核异常或安全漏洞之中。</p>\n<pre class=\"language-c\"><code>static int __init reverse_init()\n{\n    if (!buffer_size)\n        return -1;\n    printk(KERN_INFO\n        \"reverse device has been registered, buffer size is %lu bytes\\n\",\n        buffer_size);\n    return 0;\n}</code></pre>\n<p>来自模块初始化函数的非0返回值意味着模块执行失败。</p>\n<h3 id=\"toc_4\">导航</h3>\n<blockquote>\n<p>但你开发模块时，Linux内核就是你所需一切的源头。然而，它相当大，你可能在查找你所要的内容时会有困难。幸运的是，在庞大的代码库面前，有许多工具使这个过程变得简单。首先，是Cscope &mdash;&mdash; 在终端中运行的一个比较经典的工具。你所要做的，就是在内核源代码的顶级目录中运行<strong>make cscope &amp;&amp; cscope</strong>。Cscope和Vim以及Emacs整合得很好，因此你可以在你最喜爱的编辑器中使用它。</p>\n<p>如果基于终端的工具不是你的最爱，那么就访问<a class=\"ext\" href=\"http://lxr.free-electrons.com/\" target=\"_blank\" rel=\"external nofollow noopener\">http://lxr.free-electrons.com</a>吧。它是一个基于web的内核导航工具，即使它的功能没有Cscope来得多（例如，你不能方便地找到函数的用法），但它仍然提供了足够多的快速查询功能。</p>\n</blockquote>\n<p>现在是时候来编译模块了。你需要你正在运行的内核版本头文件（<strong>linux-headers</strong>，或者等同的软件包）和<strong>build-essential</strong>（或者类似的包）。接下来，该创建一个标准的Makefile模板：</p>\n<pre class=\"language-makefile\"><code>obj-m += reverse.o\nall:\nmake -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules\nclean:\nmake -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean</code></pre>\n<p>现在，调用<strong>make</strong>来构建你的第一个模块。如果你输入的都正确，在当前目录内会找到reverse.ko文件。使用<strong>sudo insmod reverse.ko</strong>插入内核模块，然后运行如下命令：</p>\n<pre class=\"language-bash\"><code>dmesg | tail -1\n[ 5905.042081] reverse device has been registered, buffer size is 8192 bytes</code></pre>\n<p>恭喜了！然而，目前这一行还只是假象而已 &mdash;&mdash; 还没有设备节点呢。让我们来搞定它。</p>\n<h4 id=\"toc_5\">混杂设备</h4>\n<p>在Linux中，有一种特殊的字符设备类型，叫做&ldquo;混杂设备&rdquo;（或者简称为&ldquo;misc&rdquo;）。它是专为单一接入点的小型设备驱动而设计的，而这正是我们所需要的。所有混杂设备共享同一个主设备号（10），因此一个驱动(<strong>drivers/char/misc.c</strong>）就可以查看它们所有设备了，而这些设备用次设备号来区分。从其他意义来说，它们只是普通字符设备。</p>\n<p>要为该设备注册一个次设备号（以及一个接入点），你需要声明<strong>struct misc_device</strong>，填上所有字段（注意语法），然后使用指向该结构的指针作为参数来调用<strong>misc_register()</strong>。为此，你也需要包含<strong>linux/miscdevice.h</strong>头文件：</p>\n<pre class=\"language-c\"><code>static struct miscdevice reverse_misc_device = {\n    .minor = MISC_DYNAMIC_MINOR,\n    .name = \"reverse\",\n    .fops = &amp;reverse_fops\n};\nstatic int __init reverse_init()\n{\n    ...\nmisc_register(&amp;reverse_misc_device);\n    printk(KERN_INFO ...\n}</code></pre>\n<p>这儿，我们为名为&ldquo;reverse&rdquo;的设备请求一个第一个可用的（动态的）次设备号；省略号表明我们之前已经见过的省略的代码。别忘了在模块卸下后注销掉该设备。</p>\n<pre class=\"language-c\"><code>static void __exit reverse_exit(void)\n{\n    misc_deregister(&amp;reverse_misc_device);\n    ...\n}</code></pre>\n<p>&lsquo;fops&rsquo;字段存储了一个指针，指向一个<strong>file_operations</strong>结构（在Linux/fs.h中声明），而这正是我们模块的接入点。<strong>reverse_fops</strong>定义如下：</p>\n<pre class=\"language-c\"><code>static struct file_operations reverse_fops = {\n    .owner = THIS_MODULE,\n    .open = reverse_open,\n    ...\n    .llseek = noop_llseek\n};</code></pre>\n<p>另外，<strong>reverse_fops</strong>包含了一系列回调函数（也称之为方法），当用户空间代码打开一个设备，读写或者关闭文件描述符时，就会执行。如果你要忽略这些回调，可以指定一个明确的回调函数来替代。这就是为什么我们将<strong>llseek</strong>设置为<strong>noop_llseek()</strong>，（顾名思义）它什么都不干。这个默认实现改变了一个文件指针，而且我们现在并不需要我们的设备可以寻址（这是今天留给你们的家庭作业）。</p>\n<h4 id=\"toc_6\">关闭和打开</h4>\n<p>让我们来实现该方法。我们将给每个打开的文件描述符分配一个新的缓冲区，并在它关闭时释放。这实际上并不安全：如果一个用户空间应用程序泄漏了描述符（也许是故意的），它就会霸占RAM，并导致系统不可用。在现实世界中，你总得考虑到这些可能性。但在本教程中，这种方法不要紧。</p>\n<p>我们需要一个结构函数来描述缓冲区。内核提供了许多常规的数据结构：链接列表（双联的），哈希表，树等等之类。不过，缓冲区常常从头设计。我们将调用我们的&ldquo;struct buffer&rdquo;：</p>\n<pre class=\"language-c\"><code>struct buffer {\n    char *data, *end, *read_ptr;\n    unsigned long size;\n};</code></pre>\n<p><strong>data</strong>是该缓冲区存储的一个指向字符串的指针，而<strong>end</strong>指向字符串结尾后的第一个字节。<strong>read_ptr</strong>是<strong>read()</strong>开始读取数据的地方。缓冲区的size是为了保证完整性而存储的 &mdash;&mdash; 目前，我们还没有使用该区域。你不能假设使用你结构体的用户会正确地初始化所有这些东西，所以最好在函数中封装缓冲区的分配和收回。它们通常命名为<strong>buffer_alloc()</strong>和<strong>buffer_free()</strong>。</p>\n<pre class=\"language-c\"><code>static struct buffer buffer_alloc(unsigned long size) \n{ \n    struct buffer *buf; \n    buf = kzalloc(sizeof(buf), GFP_KERNEL); \n    if (unlikely(!buf)) \n        goto out; \n        ... \n    out: return buf;\n }</code></pre>\n<p>内核内存使用<strong>kmalloc()</strong>来分配，并使用<strong>kfree()</strong>来释放；<strong>kzalloc()</strong>的风格是将内存设置为全零。不同于标准的<strong>malloc()</strong>，它的内核对应部分收到的标志指定了第二个参数中请求的内存类型。这里，<strong>GFP_KERNEL</strong>是说我们需要一个普通的内核内存（不是在DMA或高内存区中）以及如果需要的话函数可以睡眠（重新调度进程）。<strong>sizeof(*buf)</strong>是一种常见的方式，它用来获取可通过指针访问的结构体的大小。</p>\n<p>你应该随时检查<strong>kmalloc()</strong>的返回值：访问NULL指针将导致内核异常。同时也需要注意<strong>unlikely()</strong>宏的使用。它（及其相对宏<strong>likely()</strong>）被广泛用于内核中，用于表明条件几乎总是真的（或假的）。它不会影响到控制流程，但是能帮助现代处理器通过分支预测技术来提升性能。</p>\n<p>最后，注意<strong>goto</strong>语句。它们常常为认为是邪恶的，但是，Linux内核（以及一些其它系统软件）采用它们来实施集中式的函数退出。这样的结果是减少嵌套深度，使代码更具可读性，而且非常像更高级语言中的<strong>try-catch</strong>区块。</p>\n<p>有了<strong>buffer_alloc()</strong>和<strong>buffer_free()</strong>，<strong>open</strong>和<strong>close</strong>方法就变得很简单了。</p>\n<pre class=\"language-c\"><code>static int reverse_open(struct inode *inode, struct file *file)\n{\n    int err = 0;\n    file-&gt;private_data = buffer_alloc(buffer_size);\n    ...\n    return err;\n}</code></pre>\n<p><strong>struct file</strong>是一个标准的内核数据结构，用以存储打开的文件的信息，如当前文件位置（<strong>file-&gt;f_pos</strong>)、标志(<strong>file-&gt;f_flags</strong>），或者打开模式（<strong>file-&gt;f_mode</strong>)等。另外一个字段<strong>file-&gt;privatedata</strong>用于关联文件到一些专有数据，它的类型是void *，而且它在文件拥有者以外，对内核不透明。我们将一个缓冲区存储在那里。</p>\n<p>如果缓冲区分配失败，我们通过返回否定值（<strong>-ENOMEM</strong>）来为调用的用户空间代码标明。一个C库中调用的<strong>open(2)</strong>系统调用(如&nbsp;<strong>glibc</strong>)将会检测这个并适当地设置<strong>errno</strong>&nbsp;。</p>\n<h4 id=\"toc_7\">学习如何读和写</h4>\n<p>&ldquo;read&rdquo;和&ldquo;write&rdquo;方法是真正完成工作的地方。当数据写入到缓冲区时，我们放弃之前的内容和反向地存储该字段，不需要任何临时存储。<strong>read</strong>方法仅仅是从内核缓冲区复制数据到用户空间。但是如果缓冲区还没有数据，<strong>revers_eread()</strong>会做什么呢？在用户空间中，<strong>read()</strong>调用会在有可用数据前阻塞它。在内核中，你就必须等待。幸运的是，有一项机制用于处理这种情况，就是&lsquo;wait queues&rsquo;。</p>\n<p>想法很简单。如果当前进程需要等待某个事件，它的描述符（<strong>struct task_struct</strong>存储&lsquo;current&rsquo;信息）被放进非可运行（睡眠中）状态，并添加到一个队列中。然后<strong>schedule()</strong>就被调用来选择另一个进程运行。生成事件的代码通过使用队列将等待进程放回<strong>TASK_RUNNING</strong>状态来唤醒它们。调度程序将在以后在某个地方选择它们之一。Linux有多种非可运行状态，最值得注意的是<strong>TASK_INTERRUPTIBLE</strong>（一个可以通过信号中断的睡眠）和<strong>TASK_KILLABLE</strong>（一个可被杀死的睡眠中的进程）。所有这些都应该正确处理，并等待队列为你做这些事。</p>\n<p>一个用以存储读取等待队列头的天然场所就是结构缓冲区，所以从为它添加<strong>wait_queue_head<em>t read\\</em>queue</strong>字段开始。你也应该包含<strong>linux/sched.h</strong>头文件。可以使用DECLARE_WAITQUEUE()宏来静态声明一个等待队列。在我们的情况下，需要动态初始化，因此添加下面这行到<strong>buffer_alloc()</strong>：</p>\n<pre class=\"language-bash\"><code>init_waitqueue_head(&amp;buf-&gt;read_queue);</code></pre>\n<p>我们等待可用数据；或者等待<strong>read_ptr != end</strong>条件成立。我们也想要让等待操作可以被中断（如，通过Ctrl+C）。因此，&ldquo;read&rdquo;方法应该像这样开始：</p>\n<pre class=\"language-c\"><code>static ssize_t reverse_read(struct file *file, char __user * out,\n        size_t size, loff_t * off)\n{\n    struct buffer *buf = file-&gt;private_data;\n    ssize_t result;\n    while (buf-&gt;read_ptr == buf-&gt;end) {\n        if (file-&gt;f_flags &amp; O_NONBLOCK) {\n            result = -EAGAIN;\n            goto out;\n        }\n        if (wait_event_interruptible\n        (buf-&gt;read_queue, buf-&gt;read_ptr != buf-&gt;end)) {\n            result = -ERESTARTSYS;\n            goto out;\n        }\n    }\n...</code></pre>\n<p>我们让它循环，直到有可用数据，如果没有则使用<strong>wait_event_interruptible()</strong>（它是一个宏，不是函数，这就是为什么要通过值的方式给队列传递）来等待。好吧，如果<strong>wait_event_interruptible()</strong>被中断，它返回一个非0值，这个值代表<strong>-ERESTARTSYS</strong>。这段代码意味着系统调用应该重新启动。<strong>file-&gt;f_flags</strong>检查以非阻塞模式打开的文件数：如果没有数据，返回<strong>-EAGAIN</strong>。</p>\n<p>我们不能使用<strong>if()</strong>来替代<strong>while()</strong>，因为可能有许多进程正等待数据。当<strong>write</strong>方法唤醒它们时，调度程序以不可预知的方式选择一个来运行，因此，在这段代码有机会执行的时候，缓冲区可能再次空出。现在，我们需要将数据从<strong>buf-&gt;data</strong>&nbsp;复制到用户空间。<strong>copy_to_user()</strong>内核函数就干了此事：</p>\n<pre class=\"language-c\"><code>size = min(size, (size_t) (buf-&gt;end - buf-&gt;read_ptr));\n    if (copy_to_user(out, buf-&gt;read_ptr, size)) {\n        result = -EFAULT;\n        goto out;\n    }</code></pre>\n<p>如果用户空间指针错误，那么调用可能会失败；如果发生了此事，我们就返回<strong>-EFAULT</strong>。记住，不要相信任何来自内核外的事物！</p>\n<pre class=\"language-c\"><code>buf-&gt;read_ptr += size;\n    result = size;\nout:\n    return result;\n}</code></pre>\n<p>为了使数据在任意块可读，需要进行简单运算。该方法返回读入的字节数，或者一个错误代码。</p>\n<p>写方法更简短。首先，我们检查缓冲区是否有足够的空间，然后我们使用<strong>copy_from_userspace()</strong>函数来获取数据。再然后<strong>read_ptr</strong>和结束指针会被重置，并且反转存储缓冲区内容：</p>\n<pre class=\"language-c\"><code>buf-&gt;end = buf-&gt;data + size;\n    buf-&gt;read_ptr = buf-&gt;data;\n    if (buf-&gt;end &gt; buf-&gt;data)\n        reverse_phrase(buf-&gt;data, buf-&gt;end - 1);</code></pre>\n<p>这里，&nbsp;<strong>reverse_phrase()</strong>干了所有吃力的工作。它依赖于<strong>reverse_word()</strong>函数，该函数相当简短并且标记为内联。这是另外一个常见的优化；但是，你不能过度使用。因为过多的内联会导致内核映像徒然增大。</p>\n<p>最后，我们需要唤醒<strong>read_queue</strong>中等待数据的进程，就跟先前讲过的那样。<strong>wake_up_interruptible()</strong>就是用来干此事的：</p>\n<pre class=\"language-bash\"><code>wake_up_interruptible(&amp;buf-&gt;read_queue);</code></pre>\n<p>耶！你现在已经有了一个内核模块，它至少已经编译成功了。现在，是时候来测试了。</p>\n<h3 id=\"toc_8\">调试内核代码</h3>\n<blockquote>\n<p>或许，内核中最常见的调试方法就是打印。如果你愿意，你可以使用普通的<strong>printk()</strong>&nbsp;（假定使用<strong>KERN_DEBUG</strong>日志等级）。然而，那儿还有更好的办法。如果你正在写一个设备驱动，这个设备驱动有它自己的&ldquo;struct device&rdquo;，可以使用<strong>pr_debug()</strong>或者<strong>dev_dbg()</strong>：它们支持动态调试（<strong>dyndbg</strong>）特性，并可以根据需要启用或者禁用（请查阅<strong>Documentation/dynamic-debug-howto.txt</strong>）。对于单纯的开发消息，使用<strong>pr_devel()</strong>，除非设置了DEBUG，否则什么都不会做。要为我们的模块启用DEBUG，请添加以下行到Makefile中：</p>\n<pre class=\"language-makefile\"><code>CFLAGS_reverse.o := -DDEBUG</code></pre>\n<p>完了之后，使用<strong>dmesg</strong>来查看<strong>pr_debug()</strong>或<strong>pr_devel()</strong>生成的调试信息。 或者，你可以直接发送调试信息到控制台。要想这么干，你可以设置<strong>console_loglevel</strong>内核变量为8或者更大的值（<strong>echo 8 /proc/sys/kernel/printk</strong>），或者在高日志等级，如<strong>KERN_ERR</strong>，来临时打印要查询的调试信息。很自然，在发布代码前，你应该移除这样的调试声明。</p>\n<p>注意内核消息出现在控制台，不要在Xterm这样的终端模拟器窗口中去查看；这也是在内核开发时，建议你不在X环境下进行的原因。</p>\n</blockquote>\n<h3 id=\"toc_9\">惊喜，惊喜！</h3>\n<p>编译模块，然后加载进内核：</p>\n<pre class=\"language-bash\"><code>make\nsudo insmod reverse.ko buffer_size=2048\nlsmod\nreverse 2419 0\nls -l /dev/reverse\ncrw-rw-rw- 1 root root 10, 58 Feb 22 15:53 /dev/reverse</code></pre>\n<p>一切似乎就位。现在，要测试模块是否正常工作，我们将写一段小程序来翻转它的第一个命令行参数。<strong>main()</strong>（再三检查错误）可能看上去像这样：</p>\n<pre class=\"language-bash\"><code>int fd = open(\"/dev/reverse\", O_RDWR);\nwrite(fd, argv[1], strlen(argv[1]));\nread(fd, argv[1], strlen(argv[1]));\nprintf(\"Read: %s\\n\", argv[1]);</code></pre>\n<p>像这样运行：</p>\n<pre class=\"language-bash\"><code>./test \'A quick brown fox jumped over the lazy dog\'\nRead: dog lazy the over jumped fox brown quick A</code></pre>\n<p>它工作正常！玩得更逗一点：试试传递单个单词或者单个字母的短语，空的字符串或者是非英语字符串（如果你有这样的键盘布局设置），以及其它任何东西。</p>\n<p>现在，让我们让事情变得更好玩一点。我们将创建两个进程，它们共享一个文件描述符（及其内核缓冲区）。其中一个会持续写入字符串到设备，而另一个将读取这些字符串。在下例中，我们使用了<strong>fork(2)</strong>系统调用，而pthreads也很好用。我也省略打开和关闭设备的代码，并在此检查代码错误（又来了）：</p>\n<pre class=\"language-bash\"><code>char *phrase = \"A quick brown fox jumped over the lazy dog\";\nif (fork())\n    /* Parent is the writer */\n    while (1)\n        write(fd, phrase, len);\nelse\n    /* child is the reader */\n    while (1) {\n        read(fd, buf, len);\n        printf(\"Read: %s\\n\", buf);\n}</code></pre>\n<p>你希望这个程序会输出什么呢？下面就是在我的笔记本上得到的东西：</p>\n<pre class=\"language-markup\"><code>Read: dog lazy the over jumped fox brown quick A\nRead: A kcicq brown fox jumped over the lazy dog\nRead: A kciuq nworb xor jumped fox brown quick A\nRead: A kciuq nworb xor jumped fox brown quick A\n...</code></pre>\n<p>这里发生了什么呢？就像举行了一场比赛。我们认为<strong>read</strong>和<strong>write</strong>是原子操作，或者从头到尾一次执行一个指令。然而，内核确实无序并发的，随便就重新调度了<strong>reverse_phrase()</strong>函数内部某个地方运行着的写入操作的内核部分。如果在写入操作结束前就调度了<strong>read()</strong>操作呢？就会产生数据不完整的状态。这样的bug非常难以找到。但是，怎样来处理这个问题呢？</p>\n<p>基本上，我们需要确保在写方法返回前没有<strong>read</strong>方法能被执行。如果你曾经编写过一个多线程的应用程序，你可能见过同步原语（锁），如互斥锁或者信号。Linux也有这些，但有些细微的差别。内核代码可以运行进程上下文（用户空间代码的&ldquo;代表&rdquo;工作，就像我们使用的方法）和终端上下文（例如，一个IRQ处理线程）。如果你已经在进程上下文中和并且你已经得到了所需的锁，你只需要简单地睡眠和重试直到成功为止。在中断上下文时你不能处于休眠状态，因此代码会在一个循环中运行直到锁可用。关联原语被称为自旋锁，但在我们的环境中，一个简单的互斥锁 &mdash;&mdash; 在特定时间内只有唯一一个进程能&ldquo;占有&rdquo;的对象 &mdash;&mdash; 就足够了。处于性能方面的考虑，现实的代码可能也会使用读-写信号。</p>\n<p>锁总是保护某些数据（在我们的环境中，是一个&ldquo;struct buffer&rdquo;实例），而且也常常会把它们嵌入到它们所保护的结构体中。因此，我们添加一个互斥锁（&lsquo;struct mutex lock&rsquo;）到&ldquo;struct buffer&rdquo;中。我们也必须用<strong>mutex_init()</strong>来初始化互斥锁；<strong>buffer_alloc</strong>是用来处理这件事的好地方。使用互斥锁的代码也必须包含<strong>linux/mutex.h</strong>。</p>\n<p>互斥锁很像交通信号灯 &mdash;&mdash; 要是司机不看它和不听它的，它就没什么用。因此，在对缓冲区做操作并在操作完成时释放它之前，我们需要更新<strong>reverse_read()</strong>和<strong>reverse_write()</strong>来获取互斥锁。让我们来看看<strong>read</strong>方法 &mdash;&mdash;&nbsp;<strong>write</strong>的工作原理相同：</p>\n<pre class=\"language-c\"><code>static ssize_t reverse_read(struct file *file, char __user * out,\n        size_t size, loff_t * off)\n{\n    struct buffer *buf = file-&gt;private_data;\n    ssize_t result;\n    if (mutex_lock_interruptible(&amp;buf-&gt;lock)) {\n        result = -ERESTARTSYS;\n        goto out;\n}</code></pre>\n<p>我们在函数一开始就获取锁。<strong>mutex_lock_interruptible()</strong>要么得到互斥锁然后返回，要么让进程睡眠，直到有可用的互斥锁。就像前面一样，<strong>_interruptible</strong>后缀意味着睡眠可以由信号来中断。</p>\n<pre class=\"language-c\"><code> while (buf-&gt;read_ptr == buf-&gt;end) {\n        mutex_unlock(&amp;buf-&gt;lock);\n        /* ... wait_event_interruptible() here ... */\n        if (mutex_lock_interruptible(&amp;buf-&gt;lock)) {\n            result = -ERESTARTSYS;\n            goto out;\n        }\n    }</code></pre>\n<p>下面是我们的&ldquo;等待数据&rdquo;循环。当获取互斥锁时，或者发生称之为&ldquo;死锁&rdquo;的情境时，不应该让进程睡眠。因此，如果没有数据，我们释放互斥锁并调用<strong>wait_event_interruptible()</strong>。当它返回时，我们重新获取互斥锁并像往常一样继续：</p>\n<pre class=\"language-c\"><code> if (copy_to_user(out, buf-&gt;read_ptr, size)) {\n        result = -EFAULT;\n        goto out_unlock;\n    }\n    ...\nout_unlock:\n    mutex_unlock(&amp;buf-&gt;lock);\nout:\n    return result;</code></pre>\n<p>最后，当函数结束，或者在互斥锁被获取过程中发生错误时，互斥锁被解锁。重新编译模块（别忘了重新加载），然后再次进行测试。现在你应该没发现毁坏的数据了。</p>\n<h3 id=\"toc_10\">接下来是什么？</h3>\n<p>现在你已经尝试了一次内核黑客。我们刚刚为你揭开了这个话题的外衣，里面还有更多东西供你探索。我们的第一个模块有意识地写得简单一点，在从中学到的概念在更复杂的环境中也一样。并发、方法表、注册回调函数、使进程睡眠以及唤醒进程，这些都是内核黑客们耳熟能详的东西，而现在你已经看过了它们的运作。或许某天，你的内核代码也将被加入到主线Linux源代码树中 &mdash;&mdash; 如果真这样，请联系我们！</p>\n<p>&nbsp;</p>\n<hr />\n<p>via:&nbsp;<a class=\"ext\" href=\"http://www.linuxvoice.com/be-a-kernel-hacker/\" target=\"_blank\" rel=\"external nofollow noopener\">http://www.linuxvoice.com/be-a-kernel-hacker/</a></p>\n<p>译者：<a class=\"ext\" href=\"https://github.com/GOLinux\" target=\"_blank\" rel=\"external nofollow noopener\">GOLinux</a>&nbsp;<a class=\"ext\" href=\"https://github.com/disylee\" target=\"_blank\" rel=\"external nofollow noopener\">disylee</a>&nbsp;校对：<a class=\"ext\" href=\"https://github.com/wxy\" target=\"_blank\" rel=\"external nofollow noopener\">wxy</a></p>\n<p>本文由&nbsp;<a class=\"ext\" href=\"https://github.com/LCTT/TranslateProject\" target=\"_blank\" rel=\"external nofollow noopener\">LCTT</a>&nbsp;原创翻译，<a href=\"https://linux.cn/article-3251-1.html\">Linux中国</a>&nbsp;荣誉推出</p>','2014-06-24 15:49:54','2019-06-28 08:06:15','2019-09-17 09:09:23',NULL),(19,1,1,0,53,'linux简单之美','The Beauty of Simplicity in Linux','the-beauty-of-simplicity-in-linux','https://linux.cn/article-3254-1.html','话说windows也有syscall，这是必须的。但是win的syscall可以直接call吗？可以是\n\n可以但是破费周折，搞成SDT之类的复杂概念。下面看看linux是如何做的吧。','https://net.lnmpa.top/thumbnail/2019/07/337e1dc84736f2b5b2e2d4db47c4424f.jpeg-pic540','<p>话说windows也有syscall，这是必须的。但是win的syscall可以直接call吗？可以是</p>\n<p>可以但是破费周折，搞成SDT之类的复杂概念。下面看看linux是如何做的吧。</p>\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/07/337e1dc84736f2b5b2e2d4db47c4424f.jpeg-pic540\" alt=\"\" width=\"256\" height=\"256\" /></p>\n<pre class=\"language-vim\"><code>section .data\nmsg db \"hello hopy!\",0x0a\n \nsection .text\nglobal _start\n \n_start:\n	mov eax,4\n	mov ebx,1\n	mov ecx,msg\n	mov edx,12\n	int 0x80\n	\n	mov eax,1\n	mov ebx,0\n	int 0x80</code></pre>\n<p>关键是系统调用号要知道，开始找的是usr/include/asm-gen*/unistd.h，</p>\n<p>可是都不对。后来找的是usr/include/x86_64_linux_gnu/asm/下的头文件，</p>\n<p>有2个，分别对应x86和x64.、编译连接指令如下:</p>\n<pre class=\"language-bash\"><code>nasm -f elf main.asm\nld main.o</code></pre>\n<p>运行，段转储错误鸟，查了一下，本猫用的是x64位的linux，所以要生成</p>\n<p>x64位的程序，或者指明是x86的程序，我选择后者:</p>\n<pre class=\"language-bash\"><code>ld -m elf_i386 -o main main.o</code></pre>\n<p>哦鸟！</p>\n<h3>（二）</h3>\n<p>我们在前一章中看到了如何仅仅用syscall做一些简单的事,现在我们看能不能直接调用</p>\n<p>C标准库中的函数快速做一些\"复杂\"的事:</p>\n<pre class=\"language-bash\"><code>section .data\n	ft db \"now is %d\",10\n \nsection .text\nextern puts\nextern exit\nextern sleep\nextern printf\nglobal main\n \nmain:\n	mov edi,11\nagain:	\n	dec edi\n	push edi\n	push ft\n	call printf\n	\n	push 1\n	call sleep\n	\n	cmp edi,0\n	jnz again\n \n	push msg\n	call puts\n	\n	push 0\n	call exit\n	\nmsg:\n db \"happy xxx day!\",0</code></pre>\n<p>以上代码功能很简单,从10倒数到0,然后打印一行,最后结束.与之前代码不同的是其中</p>\n<p>调用了C标准库中的函数.编译和以前一样:</p>\n<pre class=\"language-markup\"><code>nasm -e elf main.asm</code></pre>\n<p>我们看看怎么连接:</p>\n<pre class=\"language-markup\"><code>gcc -m32 -o main main.o</code></pre>\n<p>好鸟!运行正常.</p>\n<p>值得注意的是:我的OS是ubuntu64,而asm代码中是32位的,如果开始用</p>\n<pre class=\"language-markup\"><code>ld -m elf_i386 -lc -o main main.o</code></pre>\n<p>的方式,首先会提示找不到c库,这可以进入/usr/lib,然后使用</p>\n<pre class=\"language-markup\"><code>sudo ln -sv /lib/i386-linux-gun/libc.so.6 libc.so</code></pre>\n<p>创建软连接解决.</p>\n<p>但在运行时提示无法找到可执行文件!该文件明明在的!</p>\n<p>遂用gcc来连接,但要将_start改为main,还要装载32库</p>\n<pre class=\"language-markup\"><code>sudo apt-get install ia32-libs</code></pre>\n<p>还会提示找不到h文件,这时再装载库</p>\n<pre class=\"language-markup\"><code>sudo apt-get install g++-multilib</code></pre>\n<p>还有2族库,如有必要也可加载:</p>\n<pre class=\"language-bash\"><code>sudo apt-get install libc6:i386 libgcc1:i386 gcc-4.6-base:i386 \nlibstdc++5:i386 libstdc++6:i386\nsudo apt-get install libc6-i386</code></pre>\n<p>最后要说的是,一些C代码在用std=c99编译时会发现提示无法获取结构大小,</p>\n<p>这时改成如下即可:</p>\n<pre class=\"language-markup\"><code>gcc -D_GNU_SOURCE -std=c99 main.c</code></pre>\n<h3>&nbsp;（三）</h3>\n<p>在（二）中我们尝试使用了C库的函数完成功能,那么能不能用syscall方式</p>\n<p>来搞呢?显然可以!</p>\n<pre class=\"language-bash\"><code>section .data\n	ft db \"now is X\",10\n \nsection .text\nglobal _start\n \n_start:\n	mov edi,10\nagain:\n	dec edi\n	mov eax,edi\n	add eax,0x30\n	mov byte [ft+7],al\n \n	mov eax,4\n	mov ebx,1\n	mov ecx,ft\n	mov edx,9\n	int 0x80\n \n	mov eax,162\n	push 0\n	push 1\n	mov ebx,esp\n	mov ecx,0\n	int 0x80\n	\n	cmp edi,0\n	jnz again\n	\n	mov eax,4\n	mov ebx,1\n	mov ecx,msg\n	mov edx,15\n	int 0x80\n	\n	mov eax,1\n	mov ebx,0\n	int 0x80\n	\nmsg:\n db \"happy xxx day!\",10</code></pre>\n<p>--</p>\n<pre class=\"language-bash\"><code>nasm -f elf main.asm\nld -m elf_i386 -o main main.o</code></pre>\n<p>在代码中延时使用的是nanosleep,其他和第一篇一致,只不过做了一个bin-&gt;ascii的小转换</p>\n<p>&nbsp;</p>\n<hr />\n<p>via：&nbsp;<a class=\"ext\" href=\"http://blog.csdn.net/mydo/article/details/8224352\" target=\"_blank\" rel=\"external nofollow noopener\">http://blog.csdn.net/mydo/article/details/8224352</a>&nbsp;<a class=\"ext\" href=\"http://blog.csdn.net/mydo/article/details/8452386\" target=\"_blank\" rel=\"external nofollow noopener\">http://blog.csdn.net/mydo/article/details/8452386</a>&nbsp;<a class=\"ext\" href=\"http://blog.csdn.net/mydo/article/details/8452417\" target=\"_blank\" rel=\"external nofollow noopener\">http://blog.csdn.net/mydo/article/details/8452417</a></p>','2014-06-24 21:12:11','2019-07-27 13:17:36','2019-09-18 22:22:16',NULL),(20,1,1,0,23,'C编程vim初步配置','Preliminary Configuration of C Programming VIM','preliminary-configuration-of-c-programming-vim','https://linux.cn/article-3330-1.html','vundle(用于插件管理)\ntaglist(显示代码结构)\nNERD_Tree(树形目录)\nYouCompleteMe(智能补全)\nSyntastic( 语法检查)','https://net.lnmpa.top/thumbnail/2019/08/2b6738a1f994a8d4e71bd74f67d368e5.png-pic540','<h3>我的 .vimrc文件</h3>\n<pre class=\"language-vim\"><code>\"********************************************************\n\"                   一般性配置                          *\n\"********************************************************\n \n\"关闭vim一致性原则\nset nocompatible\n \n\"显示行号\nset number\n \n\"设置在编辑过程中右下角显示光标的行列信息\nset ruler\n \n\"在状态栏显示正在输入的命令\nset showcmd\n \n\"设置历史记录条数\nset history=1000\n \n\"设置取消备份 禁止临时文件的生成\nset nobackup\nset noswapfile\n \n\"设置匹配模式\nset showmatch\n \n\"设置C/C++方式自动对齐\nset autoindent\nset cindent\n \n\"开启语法高亮功能\nsyntax enable\nsyntax on\n \n\"指定配色方案为256色\nset t_Co=256\n \n\"设置搜索时忽略大小写\nset ignorecase\n \n\"配置backspace的工作方式\nset backspace=indent,eol,start\n \n\"设置在vim中可以使用鼠标\nset mouse=a\n \n\"设置tab宽度\nset tabstop=4\n \n\"设置自动对齐空格数\nset shiftwidth=4\n \n\"设置退格键时可以删除4个空格\nset smarttab\nset softtabstop=4\n \n\"将tab键自动转换为空格\nset expandtab\n \n\"设置编码方式\nset encoding=utf-8\n \n\"自动判断编码时 依次尝试以下编码\nset fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1\n \n\"检测文件类型\nfiletype on\n \n\"针对不同的文件采取不同的缩进方式\nfiletype indent on\n \n\"允许插件\nfiletype plugin on\n \n\"启动智能补全\nfiletype plugin indent on\n \n \n\"*********************************************************\n\"                  vundle 配置                           *\n\"*********************************************************\n \nset rtp+=~/.vim/bundle/vundle/\ncall vundle#rc()\n \n\" let Vundle manage Vundle\nBundle \'gmarik/vundle\'\n  \n\" My Bundles here:\n \nBundle \'tpope/vim-fugitive\'\nBundle \'Lokaltog/vim-easymotion\'\nBundle \'rstacruz/sparkup\', {\'rtp\': \'vim/\'}\nBundle \'tpope/vim-rails.git\'\nBundle \'taglist.vim\'\nBundle \'The-NERD-tree\'\nBundle \'Syntastic\'\nBundle \'L9\'\nBundle \'FuzzyFinder\'\nBundle \'Lokaltog/vim-powerline\'\nBundle \'Valloric/YouCompleteMe\' \n   \n \n\"*****************************************************\n\"                   taglist配置                      *\n\"*****************************************************\n \n\"不显示\"press F1 to display help\"\nlet Tlist_Compact_Format=1\n \n\"窗口在左侧显示\nlet Tlist_Use_Right_Window=1\n \n\"只显示当前文件的tags\nlet Tlist_Show_One_File=1  \n \n\"高亮显示\nlet Tlist_Auto_Highlight_tag=1\n \n\"随文件自动更新\nlet Tlist_Auto_Update=1\n \n\"设置宽度\nlet Tlist_WinWidth=30       \n \n\"taglist窗口是最后一个窗口，则退出vim\nlet Tlist_Exit_OnlyWindow=1 \n \n\"单击跳转\nlet Tlist_Use_SingClick=1\n \n\"打开关闭快捷键\nnnoremap &lt;silent&gt; &lt;F8&gt; :TlistToggle&lt;CR&gt;\n \n \n \n \n\"********************************************************\n\"                      NERD_Tree 配置                   *\n\"********************************************************\n \n\"显示增强\nlet NERDChristmasTree=1\n \n\"自动调整焦点\nlet NERDTreeAutoCenter=1\n \n\"鼠标模式:目录单击,文件双击\nlet NERDTreeMouseMode=2\n \n\"打开文件后自动关闭\nlet NERDTreeQuitOnOpen=1\n \n\"显示文件\nlet NERDTreeShowFiles=1\n \n\"显示隐藏文件\nlet NERDTreeShowHidden=1\n \n\"高亮显示当前文件或目录\nlet NERDTreeHightCursorline=1\n \n\"显示行号\nlet NERDTreeShowLineNumbers=1\n \n\"窗口位置\nlet NERDTreeWinPos=\'left\'\n \n\"窗口宽度\nlet NERDTreeWinSize=31\n \n\"不显示\'Bookmarks\' label \'Press ? for help\'\nlet NERDTreeMinimalUI=1\n \n\"快捷键\nnnoremap &lt;silent&gt; &lt;F4&gt; :NERDTreeToggle&lt;CR&gt;\n \n \n \n\"*****************************************************\n\"           YouCompleteMe配置                        *\n\"*****************************************************\n \n\"leader映射为逗号&ldquo;，&rdquo;\nlet mapleader = \",\"  \n \n\"配置默认的ycm_extra_conf.py\nlet g:ycm_global_ycm_extra_conf = \'~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py\' \n \n\"按,jd 会跳转到定义\nnnoremap &lt;leader&gt;jd :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt;   \n \n\"打开vim时不再询问是否加载ycm_extra_conf.py配置\nlet g:ycm_confirm_extra_conf=0   \n \n\"使用ctags生成的tags文件\nlet g:ycm_collect_identifiers_from_tag_files = 1 \n \n \n\"*****************************************************\n\"           Syntastic配置                            *\n\"*****************************************************\n \n \nlet g:Syntastic_check_on_open=1</code></pre>\n<p>&nbsp;</p>\n<h3>效果图</h3>\n<p><img src=\"https://net.lnmpa.top/thumbnail/2019/08/2b6738a1f994a8d4e71bd74f67d368e5.png-pic540\" alt=\"\" width=\"540\" height=\"394\" /></p>\n<p><img src=\"https://net.lnmpa.top/editor/2019/08/1c527a9c17d89cf055bd55c247385465.png-pic540\" alt=\"\" width=\"540\" height=\"401\" /></p>\n<p>&nbsp;</p>\n<h3>用到的主要插件</h3>\n<ul>\n<li>vundle(用于插件管理)</li>\n<li>taglist(显示代码结构)</li>\n<li>NERD_Tree(树形目录)</li>\n<li>YouCompleteMe(智能补全)</li>\n<li>Syntastic( 语法检查)</li>\n</ul>\n<p>学习时间不长，如有问题请指出！感谢！</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<hr />\n<p class=\"copyright\"><span class=\"z\">原创：<a href=\"https://linux.cn/\" target=\"_blank\" rel=\"noopener\">Linux中国</a>&nbsp;<a href=\"https://linux.cn/article-3330-1.html\" target=\"_blank\" rel=\"noopener\">https://linux.cn/article-3330-1.html</a></span><span class=\"y\">作者： 零度王爵</span><br class=\"clear\" /><br />本文由本站网友原创，<a href=\"https://linux.cn/article-3330-1.html\">Linux中国首发</a>。也想发表您的文章，为开源做一些自己的贡献么？欢迎<a href=\"https://linux.cn/forum.php?mod=post&amp;action=newthread&amp;fid=119\" target=\"_blank\" rel=\"noopener\">投递</a>！&nbsp;<br class=\"clear\" />欢迎遵照&nbsp;<a href=\"http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh\" target=\"_blank\" rel=\"noopener\">CC-BY-NC-SA 协议规定</a>转载，敬请在正文中标注并保留原文/译文链接和作者/译者等信息。&nbsp;<br class=\"clear\" />文章仅代表作者的知识和看法，如有不同观点，请楼下排队<a>吐槽</a>&nbsp;:D&nbsp;</p>\n<div class=\"o cl ptm pbm\">&nbsp;</div>','2014-07-05 21:31:23','2019-08-30 13:35:43','2019-09-18 13:34:48',NULL),(21,1,1,0,25,'Markdown的各种扩展','Various extensions of Markdown','various-extensions-of-markdown','https://linux.cn/article-3367-1.html','Markdown在标准语法（http://daringfireball.net/projects/markdown/syntax ）之外，还支持各种扩展。\n\nMarkdown的php解析与实现，并且增加了许多有用的扩展。PHP Markdown Extra其中几个比较重要的改进有：\n\n支持在html块元素中插入markdown语法\n支持为一些元素添加id或class，比如为header添加id属性，用带锚点的链接导航。例如：','https://net.lnmpa.top/thumbnail/2019/08/8347c7ca66d9b872a3b0622f30784e09.png-water','<p>Markdown在标准语法（<a class=\"ext\" href=\"http://daringfireball.net/projects/markdown/syntax\" target=\"_blank\" rel=\"external nofollow noopener\">http://daringfireball.net/projects/markdown/syntax</a>&nbsp;）之外，还支持各种扩展。</p>\n<p style=\"padding-left: 40px;\"><img style=\"float: left;\" src=\"https://net.lnmpa.top/thumbnail/2019/08/8347c7ca66d9b872a3b0622f30784e09.png-water\" alt=\"\" width=\"128\" height=\"128\" /></p>\n<h3>&nbsp;</h3>\n<h3>&nbsp;</h3>\n<h3>&nbsp;</h3>\n<hr />\n<h3 id=\"blogTitle0\">PHP Markdown Extra</h3>\n<p>Markdown的php解析与实现，并且增加了许多有用的扩展。<a class=\"ext\" href=\"https://michelf.ca/projects/php-markdown/extra/\" target=\"_blank\" rel=\"external nofollow noopener\">PHP Markdown Extra</a>其中几个比较重要的改进有：</p>\n<ul>\n<li>支持在html块元素中插入markdown语法</li>\n<li>支持为一些元素添加id或class，比如为header添加id属性，用带锚点的链接导航。例如：</li>\n</ul>\n<pre class=\"language-markdown\"><code>[Link back to header 1](#header1)\n \nHeader 1            {#header1}\n========\n \n## Header 2 ##      {#header2}</code></pre>\n<p>支持元素包括header、code block、link、image</p>\n<ul>\n<li>支持将代码块用`或者~包起来，这样可以避免一些二义，还可以为代码块添加id或class</li>\n</ul>\n<pre class=\"language-markdown\"><code>~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \n{.html #example-1}\n&lt;p&gt;paragraph &lt;b&gt;emphasis&lt;/b&gt;\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~</code></pre>\n<ul>\n<li>支持手写的表格：</li>\n</ul>\n<pre class=\"language-markdown\"><code>| Function name | Description                    |\n| ------------- | ------------------------------ |\n| `help()`      | Display the help window.       |\n| `destroy()`   | **Destroy your computer!**     |</code></pre>\n<ul>\n<li>支持dl和dt在markdown中的对应语法</li>\n<li>支持脚注引用</li>\n</ul>\n<pre class=\"language-markdown\"><code>That\'s some text with a footnote.[^1]\n \n[^1]: And that\'s the footnote.</code></pre>\n<ul>\n<li>支持专有名词abbr</li>\n<li>避免下划线出现在单词中间，导致斜体输出</li>\n</ul>\n<p>&nbsp;</p>\n<h3 id=\"blogTitle1\">Maruku</h3>\n<p>在&rdquo;始作俑者PHP Markdown Extra&rdquo;后，很多基于Ruby的Markdown解释器开始浮现。其中，<a class=\"ext\" href=\"https://github.com/bhollis/maruku\" target=\"_blank\" rel=\"external nofollow noopener\">Maruku</a>号称：</p>\n<ul>\n<li>支持原生Markdown</li>\n<li>支持所有PHP Markdown Extra的特性</li>\n<li>支持新的元数据语法，实际上就是给元素添加属性的能力</li>\n<li>支持<a class=\"ext\" href=\"https://github.com/bhollis/maruku/blob/master/docs/math.md\" target=\"_blank\" rel=\"external nofollow noopener\">公式格式</a>输出</li>\n</ul>\n<p>Maruku的语法详见<a class=\"ext\" href=\"https://github.com/bhollis/maruku/blob/master/docs/markdown_syntax.md\" target=\"_blank\" rel=\"external nofollow noopener\">这里</a></p>\n<p>不过，该项目已经停止维护了。</p>\n<h3 id=\"blogTitle2\">kramdown</h3>\n<p>同样是ruby开发的解释器，<a class=\"ext\" href=\"http://kramdown.gettalong.org/quickref.html\" target=\"_blank\" rel=\"external nofollow noopener\">kramdown</a>吸取了Maruku几乎所有的特点，功能更为强大。其中有特点的功能有：</p>\n<ol>\n<li>改进了一些二义语法</li>\n<li>引入EOB标记^作为块元素的分隔符</li>\n<li>手写table的语法更加强大一些，支持table中的header和footer</li>\n<li>同样支持ALD(Attribute List Definitions属性列表定义)</li>\n<li>还支持注释，以及在转化时配置一些转化选项</li>\n</ol>\n<p><a class=\"ext\" href=\"https://help.github.com/articles/migrating-your-pages-site-from-maruku\" target=\"_blank\" rel=\"external nofollow noopener\">Github-Page推荐使用这个解释器</a></p>\n<h3 id=\"blogTitle3\">RDiscount</h3>\n<p><a class=\"ext\" href=\"http://dafoster.net/projects/rdiscount/\" target=\"_blank\" rel=\"external nofollow noopener\">RDiscount</a>又是一个基于Ruby开发的解释器，不过它是基于<a class=\"ext\" href=\"http://www.pell.portland.or.us/~orc/Code/discount/\" target=\"_blank\" rel=\"external nofollow noopener\">Discount</a>的语法移植的，所以语法规则需要参考<a class=\"ext\" href=\"http://www.pell.portland.or.us/~orc/Code/discount/#Language.extensions\" target=\"_blank\" rel=\"external nofollow noopener\">Discount</a>。其语法支持几种上面没有提到过的特性：</p>\n<ul>\n<li>文本居中，即输出： &lt;center&gt;</li>\n<li>图片大小定义：&nbsp;![dust mite](http://dust.mite =150x150)</li>\n</ul>\n<ul>\n<li>输出alpha列表： &lt;ol type=\'a\'&gt;&lt;/ol&gt;</li>\n</ul>\n<h3 id=\"blogTitle4\">Redcarpet</h3>\n<p><a class=\"ext\" href=\"https://github.com/vmg/redcarpet\" target=\"_blank\" rel=\"external nofollow noopener\">Redcarpet</a>是一个转化库，可以在标准Markdown的基础上，配置一些额外的功能：</p>\n<ul>\n<li>单词中间的_不处理</li>\n<li>转化PHP-Markdown风格的手写表格</li>\n<li>转化PHP-Markdown风格的带包含的代码块，也可禁用标准markdown的代码块语法</li>\n<li>自动link生成</li>\n<li>删除线支持：~~good~~</li>\n<li>高亮标签&lt;mark&gt;&lt;/mark&gt;通过==highlighted==输出</li>\n<li>引用标签&lt;q&gt;&lt;/q&gt;通过\"quote\"输出</li>\n<li>转化PHP-Markdown风格脚注</li>\n<li>一些二义性的约束支持</li>\n</ul>\n<h3 id=\"blogTitle5\">Github支持</h3>\n<p>Github Page对于上述的基于Ruby的markdown是支持的，从<a class=\"ext\" href=\"https://pages.github.com/versions/\" target=\"_blank\" rel=\"external nofollow noopener\">这里</a>可以看到。另外，Github对于Issue、comments等，还定义了GFM(<a class=\"ext\" href=\"https://help.github.com/articles/github-flavored-markdown\" target=\"_blank\" rel=\"external nofollow noopener\">GitHub Flavored Markdown</a>)，其中的语法一般基本来源于上面的提到的东西。除此之外，github还支持一些额外的特性：</p>\n<ul>\n<li>支持把列表变成带勾选框的任务列表</li>\n</ul>\n<pre class=\"language-markdown\"><code>- [x] @mentions, #refs, [links](), **formatting**, and &lt;del&gt;tags&lt;/del&gt; are supported \n- [x] list syntax is required (any unordered or ordered list supported) \n- [x] this is a complete item \n- [ ] this is an incomplete item</code></pre>\n<ul>\n<li>站内对分支、问题、用户等对象的直接引用</li>\n<li><a class=\"ext\" href=\"http://www.emoji-cheat-sheet.com/\" target=\"_blank\" rel=\"external nofollow noopener\">表情</a>&nbsp;</li>\n</ul>\n<p>&nbsp;</p>\n<p>&nbsp;</p>','2014-07-11 22:00:33','2019-08-30 14:05:16','2019-09-19 17:44:55',NULL),(22,1,1,0,18,'教你用NeoBundle管理Vim插件','Teach you how to manage Vim plug-ins with NeoBundle','teach-you-how-to-manage-vim-plug-ins-with-neobundle','https://linux.cn/article-3433-1.html','我们为什么要使用插件管理器？Vim 支持大量插件，但是由于它没有严格定义框架，插件的文件可以胡乱分布在不同目录下，导致用户管理起来会很困难（LCTT：当然，前提是你有很多插件，还有点小小的强迫症，觉得理一理这些插件心里会舒服点）。而一款插件管理器能让管理变得简单许多。Pathogen, Vundle 和 NeoBundle 的工作就是为不同插件建立一个目录，然后将这些目录扔到 ~/.vim/bundle 目录下。这个文件整理方法可以让你方便彻底地删除插件，使用 \'rm -rf <插件目录>\' 或直接在文件管理器里面把插件所在的目录删除就可以了，绝对绿色环保无残留。同时，这种方法还能最大程度避免插件与插件之间的不兼容性。','https://net.lnmpa.top/thumbnail/2019/09/fc68088d8059e624bc094a710f65aa2b.png-water','<p><a class=\"ext\" href=\"https://github.com/Shougo/neobundle.vim\" target=\"_blank\" rel=\"external nofollow noopener\">NeoBundle</a>&nbsp;是一个&nbsp;<a class=\"ext\" href=\"http://olex.openlogic.com/packages/vim\" target=\"_blank\" rel=\"external nofollow noopener\">Vim</a>&nbsp;的插件管理器，以&nbsp;<a class=\"ext\" href=\"https://github.com/gmarik/Vundle.vim\" target=\"_blank\" rel=\"external nofollow noopener\">Vundle</a>&nbsp;为基础（Vundle 是一个基于&nbsp;<a class=\"ext\" href=\"https://github.com/tpope/vim-pathogen\" target=\"_blank\" rel=\"external nofollow noopener\">Pathogen</a>&nbsp;的 Vim 插件管理器）。在之前的文章中，我<a class=\"ext\" href=\"http://www.openlogic.com/wazi/bid/262302/Three-tools-for-managing-Vim-plugins\" target=\"_blank\" rel=\"external nofollow noopener\">非常不推荐使用 Neobundle</a>，原因是它当时还处于高速开发阶段（LCTT：意味着不稳定、变数大），并且当时它的英文文档很少。现在，已经过了一年多了，这两个问题都早已不再是问题。</p>\n<p>我们为什么要使用插件管理器？Vim 支持大量插件，但是由于它没有严格定义框架，插件的文件可以胡乱分布在不同目录下，导致用户管理起来会很困难（LCTT：当然，前提是你有很多插件，还有点小小的强迫症，觉得理一理这些插件心里会舒服点）。而一款插件管理器能让管理变得简单许多。Pathogen, Vundle 和 NeoBundle 的工作就是为不同插件建立一个目录，然后将这些目录扔到 ~/.vim/bundle 目录下。这个文件整理方法可以让你方便彻底地删除插件，使用 \'rm -rf &lt;插件目录&gt;\' 或直接在文件管理器里面把插件所在的目录删除就可以了，绝对绿色环保无残留。同时，这种方法还能最大程度避免插件与插件之间的不兼容性。</p>\n<p class=\"article_img\"><img src=\"https://net.lnmpa.top/thumbnail/2019/09/fc68088d8059e624bc094a710f65aa2b.png-water\" alt=\"\" width=\"512\" height=\"512\" /></p>\n<p>NeoBundle 是一个基于 Vundle 的项目，如同 Vundle，它们都可以安装和升级插件。然而 NeoBundle 的说明文件上明确指出：&ldquo;NeoBundle 不是一个稳定的插件管理器，如果你想要一个稳定的，请选择 Vundle&rdquo;。最新的 release-note 上也有警告&ldquo;可能会造成兼容性问题&rdquo;&mdash;&mdash;这是一个开发者写的注解，说明这个管理器还不能让人放心使用。</p>\n<p>所以，我们为什么要使用 NeoBundle？它都不能保证稳定运行！好吧，它还是有可取之处的。Vundle 只支持&nbsp;<a class=\"ext\" href=\"http://olex.openlogic.com/packages/git\" target=\"_blank\" rel=\"external nofollow noopener\">Git</a>&nbsp;这种版本控制系统，而 NeoBundle 可以支持&nbsp;<a class=\"ext\" href=\"http://olex.openlogic.com/packages/subversion\" target=\"_blank\" rel=\"external nofollow noopener\">Subversion</a>&nbsp;和&nbsp;<a class=\"ext\" href=\"http://olex.openlogic.com/packages/mercurial\" target=\"_blank\" rel=\"external nofollow noopener\">Mercurial</a>。另一个原因是如果你不想插件升级时破坏你的 Vim 生态环境，你可以锁住 NeoBundle，让它只使用某个插件的固定版本。</p>\n<p>另外，NeoBundle 创建者，Shougo Matsuishita（LCTT：名字看着像日本人），正在将它的命令接口添加到其他插件项目，以便减少他们的命令使用量。现在 NeoBundle 支持3种插件：<a class=\"ext\" href=\"https://github.com/Shougo/unite.vim\" target=\"_blank\" rel=\"external nofollow noopener\">unite.vim</a>，Vim 使用的文件和缓存管理器；<a class=\"ext\" href=\"https://github.com/Shougo/vimshell.vim/blob/master/doc/vimshell.txt\" target=\"_blank\" rel=\"external nofollow noopener\">vimshell.vim</a>，Vim 使用的脚本程序；<a class=\"ext\" href=\"https://github.com/Shougo/vimproc.vim/blob/master/doc/vimproc.txt\" target=\"_blank\" rel=\"external nofollow noopener\">vimproc.vim</a>，运行于 vimshell.vim 中，用于对异步事件的支持。上面说的都是特殊案例，缺少英文文档，所以用户希望有人能完善它们。在正式使用它们之前，我们需要把注意力先集中在一些基本操作上。</p>\n<h3 id=\"toc_1\">安装并初始化 NeoBundle</h3>\n<p>NeoBundle 支持 Vim 7.2.051 或更高版本，需要 git 和&nbsp;<a class=\"ext\" href=\"http://olex.openlogic.com/packages/curl\" target=\"_blank\" rel=\"external nofollow noopener\">cURL</a>（用于下载文件）。你可以手动下载 NeoBundle，也可以使用 cURL 下载它在 GitHub 上的库。在你的 home 目录下使用如下命令，可以将 NeoBundle 插件下载到 .vim/bundle/neobundle.vim 目录里，然后 NeoBundle 就能管理它自己了。</p>\n<pre class=\"language-bash\"><code>curl https://raw.githubusercontent.com/Shougo/neobundle.vim/master/bin/install.sh | sh</code></pre>\n<p>你还需要修改 .vimrc 文件。NeoBundle 的 GitHub 主页提供一个 .vimrc 范本，但是直接使用这个范本，NeoBundle 需要你安装5个可能不需要插件。如果不需要它们，你可以使用下面的最小配置：</p>\n<pre class=\"language-bash\"><code>if has(\'vim_starting\')\nset nocompatible\nset runtimepath+=~/.vim/bundle/neobundle.vim/\ncall neobundle#begin(expand(\'~/.vim/bundle/\'))\nNeoBundleFetch \'Shougo/neobundle.vim\'call neobundle#end()\nfiletype plugin indent on</code></pre>\n<p>上述配置的作用是：启动 NeoBundle 并且像其他插件一样升级自己。NeoBundle 默认从 GitHub 下载并升级，如果你正好在使用 GitHub，你只需要为这个插件指定维护者的用户名和路径。在上面的配置中，NeoBundleFetch 只需要指定为&ldquo;Shougo/neobundle.vim&rdquo;，而不是完整的 GitHub 路径。如果你想使用其他网站，比如是 Subversion 或 Mecurial 的网站，你就需要添加完整的 URL。</p>\n<p>如果你想安装其他插件，你可以使用下面的命令：</p>\n<pre class=\"language-bash\"><code>curl -k https://github.com/[项目维护者]/[插件路径] &gt; ~/.vim/bundle/[插件路径]</code></pre>\n<p>举个例子：你想安装&nbsp;<a class=\"ext\" href=\"https://github.com/tpope/vim-abolish\" target=\"_blank\" rel=\"external nofollow noopener\">vim-abolish</a>，一个超级 NB 的文本搜索和替换插件，就使用下面的命令：</p>\n<pre class=\"language-bash\"><code>curl -k https://github.com/tpope/vim-abolish &gt; ~/.vim/bundle/abolish</code></pre>\n<p>如果要让它自动升级，在 NeoBundleFetch 那行下面添加一行：</p>\n<pre class=\"language-markup\"><code>NeoBundle \'tpope/vim-abolish\'</code></pre>\n<p>再介绍一个小技巧：你可以为插件指定一个分支或版本号。什么意思？NeoBundle 只会使用这个插件的某个分支或版本，而忽略其版本更新。如果你使用的某个插件处于高速开发过程，你就可以使用这个技巧，避免用到有 bug 的插件版本。举个例子：</p>\n<pre class=\"language-markup\"><code>NeoBundle \'Shougo/vimshell\', { \'rev\' : \'3787e5\' }</code></pre>\n<p>还有一个技巧：在 .vimtc 文件内添加一行关于&ldquo;NeoBundleCheck&rdquo;的属性。NeoBundle 会根据配置检查没安装的插件，并提示你安装它们。你也可以使用命令&ldquo;:NeoBundleInstall&rdquo;（LCTT：这是要在 Vim 编辑器的命令模式下输入）来安装或升级插件。</p>\n<h3 id=\"toc_2\">NeoBundle 用法</h3>\n<p>很多 NeoBundle 命令用起来和 Vundle 类似，但命令的名字不一样。下面是 NeoBundle 命令的用法：</p>\n<ul>\n<li>:NeoBundleUpdate：安装或升级插件，如果你手动把一个插件的目录删除了，这个命令会重新安装这个插件。在这个命令后面加上插件名称，就只升级一个插件；不加参数，会将所有己安装但没被记录在案的插件给记录下来。:NeoBundleInstall 命令效果相同。</li>\n<li>:NeoBundle {REPOSITORY URI} [[REVISION}] [,OPTIONS}]]：将一个插件锁定到固定版本，防止胡乱升级。</li>\n<li>:NeoBundleList：列出所有未初始化的插件。</li>\n<li>:NeoBundleClean：进入交互界面，删除插件。</li>\n</ul>\n<p>这些命令在配合 unite.vim （LCTT：就是上面举过的32个例子之一）使用时，效果会稍微有些出入。你可以使用&ldquo;:help neobundle&rdquo;命令了解更多信息。</p>\n<h3 id=\"toc_3\">是否使用 NeoBundle，自己决定</h3>\n<p>NeoBundle 是强大的工具，正处于高速开发状态。任何处于这种状态的项目，都会被帖上&ldquo;有前途&rdquo;和&ldquo;不稳定&rdquo;两个标签，看你自己怎么选。如果你想要最新的稳定版本的插件，NeoBundle 能够把 Vundle 和 Pathogen 甩出几条街。</p>\n<p>然而在线帮助文档已经给出警告，它不是个稳定的产品，不及时更新版本可能造成一些插件运行出错。最后，你需要在 .vimrc 文件为你的 Neoundle 和其他插件指定一个稳定的版本。记住这警告，然后你可以在使用这些尖端技术产品时游刃有余。</p>\n<p>&nbsp;</p>\n<hr />\n<p>via:&nbsp;<a class=\"ext\" href=\"http://www.openlogic.com/wazi/bid/348084/Managing-Vim-extensions-with-NeoBundle\" target=\"_blank\" rel=\"external nofollow noopener\">http://www.openlogic.com/wazi/bid/348084/Managing-Vim-extensions-with-NeoBundle</a></p>\n<p>译者：<a class=\"ext\" href=\"https://github.com/bazz2\" target=\"_blank\" rel=\"external nofollow noopener\">bazz2</a>&nbsp;校对：<a class=\"ext\" href=\"https://github.com/wxy\" target=\"_blank\" rel=\"external nofollow noopener\">wxy</a></p>\n<p>本文由&nbsp;<a class=\"ext\" href=\"https://github.com/LCTT/TranslateProject\" target=\"_blank\" rel=\"external nofollow noopener\">LCTT</a>&nbsp;原创翻译，<a href=\"https://linux.cn/article-3433-1.html\">Linux中国</a>&nbsp;荣誉推出</p>','2014-07-19 20:09:30','2019-09-17 12:14:35','2019-09-18 05:17:38',NULL),(23,1,1,0,18,'已经会用Git了？不会这十招怎么行','Can you already use Git? Not how to do these ten tricks','can-you-already-use-git-not-how-to-do-these-ten-tricks','https://linux.cn/article-3463-1.html','之前我们发了一些教程让你熟悉Git基础和在团队合作环境中使用Git.我们讨论的这些Git命令足够让一个开发者在Git的世界里生存下去。在这篇教程里，我们试着探索如何高效地管理你的时间以及如何充分利用Git提供的特性。\n\n注意：这里介绍的命令中有的包含方括号(例如：git add -p [file_name])。在这些例子中，你应该用你自己的数字、标识符等替代方括号里的内容，并且去掉方括号。','https://net.lnmpa.top/thumbnail/2019/09/244247a1764ab477c474cb86f8623930.png/2019/09/4da133e6ff302546a9540a3246103de6.png/2019/09/f2f1b2852ce28763d63f5252eba607ab.png-water','<p>之前我们发了一些教程让你熟悉<a class=\"ext\" href=\"http://www.sitepoint.com/git-for-beginners/\" target=\"_blank\" rel=\"external nofollow noopener\">Git基础</a>和<a class=\"ext\" href=\"http://www.sitepoint.com/getting-started-git-team-environment/\" target=\"_blank\" rel=\"external nofollow noopener\">在团队合作环境中使用Git</a>.我们讨论的这些Git命令足够让一个开发者在Git的世界里生存下去。在这篇教程里，我们试着探索如何高效地管理你的时间以及如何充分利用Git提供的特性。</p>\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/09/244247a1764ab477c474cb86f8623930.png/2019/09/4da133e6ff302546a9540a3246103de6.png/2019/09/f2f1b2852ce28763d63f5252eba607ab.png-water\" alt=\"\" width=\"670\" height=\"457\" /></p>\n<blockquote>\n<p>注意：这里介绍的命令中有的包含方括号(例如：git add -p [file_name])。在这些例子中，你应该用你自己的数字、标识符等替代方括号里的内容，并且去掉方括号。</p>\n</blockquote>\n<h3 id=\"toc_1\">1. Git自动补全</h3>\n<p>如果你在命令行环境中运行Git命令，每次都手动地逐个输入命令是一件很无聊的事。为此，你可以花几分钟时间配置一下Git命令的自动补全功能。</p>\n<p>在*nix系统运行下列命令下载自动补全脚本：</p>\n<pre class=\"language-bash\"><code>cd ~\ncurl https://raw.github.com/git/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash</code></pre>\n<p>然后，添加下面的行到你的~/.bash_profile文件：</p>\n<pre class=\"language-bash\"><code>if [ -f ~/.git-completion.bash ]; then    \n. ~/.git-completion.bash\nfi</code></pre>\n<p>尽管我之前已经提到过，但我还是想再强调一下：如果你想使用完整的Git特性，你绝bi应该切换到命令行环境。</p>\n<h3 id=\"toc_2\">2. 在Git中忽略文件</h3>\n<p>你是不是对出现在你Git库里面的编译生成文件（比如.pyc)感到很无语？或者你是不是很厌恶不小心将他们添加到了Git？直接看这里，这里有一个方法可以让你告诉Git忽略所有这些文件和目录。只需要创建一个名字为.gitignore的文件，里面列出你不想要Git跟踪的文件和目录。可以用感叹号(!)列出例外情况。</p>\n<pre class=\"language-markup\"><code>*.pyc\n*.exe\nmy_db_config/\n \n!main.pyc</code></pre>\n<h3 id=\"toc_3\">3. 谁动了我的代码？</h3>\n<p>当事情出了乱子时立马责怪别人这是人类的天性。如果你的服务器程序不能正常工作了，要找出罪魁祸首是非常简单的--只需要执行git blame。这个命令告诉你文件里的每一行的作者是谁，最后改动那一行的提交，以及提交的时间戳。</p>\n<pre class=\"language-bash\"><code>git blame [file_name]</code></pre>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/6774a49e18a7eded8f90b4411a6bddba.png-water\" alt=\"\" width=\"833\" height=\"179\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>git blame demonstration</em></p>\n<p>在下面的截图里，你可以看到在一个更大的库里这个命令的输出是什么样的：</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/b73905d76d525e454da43ead90282011.png-water\" alt=\"\" width=\"800\" height=\"314\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>git blame on the ATutor repository</em></p>\n<h3 id=\"toc_4\">4. 查看库的历史</h3>\n<p>在之前的教程里，我们已经看过了如何使用git log命令。不管怎样，有3个选项你应该知道。</p>\n<ul>\n<li><strong>--oneline</strong>&nbsp;- 压缩每次的提交信息，只保留一个缩减的Hash值和说明文字，然后把这些都展示在一行里。</li>\n<li><strong>--graph</strong>&nbsp;- 这个选项将在左边画出一个文字界面的提交历史图。如果你只有一个分支，用这个选项查看历史时是没什么意义的。</li>\n<li><strong>--all</strong>&nbsp;- 显示所有分支历史。</li>\n</ul>\n<p>这是这3个选项合起来使用的效果：</p>\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/497011d1d19ac1354446701cd6f64632.png-water\" alt=\"\" width=\"855\" height=\"326\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>Use of git log with all, graph and oneline</em></p>\n<h3 id=\"toc_5\">5. 不要丢失对某个提交的跟踪</h3>\n<p>假设你提交了一些不需要的东西，然后你进行了hard重置回到之前的状态。后来，你发现在这个过程中你丢失了其他一些重要的信息，你想要把这些信息找回来，或者至少可以查看一下这些信息。这就需要git reflog帮忙。</p>\n<p>简单的git log只能告诉你最近的提交，这个提交的父提交，父提交的父提交，等等。但是git reflog是一个HEAD指向的提交的列表。记住，这个列表依赖于你自己的本地操作环境，它不是库的一部分，也不包含在push或者merge中。</p>\n<p>如果执行git log命令，可以看到提交历史，这是我的库的一部分：</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/3acf9482aa2dbf8d9bd34d9393a4043e.png-water\" alt=\"\" width=\"479\" height=\"459\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>Project history</em></p>\n<p>但是，git reflog命令显示了一个被我用hard重置丢掉的提交(b1b0ee9-HEAD@{4}).</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/1888e625c55e7a79c6584ee8673cb7a2.png-water\" alt=\"\" width=\"774\" height=\"223\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>Git reflog</em></p>\n<h3 id=\"toc_6\">6. 暂存文件的一部分更改以便进行一次提交</h3>\n<p>通常依据特性来提交是一个好的实践方法，意思是说，每一个提交都只添加一个特性或者修复一个bug。想一下如果你一次修复了两个bug或者添加了两个特性但是都还没有逐个提交该怎么办。这种场景下，你可以将他们一起提交。但是有一个更好的办法：单独暂存这些文件，然后分开提交。</p>\n<p>让我们假设你对一个文件做了多个更改，然后想让这些更改分开提交。这时，我们用带-p的添加命令。</p>\n<pre class=\"language-bash\"><code>git add -p [file_name]</code></pre>\n<p>我们来试试这种用法。我添加了3个新行到file_name，但是我只想让第1行和第3行出现在我的提交里。让我们看看git diff的输出是什么样的。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/4ddc36a5da6a637851846c11fbb70cd9.png-water\" alt=\"\" width=\"384\" height=\"329\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>Changes in repo</em></p>\n<p>然后，我们看看带-p选项的add命令会发生什么。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/bd842ec9ce78690774b986eba3eeb3a8.png-water\" alt=\"\" width=\"447\" height=\"351\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>Running add with -p</em></p>\n<p>看起来Git认为所有的更改都是同一个目的的一部分，所以把他们分组到同一个块里。这时，你可以：</p>\n<ul>\n<li>输入 y 暂存块</li>\n<li>输入 n 不暂存块</li>\n<li>输入 e 手动编辑块</li>\n<li>输入 d 退出或者跳转到下一个文件</li>\n<li>输入 s 分割块</li>\n</ul>\n<p style=\"text-align: center;\">在我们这个例子中，我们想把这个块分割成更小的部分，然后选择其中一些忽略另外一些。</p>\n<figure class=\"image\" style=\"text-align: center;\"><img src=\"https://net.lnmpa.top/editor/2019/09/93db4d63fd7e514248c07289fe18cb73.png-water\" alt=\"Adding all hunks\" width=\"429\" height=\"436\" />\n<figcaption>Caption</figcaption>\n</figure>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>Adding all hunks</em></p>\n<p>如你所见，我们已经逐个添加了第1和第3行，忽略了第2行。你可以看到库的状态并且进行一次提交。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/6c0165da97168b12f272cda37e9c9cd5.png-water\" alt=\"\" width=\"714\" height=\"286\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>Repository after selectively adding a file</em></p>\n<h3 id=\"toc_7\">7. 合并多个提交</h3>\n<p>为了进行核查或者发起一个合并请求（这经常发生在开源项目里），对代码进行了修改提交。但在最后代码被接受之前，你也许会需要修改你的代码。于是你修改代码，但是下一次核查的时候又一次需要进行修改。不知不觉中，你就已经有了好几个提交。理论上你应该用rebase命令把他们合并起来。</p>\n<pre class=\"language-bash\"><code>git rebase -i HEAD~[number_of_commits]</code></pre>\n<p>如果你想合并最后的两次提交，你应该运行下面的命令。</p>\n<pre class=\"language-bash\"><code>git rebase -i HEAD~2</code></pre>\n<p>一旦你运行这个命令，你将进入一个交互式界面，它将询问你想要合并哪些提交。你pick(拣选)最近的提交然后squash(合并)旧的提交。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/2eab17dd3e9230409a52fa5477d874da.png-water\" alt=\"\" width=\"677\" height=\"434\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>Git squash interactive</em></p>\n<p>接着你应该提供一个对新提交的说明。这个过程会重写你的提交历史。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/33d290077a53b25972d2a83323642fea.png-water\" alt=\"Adding a commit message\" width=\"618\" height=\"452\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>Adding a commit message</em></p>\n<h3 id=\"toc_8\">8. 储藏没有提交的更改</h3>\n<p>假设你正在修复一个bug或者添加一个特性，突然你被要求展示一下你的工作成果。你现在的工作还没有完成，不够进行一次提交。这时，git stash命令可以用来急救一下。Stash命令跟踪你所有的更改，然后把他们储藏起来以便以后使用。命令如下-</p>\n<pre class=\"language-bash\"><code>git stash</code></pre>\n<p>可以多次储藏更改，查看储藏列表，你可以运行下面的命令：</p>\n<pre class=\"language-bash\"><code>git stash list</code></pre>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/d4e195ea986dbd3a3b76e22d965b7b07.png-water\" alt=\"Stash list\" width=\"615\" height=\"46\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>Stash list</em></p>\n<p>如果你想取消储藏，覆盖当前的更改，你可以通过下面的命令使用储藏：</p>\n<pre class=\"language-bash\"><code>git stash apply</code></pre>\n<p>在最后的这个截图里，你可以看到每个储藏都有一个标识符，是一个唯一的数字（尽管在这里我们只有一个储藏）。如果你想使用某个储藏，你在apply命令后面加上这个唯一的标识符：</p>\n<pre class=\"language-bash\"><code>git stash apply stash@{2}</code></pre>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/c3a1ab3cd1a607134773bc5b07bc5c40.png-water\" alt=\"\" width=\"731\" height=\"292\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>After un-stashing changes</em></p>\n<h3 id=\"toc_9\">9. 检查丢失的提交</h3>\n<p>尽管reflog是一种检查丢失提交的方法，大型的库里却不太实用。这个时候，应该用fsck（文件系统检查）命令。</p>\n<pre class=\"language-bash\"><code>git fsck --lost-found</code></pre>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/49e17724fc1d37013e4b706cf3ba8c7d.png-water\" alt=\"\" width=\"528\" height=\"210\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>Git fsck results</em></p>\n<p>这里你可以看到一个丢失的提交。你可以通过git show [commit_hash] 查看提交的更改或者通过运行git merge [commit_hash]命令进行恢复。</p>\n<p>git fsck跟reflog命令相比有一个优点。假设你删除了一个远程分支，然后clone了这个库。用fsck命令你可以找到并且恢复这个删除的远程分支。</p>\n<h3 id=\"toc_10\">10. 最佳选择</h3>\n<p>之前我已经存记下了那些最优雅的Git命令。但是目前为止，cherry-pick命令是我最喜欢的Git命令，因为它直白的名字和实用的功能！</p>\n<p>最简单的情况下，cherry-pick从另一个分支里选出单独的一个提交，然后合并到当前分支。如果你正并行工作在两个或者更多的分支上，你也许会发现一个存在于所有分支上的bug。如果你解决了一个分支上的这个bug，你可以拣选这个对应的提交应用到其他分支上，而不会弄乱其他文件或者提交。</p>\n<p>让我们来考虑一个可以使用这个命令的场景。我有两个分支，我想拣选b20fd14: Cleaned junk这个提交到另一个分支上。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/ee15e6b3100d6ce78c6dd813771e3f86.png-water\" alt=\"Before cherry pick\" width=\"676\" height=\"257\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>Before cherry pick</em></p>\n<p>我切换到想要应用这个拣选出来的提交的分支，然后运行下面的命令：</p>\n<pre class=\"language-bash\"><code>git cherry-pick [commit_hash]</code></pre>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/762bc983d61feafb9881217d996a21b1.png-water\" alt=\"After cherry pick\" width=\"665\" height=\"337\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>After cherry pick</em></p>\n<p>尽管这次我们很干净的用了cherry-pick命令，但你应该知道这个命令经常会引起冲突，所以请小心使用。</p>\n<h3 id=\"toc_11\">总结</h3>\n<p>到了这里，我们结束了这个能使你Git能力提升一个级别的列表。Git是最好的版本控制器，它能完成你能想象到的任何事情。所以，经常试着用Git挑战你自己。一不小心你就会学到很多新东西。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<hr />\n<p>via:&nbsp;<a class=\"ext\" href=\"http://www.sitepoint.com/10-tips-git-next-level/\" target=\"_blank\" rel=\"external nofollow noopener\">http://www.sitepoint.com/10-tips-git-next-level/</a></p>\n<p>译者：<a class=\"ext\" href=\"https://github.com/CNprober\" target=\"_blank\" rel=\"external nofollow noopener\">love_daisy_love</a>&nbsp;校对：<a class=\"ext\" href=\"https://github.com/wxy\" target=\"_blank\" rel=\"external nofollow noopener\">wxy</a></p>\n<p>本文由&nbsp;<a class=\"ext\" href=\"https://github.com/LCTT/TranslateProject\" target=\"_blank\" rel=\"external nofollow noopener\">LCTT</a>&nbsp;原创翻译，<a href=\"https://linux.cn/article-3463-1.html\">Linux中国</a>&nbsp;荣誉推出</p>','2014-07-25 20:15:50','2019-09-17 12:34:37','2019-09-18 22:55:56',NULL),(24,1,1,0,18,'Linux内核Crash分析','Crash Analysis of Linux Kernel','crash-analysis-of-linux-kernel','https://linux.cn/article-3475-1.html','每一个进程的生命周期内，其生命周期的范围为几毫秒到几个月。一般都是和内核有交互，例如用户空间程序使用系统调用进入内核空间。这时使用的不再是用户空间的栈空间，使用对应的内核栈空间。对每一个进程来说，Linux内核都会把两个不同的数据结构紧凑的存放在一个单独为进程分配的存储空间中：一个是内核态的进程堆栈，另一个是紧挨进程描述符的数据结构thread_info,叫线程描述符。内核的堆栈大小一般为8KB，也就是8192个字节，占用两个页。在Linux-2.6.32内核中thread_info.h文件中有对内核堆栈的定义','https://net.lnmpa.top/thumbnail/2019/09/48cc99f3f3b7388cccfc270cea704143.jpg-water','<p>在工作中经常会遇到一些内核crash的情况，本文就是根据内核出现crash后的打印信息，对其进行了分析，使用的内核版本为：Linux2.6.32。</p>\n<p>&nbsp; &nbsp; &nbsp;&nbsp; 每一个进程的生命周期内，其生命周期的范围为几毫秒到几个月。一般都是和内核有交互，例如用户空间程序使用系统调用进入内核空间。这时使用的不再是用户空间的栈空间，使用对应的内核栈空间。对每一个进程来说，Linux内核都会把两个不同的数据结构紧凑的存放在一个单独为进程分配的存储空间中：一个是内核态的进程堆栈，另一个是紧挨进程描述符的数据结构thread_info,叫线程描述符。内核的堆栈大小一般为8KB，也就是8192个字节，占用两个页。在Linux-2.6.32内核中thread_info.h文件中有对内核堆栈的定义：</p>\n<pre class=\"language-bash\"><code>#define THREAD_SIZE               8192</code></pre>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在Linux内核中使用下面的联合结构体表示一个进程的线程描述符和内核栈，在内核中文件include/linux/sched.h。</p>\n<pre class=\"language-bash\"><code>union thread_union {\n  struct thread_info thread_info;\n  unsigned long stack[THREAD_SIZE/sizeof(long)];\n};</code></pre>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 该结构是一个联合体，我们在C语言书上看到过关于union的解释，在在C Programming Language 一书中对于联合体是这么描述的：</p>\n<p>1) 联合体是一个结构；</p>\n<p>2) 它的所有成员相对于基地址的偏移量都为0；</p>\n<p>3) 此结构空间要大到足够容纳最\"宽\"的成员；</p>\n<p>4) 其对齐方式要适合其中所有的成员；</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 通过上面的描述可知，thread_union结构体的大小为8192个字节。也就是stack数组的大小，类型是unsigned long类 型。由于联合体中的成员变量都是占用同一块内存区域，所以，在平时写代码时总有一个概念，对一个联合体的实例只能使用其中一个成员变量，否则会把原先变量 给覆盖掉，这句话如果正确的话，必须要有一个前提假设，成员占用的字节数相同，当成员所占的字节数不同时，只会覆盖相应的字节。对于thread_union联合体，我们是可以同时访问这两个成员，只要能够正确获取到两个成员变量的地址。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在内核中的某一个进程使用了过多的栈空间时，内核栈就会溢出到thread_info部分，这将导致严重的问题（系统重启），例如，递归调用的层次太深；在函数内定义的数据结构太大。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/09/48cc99f3f3b7388cccfc270cea704143.jpg-water\" alt=\"\" width=\"699\" height=\"251\" /></p>\n<p style=\"text-align: center;\">图：进程中thread_info&nbsp;&nbsp;&nbsp; task_struct和内核栈中的关系</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 下面我们看一下thread_info的结构体：</p>\n<pre class=\"language-bash\"><code>struct thread_info {\n  unsigned long           flags;           /* 底层标志，*/\n  int                     preempt_count;   /* 0 =&gt; 可抢占, &lt;0 =&gt; bug */\n  mm_segment_t            addr_limit;      /* 进程地址空间 */\n  struct task_struct      *task;           /*当前进程的task_struct指针 */\n  struct exec_domain      *exec_domain;    /*执行区间 */\n  __u32                   cpu;             /* 当前cpu */\n  __u32                   cpu_domain;      /* cpu domain */\n  struct                  cpu_context_save  cpu_context;    /* cpu context */\n  __u32                   syscall;         /* syscall number */\n  __u8                    used_cp[16];     /* thread used copro */\n  unsigned long           tp_value;\n \n  struct crunch_state     crunchstate;\n \n  union fp_state          fpstate __attribute__((aligned(8)));\n  union vfp_state         vfpstate;\n#ifdef CONFIG_ARM_THUMBEE\n  unsigned long           thumbee_state;       /* ThumbEE Handler Base register */\n#endif\n  struct restart_block     restart_block; /*用于实现信号机制*/\n};</code></pre>\n<p>&nbsp;PS：（1）flag 用于保存各种特定的进程标志，最重要的两个是：TIF_SIGPENDING，如果进程有待处理的信号就置位，TIF_NEED_RESCHED表示进程应该需要调度器选择另一个进程替换本进程执行。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 结合上面的知识，看下当内核打印堆栈信息时，都打印了上面信息。下面的打印信息是工作中遇到的一种情况，打印了内核的堆栈信息，PC指针在dev_get_by_flags中，不能访问的内核虚地址为45685516，内核中一般可访问的地址都是以0xCXXXXXXX开头的地址。</p>\n<pre class=\"language-bash\"><code>Unable to handle kernel paging request at virtual address 45685516\npgd = c65a4000\n[45685516] *pgd=00000000\nInternal error: Oops: 1 [#1]\nlast sysfs file: /sys/devices/form/tpm/cfg_l3/l3_rule_add\nModules linked in: splic mmp(P)\nCPU: 0    Tainted: P            (2.6.32.11 #42)\nPC is at dev_get_by_flags+0xfc/0x140\nLR is at dev_get_by_flags+0xe8/0x140\npc : [&lt;c06bee24&gt;]    lr : [&lt;c06bee10&gt;]    psr: 20000013\nsp : c07e9c28  ip : 00000000  fp : c07e9c64\nr10: c6bcc560  r9 : c646a220  r8 : c66a0000\nr7 : c6a00000  r6 : c0204e56  r5 : 30687461  r4 : 45685516\nr3 : 00000000  r2 : 00000010  r1 : c0204e56  r0 : ffffffff\nFlags: nzCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment kernel\nControl: 0005397f  Table: 065a4000  DAC: 00000017\nProcess swapper (pid: 0, stack limit = 0xc07e8270)\nStack: (0xc07e9c28 to 0xc07ea000)\n9c20:                   c0204e56 c6a00000 45685516 c69ffff0 c69ffff0 c69ffff0\n9c40: c6a00000 30687461 c66a0000 c6a00000 00000007 c64b210c c07e9d24 c07e9c68\n9c60: c071f764 c06bed38 c66a0000 c66a0000 c6a00000 c6a00000 c66a0000 c6a00000\n9c80: c07e9cfc c07e9c90 c03350d4 c0334b2c 00000034 00000006 00000100 c64b2104\n9ca0: 0000c4fb c0243ece c66a0000 c0beed04 c033436c c646a220 c07e9cf4 00000000\n9cc0: c66a0000 00000003 c0bee8e8 c0beed04 c07e9d24 c07e9ce0 c06e4f5c 00004c68\n9ce0: 00000000 faa9fea9 faa9fea9 00000000 00000000 c6bcc560 c0335138 c646a220\n9d00: c66a0000 c64b2104 c085ffbc c66a0000 c0bee8e8 00000000 c07e9d54 c07e9d28\n9d20: c071f9a0 c071ebc0 00000000 c071ebb0 80000000 00000007 c67fb460 c646a220\n9d40: c0bee8c8 00000608 c07e9d94 c07e9d58 c002a100 c071f84c c0029bb8 80000000\n9d60: c07e9d84 c0beee0c c0335138 c66a0000 c646a220 00000000 c4959800 c4959800\n9d80: c67fb460 00000000 c07e9dc4 c07e9d98 c078f0f4 c0029bc8 00000000 c0029bb8\n9da0: 80000000 c07e9dbc c6b8d340 c66a0520 00000000 c646a220 c07e9dec c07e9dc8\n9dc0: c078f450 c078effc 00000000 c67fb460 c6b8d340 00000000 c67fb460 c64b20f2\n9de0: c07e9e24 c07e9df0 c078fb60 c078f130 00000000 c078f120 80000000 c0029a94\n9e00: 00000806 c6b8d340 c0bee818 00000001 00000000 c4959800 c07e9e64 c07e9e28\n9e20: c002a030 c078f804 c64b2070 00000000 c64b2078 ffc45000 c64b20c2 c085c2dc\n9e40: 00000000 c085c2c0 00000000 c0817398 00086c2e c085c2c4 c07e9e9c c07e9e68\n9e60: c06c2684 c0029bc8 00000001 00000040 00000000 c085c2dc c085c2c0 00000001\n9e80: 0000012c 00000040 c085c2d0 c0bee818 c07e9ed4 c07e9ea0 c00284e0 c06c2608\n9ea0: bf00da5c 00086c30 00000000 00000001 c097e7d4 c07e8000 00000100 c08162d8\n9ec0: 00000002 c097e7a0 c07e9f14 c07e9ed8 c00283d0 c0028478 56251311 00023c88\n9ee0: c07e9f0c 00000003 c08187ac 00000018 00000000 01000000 c07ebc70 00023cbc\n9f00: 56251311 00023c88 c07e9f24 c07e9f18 c03391e8 c0028348 c07e9f3c c07e9f28\n9f20: c0028070 c03391b0 ffffffff 0000001f c07e9f94 c07e9f40 c002d4d0 c0028010\n9f40: 00000000 00000001 c07e9f88 60000013 c07e8000 c07ebc78 c0868784 c07ebc70\n9f60: 00023cbc 56251311 00023c88 c07e9f94 c07e9f98 c07e9f88 c025c3e4 c025c3f4\n9f80: 60000013 ffffffff c07e9fb4 c07e9f98 c025c578 c025c3cc 00000000 c0981204\n9fa0: c0025ca0 c0d01140 c07e9fc4 c07e9fb8 c0032094 c025c528 c07e9ff4 c07e9fc8\n9fc0: c0008918 c0032048 c0008388 00000000 00000000 c0025ca0 00000000 00053975\n9fe0: c0868834 c00260a4 00000000 c07e9ff8 00008034 c0008708 00000000 00000000\nBacktrace:\n[&lt;c06bed28&gt;] (dev_get_by_flags+0x0/0x140) from [&lt;c071f764&gt;] (arp_process+0xbb4/0xc74)\n r7:c64b210c r6:00000007 r5:c6a00000 r4:c66a0000</code></pre>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （1）首先，看看这段堆栈信息是在内核中那个文件中打印出来的，在fault.c文件中，__do_kernel_fault函数，在上面的打印中Unable to handle kernel paging request at virtual address 45685516，该地址是内核空间不可访问的地址。</p>\n<pre class=\"language-bash\"><code>static void __do_kernel_fault(struct mm_struct *mm, unsigned long addr, unsigned int fsr, struct pt_regs *regs)\n{\n  /*\n  * Are we prepared to handle this kernel fault?\n  */\n  if (fixup_exception(regs))\n    return;\n  /*\n  * No handler, we\'ll have to terminate things with extreme prejudice.\n  */\n  bust_spinlocks(1);\n  printk(KERN_ALERT\n    \"Unable to handle kernel %s at virtual address %08lx\\n\",\n    (addr &lt; PAGE_SIZE) ? \"NULL pointer dereference\" :\"paging request\", addr);\n  show_pte(mm, addr);\n  die(\"Oops\", regs, fsr);\n  bust_spinlocks(0);\n  do_exit(SIGKILL);\n}</code></pre>\n<p>&nbsp;（2） 对于下面的两个信息，在函数show_pte中进行了打印，下面的打印涉及到了页全局目录，页表的知识，暂时先不分析，后续补上。</p>\n<pre class=\"language-bash\"><code>pgd = c65a4000\n[45685516] *pgd=00000000\n \nvoid show_pte(struct mm_struct *mm, unsigned long addr)\n{\n  pgd_t *pgd;\n  if (!mm)\n    mm = &amp;init_mm;\n \n  printk(KERN_ALERT \"pgd = %p\\n\", mm-&gt;pgd);\n  pgd = pgd_offset(mm, addr);\n  printk(KERN_ALERT \"[%08lx] *pgd=%08lx\", addr, pgd_val(*pgd));\n&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;\n}</code></pre>\n<p>&nbsp;(3) die函数中调用在die函数中取得thread_info结构体的地址。</p>\n<pre class=\"language-bash\"><code>struct thread_info *thread = current_thread_info();\n \nstatic inline struct thread_info *current_thread_info(void){\n  register unsigned long sp asm (\"sp\");\n  return (struct thread_info *)(sp &amp; ~(THREAD_SIZE - 1));\n}</code></pre>\n<p>&nbsp;Sp: 0xc07e9c28&nbsp;&nbsp;&nbsp; 通过current_thread_info得到 thread_info的地址</p>\n<p>(0xc07e9c28 &amp; 0xffffe000) = 0xC07E8000（thread_info的地址，也就是栈底的地址）</p>\n<p>(4)下面的打印信息在__die函数中打印</p>\n<pre class=\"language-bash\"><code>Internal error: Oops: 1 [#1]\nlast sysfs file: /sys/devices/form/tpm/cfg_l2/l2_rule_add\nModules linked in: splic mmp(P)\nCPU: 0    Tainted: P            (2.6.32.11 #42)\nPC is at dev_get_by_flags+0xfc/0x140\nLR is at dev_get_by_flags+0xe8/0x140\npc : [&lt;c06bee24&gt;]    lr : [&lt;c06bee10&gt;]    psr: 20000013\nsp : c07e9c28  ip : 00000000  fp : c07e9c64\nr10: c6bcc560  r9 : c646a220  r8 : c66a0000\nr7 : c6a00000  r6 : c0204e56  r5 : 30687461  r4 : 30687461\nr3 : 00000000  r2 : 00000010  r1 : c0204e56  r0 : ffffffff\nFlags: nzCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment kernel\nControl: 0005397f  Table: 065a4000  DAC: 00000017\nProcess swapper (pid: 0, stack limit = 0xc07e8270)\nStack: (0xc07e9c28 to 0xc07ea000)</code></pre>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 函数的调用关系：die(\"Oops\", regs, fsr);---&agrave;&nbsp;&nbsp;&nbsp; __die(str, err, thread, regs);</p>\n<p>下面是__die函数的定义：</p>\n<pre class=\"language-bash\"><code>static void __die(const char *str, int err, struct thread_info *thread, struct pt_regs *regs){\n  struct task_struct *tsk = thread-&gt;task;\n  static int die_counter;\n  /*Internal error: Oops: 1 [#1]*/\n  printk(KERN_EMERG \"Internal error: %s: %x [#%d]\" S_PREEMPT S_SMP \"\\n\",\n    str, err, ++die_counter);\n  /*last sysfs file: /sys/devices/form/tpm/cfg_l2/l2_rule_add*/\n  sysfs_printk_last_file();\n  /*内核中加载的模块信息Modules linked in: splic mmp(P) */\n  print_modules();\n  /*打印寄存器信息*/\n  __show_regs(regs);\n  /*Process swapper (pid: 0, stack limit = 0xc07e8270) tsk-&gt;comm  task_struct结构体中的comm表示的是除去路径后的可执行文件名称，这里的swapper为idle进程，进程号为0，创建内核进程init；其中stack limit = 0xc07e8270  指向thread_info的结束地址。*/\n  printk(KERN_EMERG \"Process %.*s (pid: %d, stack limit = 0x%p)\\n\",\n    TASK_COMM_LEN, tsk-&gt;comm, task_pid_nr(tsk), thread + 1);\n  /* dump_mem 函数打印从栈顶到当前sp之间的内容*/\n  if (!user_mode(regs) || in_interrupt()) {\n    dump_mem(KERN_EMERG, \"Stack: \", regs-&gt;ARM_sp, THREAD_SIZE + (unsigned long)task_stack_page(tsk));\n    dump_backtrace(regs, tsk);\n    dump_instr(KERN_EMERG, regs);\n  }\n}</code></pre>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在上面的函数中，主要使用了thread_info,task_struct,sp之间的指向关系。task_struct结构体的成员stack是栈底，也是对应thread_info结构体的地址。堆栈数据是从栈底+8K的地方开始向下存的。SP指向的是当前的栈顶。(unsigned long)task_stack_page(tsk)，</p>\n<p>#define task_stack_page(task)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((task)-&gt;stack) ，该宏根据task_struct得到栈底，也就是thread_info地址。</p>\n<p>#define task_thread_info(task)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((struct thread_info *)(task)-&gt;stack)，该宏根据task_struct得到thread_info指针。</p>\n<p>（5）dump_backtrace函数</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 该函数用于打印函数的调用关系。Fp为帧指针，用于追溯程序的方式，方向跟踪调用函数。该函数主要是fp进行检查，看看能否进行backtrace，如果可以就调用汇编的c_backtrace，在arch/arm/lib/backtrace.S函数中。</p>\n<pre class=\"language-bash\"><code>static void dump_backtrace(struct pt_regs *regs, struct task_struct *tsk)\n{\n  unsigned int fp, mode;\n  int ok = 1;\n \n  printk(\"Backtrace: \");\n  if (!tsk)\n    tsk = current;\n \n  if (regs) {\n    fp = regs-&gt;ARM_fp;\n    mode = processor_mode(regs);\n  } else if (tsk != current) {\n    fp = thread_saved_fp(tsk);\n    mode = 0x10;\n  } else {\n    asm(\"mov %0, fp\" : \"=r\" (fp) : : \"cc\");\n    mode = 0x10;\n  }\n \n  if (!fp) {\n    printk(\"no frame pointer\");\n    ok = 0;\n  } else if (verify_stack(fp)) {\n    printk(\"invalid frame pointer 0x%08x\", fp);\n    ok = 0;\n  } else if (fp &lt; (unsigned long)end_of_stack(tsk))\n    printk(\"frame pointer underflow\");\n    printk(\"\\n\");\n    if (ok)\n      c_backtrace(fp, mode);\n}</code></pre>\n<p>&nbsp;（6）dump_instr</p>\n<p>根据PC指针和指令mode, 打印出当前执行的指令码</p>\n<p>Code: 0a000008 e5944000 e2545000 0a000005 (e4153010)</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/49106ed85621c47b7a075cf94eff570c.jpg-water\" alt=\"\" width=\"413\" height=\"605\" /></p>\n<p>内核中函数的调用关系</p>','2014-07-28 10:23:50','2019-09-18 02:31:35','2019-09-18 22:19:15',NULL),(25,1,1,0,17,'最新apache+svn+reviewboard实现在线代码评审','Latest Apache + SVN + review board for online code review','latest-apache-svn-review-board-for-online-code-review','https://linux.cn/article-3502-1.html','注，编译安装的mysql，90%运维会装在/usr/local/mysql 下 如果默认安装在/usr/local/mysql下，等装好ReviewBoard生成站点的时候会选择支持使用的数据库的时候没有识别mysql只有sqlite3，此时，如果你数据库不是sqlite3，继续往下执行自动生成的站点访问将会出现bad reqest 400错误。对于编译安装的mysql，解决办法如下 yum安装的mysql命令将在/usr/local/bin/下，不需要软连。\n\n对于编译安装的mysql，解决办法如下 做相应的软连接','https://net.lnmpa.top/thumbnail/2019/09/9bfbe9f71f0a55066a5257fd79b52e1f.png-water','<p>本文重点说reviewboard的安装</p>\n<p>作用，在线代码评审工具。</p>\n<p>---------------------------------------------------------------------------</p>\n<h3>mysql安装</h3>\n<pre class=\"language-bash\"><code>yum -y install gcc gcc-c++ make cmake autoconf automake ncurses* bison* zlib* expat* \nopenssl* apr* neon* \nyum -y install mysql-server </code></pre>\n<p>&nbsp;可以选择yum安装mysql 或者编译安装mysql</p>\n<p>注，编译安装的mysql，90%运维会装在/usr/local/mysql 下 如果默认安装在/usr/local/mysql下，等装好ReviewBoard生成站点的时候会选择支持使用的数据库的时候没有识别mysql只有sqlite3，此时，如果你数据库不是sqlite3，继续往下执行自动生成的站点访问将会出现bad reqest 400错误。对于编译安装的mysql，解决办法如下 yum安装的mysql命令将在/usr/local/bin/下，不需要软连。</p>\n<p>对于编译安装的mysql，解决办法如下 做相应的软连接</p>\n<pre class=\"language-bash\"><code>ln -s /usr/local/mysql/lib/libmysqlclient.so.18 /usr/lib/libmysqlclient.so.18\nln -s /usr/local/mysql/lib/libmysqlclient.so.18 /usr/lib64/libmysqlclient.so.18\nln -s /usr/local/mysql/bin/* /usr/local/bin/</code></pre>\n<p>&nbsp;mysql安装此处不再介绍 编译也好，yum也好，看需求及使用mysql的级别。</p>\n<p>----------------------------------------------------------------------------</p>\n<h3>Apache和SVN</h3>\n<pre class=\"language-bash\"><code>yum -y install httpd httpd-devel  mod_dav_svn  subversion subversion-devel</code></pre>\n<p>&nbsp;apache 安装好之后可直接启动</p>\n<p>svn 的安装于配置，仓库的创建，用户的管理，权限的配置，网上文档一大堆。</p>\n<p>----------------------------------------------------------------------------</p>\n<h3>安装reviewboard</h3>\n<p>reviewboard是由python开发，</p>\n<p>1，使用python-setuptools安装</p>\n<pre class=\"language-bash\"><code>yum -y install python-setuptools\neasy_install -U setuptools,</code></pre>\n<p>&nbsp;2，安装python组件</p>\n<pre class=\"language-bash\"><code>yum -y install python python-devel</code></pre>\n<p>python版本要2.6以上才可以支持reviewboard</p>\n<p>&nbsp;3、 安装patch</p>\n<pre class=\"language-bash\"><code>yum -y install patch </code></pre>\n<p>&nbsp;4、 安装pysvn</p>\n<pre class=\"language-bash\"><code>wget http://pysvn.barrys-emacs.org/source_kits/pysvn-1.7.6.tar.gz\ntar zxvf pysvn-1.7.6.tar.gz\ncd pysvn-1.7.6/Source\npython setup.py backport 验证与python的兼容\npython setup.py configure</code></pre>\n<p>&nbsp;make pysvn的编译安装需要subversion-devel的支持，没有装devel报此处报错，yum安装之后将解决。</p>\n<pre class=\"language-bash\"><code>mkdir /usr/lib64/python2.6/site-packages/pysvn\ncp pysvn/__init__.py /usr/lib64/python2.6/site-packages/pysvn\ncp pysvn/_pysvn*.so /usr/lib64/python2.6/site-packages/pysvn</code></pre>\n<p>&nbsp;5、 安装mod_wsgi</p>\n<pre class=\"language-bash\"><code>yum -y install mod_wsgi</code></pre>\n<p>&nbsp;mod_wsgi 是支持webpy的一个模块</p>\n<p>6、 安装mencache</p>\n<pre class=\"language-bash\"><code>yum -y install memcachedeasy_install python-memcached</code></pre>\n<p>&nbsp;reviewboard需要memcxched的支持，之前没打开11211端口，访问很慢。</p>\n<p>7、 安装Review Board</p>\n<pre class=\"language-bash\"><code>easy_install ReviewBoard</code></pre>\n<p>&nbsp;# 如果安装过程中 Django 1.6.5一直因为网络问题安装失败的话，可以手动下载安装 伟大的天朝已经屏蔽的google，此处提供一个openerdns 42.120.21.30 添加到/etc/resolv.cof 里。成功的几率大大提高，以为此dns可以代理到google，https://code.google.com/p/openerdns/&nbsp;</p>\n<pre class=\"language-bash\"><code>wget https://pypi.python.org/packages/source/D/Django/Django-1.6.5.tar.gz#md5=e4c5b2d35ecb3807317713afa70a0c77\ncd Django-1.6.5\npython setup.py build\npython setup.py install</code></pre>\n<p>&nbsp;# 或者使用pip在线安装</p>\n<pre class=\"language-bash\"><code>pip --default-timeout=2000 install Django==1.6.5</code></pre>\n<p>&nbsp;8、 安装mysql组件</p>\n<pre class=\"language-bash\"><code>easy_install mysql-python</code></pre>\n<p>&nbsp;创建reviewboard站点</p>\n<p>创建reviewboard存放数据的数据库reviewboard并赋予权限和密码</p>\n<pre class=\"language-bash\"><code>mysql&gt; create database reviewboard default charset utf8 collate utf8_general_ci;\nmysql&gt; grant all on reviewboard.* to \'reviewboard\'@\'localhost\' identified by \'reviewboard\';\nmysql&gt; FLUSH PRIVILEGES; </code></pre>\n<p>&nbsp;创建reviewboard站点</p>\n<pre class=\"language-bash\"><code>rb-site install /reviewboard</code></pre>\n<p>&nbsp;rb-site命令是装reviewboard自动生成的</p>\n<p>之后会有一系列类似安装向导的步骤，需要你做出选择，尽量选择默认值吧</p>\n<pre class=\"language-bash\"><code> Domain = rb.XXX.com 自己随意，本地做个hosts绑定就行\n \n     Root Path = 回车\n \n     Database Type = mysql \n \n     Database Name = reviewboard\n \n     Database server = 回车\n \n     Database username = \'reviewboard\'\n \n     Database password = \'reviewboard\'\n \n     Memcache Server = 回车\n \n      Username [admin]: admin\n \n     E-Mail Address = 邮箱自己填</code></pre>\n<p>&nbsp; ok之后需要修改下列文件的属主属组</p>\n<pre class=\"language-bash\"><code>[root@localhost bin]# chown -R apache /reviewboard/htdocs/media/uploaded\n[root@localhost bin]# chown -R apache /reviewboard/htdocs/media/ext\n[root@localhost bin]# chown -R apache /reviewboard/htdocs/static/ext\n[root@localhost bin]# chown -R apache /reviewboard/data/\ncp /reviewboard/conf/apache-wsgi.conf  到/etc/httpd/conf.d/  </code></pre>\n<p>&nbsp;apache为yum安装，编译安装</p>\n<p>&nbsp;自己定位目录。80端口被占用，我使用了8081 修改了下端口，使用80端口将不用任何修改。</p>\n<p>重启apache，http://http://rb.xxx.com/ 就可以访问。</p>\n<p class=\"article_img\"><img src=\"https://net.lnmpa.top/thumbnail/2019/09/9bfbe9f71f0a55066a5257fd79b52e1f.png-water\" alt=\"\" width=\"1218\" height=\"598\" /></p>\n<p>如果出现400错误，就是在创建reviewboard站点出现错误，站点没有生成好，之前就是没有显示mysql选择了sqlite3，也ok了，访问就是显示400错误，以为是apache-wsgi.conf中</p>\n<pre class=\"language-bash\"><code>WSGIPassAuthorization On\n WSGIScriptAlias \"/\" \"/reviewboard/htdocs/reviewboard.wsgi/\"</code></pre>\n<p>&nbsp;这两行的问题，写了个html，试验了虚拟主机，注释这两行就ok，打开就400， 查了半天的mode_wsgi,还是400，最终又重新检查一遍，支持了mysql，终于解决。</p>\n<p>500错误解决有可能是数据库的问题，重启数据库（慎重）或者drop&nbsp;reviewboard库重新创建，并重新生成reviewboard站点。</p>','2014-07-31 10:33:13','2019-09-18 02:41:41','2019-09-18 02:41:41',NULL),(26,1,1,0,17,'东半球最先进的debug技巧','The most advanced debug technique in the Eastern Hemisphere','the-most-advanced-debug-technique-in-the-eastern-hemisphere','https://linux.cn/article-3558-1.html','不论是什么行业里，能让人最兴奋的事情通常都是解决新奇的、高难度问题带来的刺激。在我的工作中，经常会遇到很多bug，乍一看，它们都是不可能的。不是不可能解决，而是完全不可能出现。就好象最前沿的科技揭示了一个新的奇怪的逻辑现象，以至于人的大脑完全无法理解。\n\n当然，这里我总结的这些bug都是很独特的，如果你想说是否能有某种最先进的系统性的方法能将这些bug归类，统一解决，那是愚蠢的，就好象一个人无法认识到自己在犯错而避免过错一样。不管怎样，下面的这些debug原则对我是十分有效的，而且我相信，对大多数程序员也都是有效的。','https://net.lnmpa.top/thumbnail/2019/09/35a3d1e6ccd69b577be8daad4c669c6c.jpg-water','<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/09/35a3d1e6ccd69b577be8daad4c669c6c.jpg-water\" alt=\"\" width=\"1000\" height=\"750\" /></p>\n<p>不论是什么行业里，能让人最兴奋的事情通常都是解决新奇的、高难度问题带来的刺激。在我的工作中，经常会遇到很多bug，乍一看，它们都是不可能的。不是不可能解决，而是完全不可能出现。就好象最前沿的科技揭示了一个新的奇怪的逻辑现象，以至于人的大脑完全无法理解。</p>\n<p>当然，这里我总结的这些bug都是很独特的，如果你想说是否能有某种最先进的系统性的方法能将这些bug归类，统一解决，那是愚蠢的，就好象一个人无法认识到自己在犯错而避免过错一样。不管怎样，下面的这些debug原则对我是十分有效的，而且我相信，对大多数程序员也都是有效的。</p>\n<ul>\n<li>你改错了文件</li>\n<li>你改对了文件，但却是在别人的机器上</li>\n<li>你改对了文件，但忘了保存</li>\n<li>你该对了文件，但忘了重新编译</li>\n<li>你认为你把那个东西开启了，但实际上你把它关闭了</li>\n<li>你认为你把那个东西关闭了，但实际上你把它开启了</li>\n<li>会议中，你应该用心听。</li>\n<li>你运行了错误的版本</li>\n<li>你运行了正确的版本，但却是在别人的机器上</li>\n<li>你改正了问题，但忘了提交</li>\n<li>你改正了问题，也提交了，但忘了push到版本库中</li>\n<li>你改正了问题，也提交了，也push了。然而，很多用户的工作都依赖于之前有问题的版本，于是你必须回滚。</li>\n</ul>\n<p>我非常虔诚的向大家奉送这些debug原则，任何一次debug都不可能只使用其中的一个方法解决。我真挚的希望大家通过对这些debug原则的思考能获得意想不到的收获。</p>','2014-08-08 11:03:32','2019-09-18 03:04:50','2019-09-18 03:04:50',NULL),(27,1,1,0,17,'面向对象分析与设计—四色原型模式（彩色建模、领域无关模型）','Object-Oriented Analysis and Design-Four-color Prototype Model (Color Modeling, Domain-Independent Model)','object-oriented-analysis-and-design-four-color-prototype-model-color-modeling-domain-independent-model','https://linux.cn/article-3603-1.html','至今我都清楚的记得我第一次被面试官问起什么叫”建模“技术时的情景，那是好 几年前的事情了，当时是胸有成竹的去面试一个有关系统分析、设计的.NET高级软件工程师岗位。面试官几乎没问我有关.NET方面的任何技术实现，他就简 单的问了问：“你如何把握你所分析出来的系统的正确性？”，我当时有点小激动，觉得这个问题应该很简单嘛，都是概念而已，让他直接点问，结果他来一句： “你懂建模吗？，能给我解释一下建模的作用吗？“，接着他出了一个小例子，让我对这个例子进行建模，要考虑到各种扩展性、业务稳定性的关键点，要边建模边 说出为什么要这么建模，要说出思路。他最后重点强调了一下：“创建出来的模型是不允许跟任何具体的代码、工具有关联的”。','https://net.lnmpa.top/thumbnail/2019/09/2696226434e46af98bd84e5d62c61a2a.png-water','<h2>1.背景介绍</h2>\n<p>至今我都清楚的记得我第一次被面试官问起什么叫&rdquo;建模&ldquo;技术时的情景，那是好 几年前的事情了，当时是胸有成竹的去面试一个有关系统分析、设计的.NET高级软件工程师岗位。面试官几乎没问我有关.NET方面的任何技术实现，他就简 单的问了问：&ldquo;你如何把握你所分析出来的系统的正确性？&rdquo;，我当时有点小激动，觉得这个问题应该很简单嘛，都是概念而已，让他直接点问，结果他来一句： &ldquo;你懂建模吗？，能给我解释一下建模的作用吗？&ldquo;，接着他出了一个小例子，让我对这个例子进行建模，要考虑到各种扩展性、业务稳定性的关键点，要边建模边 说出为什么要这么建模，要说出思路。他最后重点强调了一下：&ldquo;创建出来的模型是不允许跟任何具体的代码、工具有关联的&rdquo;。</p>\n<blockquote>\n<p>在我现在看来，他的意思也就是说创建出来的UML类图模型是领域无关模型（领域通用模型），可以用任何一种编程技术去实现他，作为建模者不需要考虑这些实现细节，考虑的越多越容易分散你对真实业务的等价建模，容易犯技术人员的通病（用技术的思维来考虑业务）。</p>\n</blockquote>\n<p>我当时心想这个容易啊，不就是用UML搞点图出来做做秀嘛，体现出分析、设计 的高端嘛，其他还能有啥作用；其实我当时之所以这么想是因为我对UML、建模也尝试过学习、理解和运用，结果我发现这就是一个作秀的工具罢了，对这个东西 很不屑，甚至对软件工程中的&ldquo;建模&rdquo;领域有一种抵触心理。</p>\n<p>我当时随口说了一些我学习UML建模时的心得，心想这个也就是最终答案了，因为它确实就是这个作用（&rdquo;作秀&ldquo;），然后我通过代码驱动建模，倒着推导出UML的类图，结果和我意料的差不多；基本上都覆盖了这个小例子的几大方面，反正面试官不知道我是如何得出这个UML类图的，只有天知道，我是通过先构建代码模型然后反方向推到出类图模型的，嘴上说的跟心理想的完全是相反的。</p>\n<p>在我感觉非常良好的等着面试官接着问下一个问题的时候，情况出现了。面试官说 我漏掉了东西，说我没有充分考虑到业务场景，没有将业务概念中的关键概念划分清楚，甚至疏忽了很重小的领域实体属性，按照我这个模型图开发出来的软件是不 能够满足现在的业务要求的。我当时就蒙了，啥叫关键概念，哪个概念不是关键概念啊，又有哪里不能用了，心理有点委屈，一时不理解，觉得面试官在为难我。</p>\n<blockquote>\n<p>其实我现在能明白当时面试官说的是什么意思，他是指我未能清晰的表达出各个类 的职责，看上去每个类扮演的角色都是一样的，无非就是属性、方法这些类元素，我未能捕获到核心领域概念，未能站在领域考虑建模，而是站在代码的层面上来从 低往上看的，很多东西是看不清楚的，说白了，开发人员拿到这个类图能否明白自己将要面对的领域，如果能明白，此时类图模型是健康的，如果不明白那就是有问 题的，因为模型图不是给自己看的，而是给整个团队交流共享的。</p>\n</blockquote>\n<p>后来我自己调整了一下心情，就算面试失败我也要有总结才行，面试本来就是一个被虐的过程。（&ldquo;佛曰：此时正是修行时&rdquo;，就当是锻炼好了。）</p>\n<p>我虚心的向面试官请教我这个模型图哪里有问题，他指出了有可能我这辈子都无法 看见的分析盲点，他说这个问题是程序员用技术思维来分析建模的通病。为什么他能看见这些盲点，而我不能，我很想知道这其中的精髓，我当时就要求降薪到这里 来学习，面试官不降薪愿意让我过来，他也是一个对技术有追求的人吧。但是后来我有特殊事情未能去贵公司就职，此后我一直遗憾，这个建模精髓我有可能一辈子 都搞不懂了。</p>\n<blockquote>\n<p>现在我能明白，其实如果用代码级别的分析思维来辅助你建模就一定会有盲点，因 为代码级别的&ldquo;设计模式&rdquo;，&ldquo;设计原则&rdquo;并非建模时的&ldquo;分析模式&rdquo;，这是两个不同的问题域，也就是说彼此用在不同的业务领域的，不能够一概而论，如果交叉 使用就会误导你目前的重心，你会往里面添油加醋。</p>\n</blockquote>\n<p>&ldquo;建模&rdquo;这个非常抽象且神圣的词是多么的霸气，貌似是已经触及软件工程的最高境界了；崇拜，自卑；搞软件开发也有几年了，居然连建模都不懂；那一夜我彻底失眠了，从那以后我在技术上充满了无助感，为什么？因为我已经清楚自己要想在软件领域有一定的成果，必须学会对真实世界建模，从那开始&rdquo;建模&ldquo;一词在我脑子的已经和UML关系不大了。</p>\n<p>之后我在软件分析、设计的海洋里苦苦寻找这个曾经在我面前就像流星一样划过的&rdquo;建模金钥匙&ldquo;，有了它我就可以去一个神圣的世界。辗转反侧几年过去了，在前不久我终于知道&ldquo;建模的金钥匙&rdquo;是什么了，这类东西在网络上很少见，写的很少，下面我们来详细了解它。</p>\n<h2>2.问自己，UML对你来说有意义吗？它帮助过你对系统的分析、建模吗？</h2>\n<p>我想学过软件开发的人都多多少少了解UML，简单讲它就是一个用来建模的语言，你可以纯粹的把它理解成是一个画图工具，定义了一些元素，用来表达不同的概念。这里我们关心的是UML类图，也就是用来进行面向对象结构建模用的，通过各种不同的图形来表达抽象的对象结构。</p>\n<p>图1：简单的订单类图</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/09/2696226434e46af98bd84e5d62c61a2a.png-water\" alt=\"\" width=\"928\" height=\"470\" /></p>\n<p>上图是一个很简单的&ldquo;订单&rdquo;与&ldquo;产品&rdquo;相关的类图，我们都能懂这里面的意思， 因为我们对这块的业务很了解；知道在什么地方应该有什么，比如Order中的计算商品总价的算法，有相关业务背景的人都知道这里是会存在的极大逻辑变化的 地方，所以我们需要通过接口来隔离这块逻辑。</p>\n<blockquote>\n<p>我们之所以能够画出这张类图跟UML这个语言本身其实没关系，重要的是你对相 关的业务非常之了解，在你脑子里可以不使用UML来建模，你可以用任何一个草图来建模，也就是说UML并不等于建模，这个要清楚的认识。那我们使用UML 有何用？它并没有帮助我们来分析系统；没错，UML从某个角度讲它没有直接帮助我们对系统尽心分析建模，帮助我们分析建模的是那些业务知识，懂业务的人可 以不使用UML来建模，随便用一种图形表示法来说明业务概念即可。其实UML只不过是一个通用的模型表达语言而已，是用来帮助我们交流模型用的，并非是建 模的思想和方法。</p>\n</blockquote>\n<p>既然UML不能够帮助我们分析系统，那我们如何才能准确的建模出我们不是很熟 悉的领域呢？我们必须承认，领域专家如果懂技术肯定是建模的最适合人选，但是现实并非这样，需要我们技术人员去熟悉领域然后创建模型，但是这中间难免会漏 掉重要的业务概念，因为毕竟从真实的业务到最终的模型是有一个过程的，而最让我们无助的是在这个过程中没有任何可行的指导思想可以借鉴的，只有通过经验来 把握最终的质量。</p>\n<p>总是通过经验来建模不符合软件行业的发展方法，显然不行，这种建模技术难道不可以传递吗？答案是可以传递的，说明这个可以传递的技术正是本文的目的。我们继续往下看。</p>\n<h2>3.一直以来其实我们被一个缝隙隔开了，使我们对OOAD遥不可及</h2>\n<p>上节中其实已经抛出建模的核心问题域了，只不过不是很明显；我们用本节来重点突出这个长久以来一直困扰我们建模者的问题域，以引起我们对它的重视，因为它也是软件工程中的一个重要的研究领域。</p>\n<p>如本节标题所说，其实我们被一个建模时所产生的一个缝隙隔开了，而这个缝隙很长一段时间内没有人关注过，也没有引起相关重视，所以导致我们的建模技术很难提升。</p>\n<p>建模是一个过程，这个过程大概是这样子的，需要我们将真实的业务场景准确的用某种建模语言表达出来，换句话说用什么建模语言表达出来很容易，重点是如何得出这个模型，而得出这个模型的过程就是我们这里所说的建模缝隙。</p>\n<p>图2：</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/445d1c84c2d38e44e8f9d2723c020c71.png-water\" alt=\"\" width=\"1014\" height=\"425\" /></p>\n<p>从&ldquo;业务概念&rdquo;到&ldquo;类模型&rdquo;中间夹着一个&ldquo;建模过程&rdquo;，这个地方其实一直以来 就是分析建模的鸿沟，这个空白的地方一直没有成熟的经验可以学习。在我们对当前分析的业务不是很了解的时候如何正确的建出对应的类模型，表层的领域概念我 们可以根据自己的经验去够发现它，但是这毕竟是无法传递的知识。很多OOAD的书籍甚至包括很多软件工程中的经典书籍都未给出这里的答案，如果用一句准确 的技术术语来形容这个过程的话，其实就是缺少一套建模分析模式，缺少一个可以让我们不管针对什么样的业务进行分析时都是一套不变的指导模式。我 想这个问题对我们建模者来说肯定是共同的问题，我们需要解决它。只有这样我们才不会遇见自己所不熟悉的业务领域时而束手无策，当然你可以说你也一样可以进 行OOA，但是你一定会漏掉什么的，这是分析盲点，是没有正确指导思想的必然结果。正如上图中的&rdquo;下订单&ldquo;和&rdquo;退货&ldquo;两个核心的领域模型未能在右边的&rdquo;类 模型&ldquo;中建模出来，大部分开发人员的通病就是无法识别出潜在的领域概念，认为&rdquo;表层&ldquo; 的领域概念就是类模型中的&rdquo;实体&ldquo;，其实这样我们到最后就回到了表驱动的开发过程当中去，因为你只有通过E-R模型来思考时才能发现这种平面的结构，但是 这又和正确的软件开发访问论背道而驰了。</p>\n<h2>4.四色原型模式填补这个历史缝隙，让我们真的看见OOAD的希望</h2>\n<p>本节我们将讨论一个分析模式，它存在有一段时间了，值得我们高兴的是它就是专 门用来解决上述小节中阐述的&ldquo;分析&rdquo;鸿沟的，通过这套模式我们几乎可以分析任何一个业务领域，再也不用怕由于自己对该领域不熟悉而漏掉了重要的领域模型， 而导致代码混乱、难以重构的最大问题就是丢失重要的领域概念，让各个对象的职责未能正确的在自己的空间中。</p>\n<p>这个分析模式就是&rdquo;四色原型&ldquo;模式，根据名字我们就可以大概猜出它是基于四个概念来分析我们的业务概念，下面我们来了解一下哪四个概念：</p>\n<p>1.实体：也可以叫做物品，表示一个参与者，比如：客户、商品。</p>\n<p>2.角色：实体、时刻时段的角色，如：订单的配送类型，用户的等级角色。</p>\n<p>3.描述：用来对实体、时刻时段的公共属性进行描述，比如：客户实体的地址描述，这部分信息是可以通用的。</p>\n<p>4.时刻时段：实体在某个时间段内的参与事件，如：订单，某个客户在某个时间段内购买了某个商品。此概念就是用来跟踪实体发生的所有需要跟踪的事件。</p>\n<p>当我们使用四色原型模式去分析业务概念时就很难丢失领域概念，下面我们依然以上面的业务领域为例使用四色原型模式进行分析。</p>\n<p>图3：</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/176f5efef4f9629367559613929a6b42.png-water\" alt=\"\" width=\"756\" height=\"491\" /></p>\n<p>基本上我们可以使用四色原型模式去直接套某个业务领域，我们可以根据模式的思 想来推断领域模型是否需要四色中的一种。这样我们基本上不会漏掉重要的业务概念。通过将&ldquo;四色原型&rdquo;模式与&ldquo;RUP\"制品中的&ldquo;业务词汇表&rdquo;、\"补充性规 格说明&ldquo;集合可以完成美妙的OOAD敏捷过程。使用四色原型模式来验收RUP过程制品中的业务词汇表，可以判断出自己是否遗漏了重要的业务分支。</p>\n<p>可以说四色原型模式是通往OOAD之门的金钥匙，有了它我才相信我们现在分析的系统是OO的。</p>\n<p>模型是让人去阅读理解的，上图中我们很难看出哪个是&rdquo;实体&ldquo;哪个是&rdquo;角色&ldquo;哪个是&rdquo;时刻时段&ldquo;和&rdquo;描述&ldquo;，所以大师们借鉴了其他领域的彩色思想来创建软件模型，这样我们就够能一眼的看出模型的具体意思，带来强大的视觉冲击力，下节我们详细的来看看彩色建模。</p>\n<h2>5.在四色原型上运用彩色建模增强视觉冲击力</h2>\n<p>为了能够突出模型的视觉效果，在四色原型上运用不同的颜色来增加模型的视觉冲击力。使用彩色模型能够激发人类天生的视觉敏感性，让人一目了然的知道整体的模型是个什么结构。</p>\n<p>图4：</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/0f3f6b15ce0667a39f717d545df9c805.png-water\" alt=\"\" width=\"772\" height=\"491\" /></p>\n<p>使用绿色来表示实体（参与者），使用黄色表示角色，使用灰色表示描述，使用桃红色表示时刻时段。当然这里的颜色不是很准确，由于我对颜色分的不是很清楚，所以未能调出最合适的颜色，但是差不多也就行了。</p>\n<p>这样当我们面对一个大型的UML类图模型时就可以一眼识别出每个模型所代表的概念它的职责也就清晰明了了。</p>\n<h2>6.通过四色原型模式建模出领域无关模型</h2>\n<p>建模时我们是不需要考虑该模型将要被什么技术落地，也就是说该模型是领域（技 术、工具、平台）无关的，可以使用任何技术来实现它。通过四色原型模式构建出来的模型图更具有可塑性，概念非常的清晰，所有的模型都是概念明确的，不存在 人为的设计在里面，对于任何一个建模者来说这是非常宝贵的建模技术。如果没有四色原型模式的背景，每个建模者都根据自己的经验来假设出很多主观的模型出 来，其实这部分模型是很难让别人理解的，因为每个人的理解角度不同，得出的模型自然也就差别很大，所以建模时使用四色原型模式是一个比较通用的模式，得出 的最后模型也是一个通用的且团队交流也是通用的。</p>\n<p>技术无关是领域无关模型的一个面，领域无关也有另外一层含义，当我们有了四色原型模式时你是否发现你具有了征服所有业务领域的秘诀，就好比E-R模型一样，一个可以用无边际的抽象的模式，这个模式由四色基本的原型组成，而这个四个原型也是领域无关模型。</p>\n<h2>7.结束语：建模时你可以不考虑具体实现，但是建模者要懂技术实现</h2>\n<p>尽管建模高手会告诉我们建模时不要去考虑最后具体用什么技术去实现它，其实跟 你说这个话的人要么就是精通某个技术的高手，要么就是一个理论主义者，只知道画图而不知道如何具体落地领域模型的分析员，前者其实他已经做到心中有数了， 为什么这么说，因为不懂技术实现的人来建模时是无法创建出能用的模型的，因为概念毕竟是概念，一旦落地到代码上、架构上一切都变了，并不是那么的简单直接 落地的，需要考虑到读写、业务流、职责等等问题，这里面是有很强的技术问题在里面的。</p>\n<p>好了文章到此结束，希望本文能对那些对OOAD、UML、建模有兴趣的朋友起到一个抛砖引玉的作用，对本文的内容想进一步学习的可以参考《彩色建模》一书，这本书是OOAD大师[Peter coad]所著，谢谢大家。</p>','2014-08-13 11:05:26','2019-09-18 03:08:33','2019-09-18 03:08:33',NULL),(28,1,1,0,17,'十大编程算法助程序员走上大神之路','Top Ten Programming Algorithms Help Programmers Take the Great God\'s Way','top-ten-programming-algorithms-help-programmers-take-the-great-god-s-way','https://linux.cn/article-3613-1.html','快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要Ο(n log n)次比较。在最坏状况下则需要Ο(n2)次比较，但这种状况并不常见。事实上，快速排序通常明显比其他Ο(n log n) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。\n\n快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。\n\n算法步骤：','https://net.lnmpa.top/thumbnail/2019/09/4d992dc4b38579c32bd1e99038b105d7.jpg-water','<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/09/4d992dc4b38579c32bd1e99038b105d7.jpg-water\" alt=\"\" width=\"1000\" height=\"563\" /></p>\n<h3>算法一：快速排序算法</h3>\n<p>快速排序是由东尼&middot;霍尔所发展的一种排序算法。在平均状况下，排序&nbsp;n&nbsp;个项目要&Omicron;(n&nbsp;log&nbsp;n)次比较。在最坏状况下则需要&Omicron;(n2)次比较，但这种状况并不常见。事实上，快速排序通常明显比其他&Omicron;(n&nbsp;log&nbsp;n)&nbsp;算法更快，因为它的内部循环（inner&nbsp;loop）可以在大部分的架构上很有效率地被实现出来。</p>\n<p>快速排序使用分治法（Divide&nbsp;and&nbsp;conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。</p>\n<p>算法步骤：</p>\n<p>1&nbsp;从数列中挑出一个元素，称为&nbsp;&ldquo;基准&rdquo;（pivot），</p>\n<p>2&nbsp;重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</p>\n<p>3&nbsp;递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</p>\n<p>递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会退出，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p>\n<p class=\"article_img\"><img class=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/67d35fa596327e4af0767041f0127909.gif\" alt=\"算法演示\" width=\"280\" height=\"214\" data-original=\"https://img.linux.net.cn/data/attachment/album/201408/14/111843it3v8za8j7j511i5.gif\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>算法演示</em></p>\n<h3>算法二：堆排序算法</h3>\n<p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p>\n<p>堆排序的平均时间复杂度为&Omicron;(nlogn)&nbsp;。</p>\n<p>算法步骤：</p>\n<p>创建一个堆H[0..n-1]</p>\n<p>把堆首（最大值）和堆尾互换</p>\n<p>3.&nbsp;把堆的尺寸缩小1，并调用shift_down(0),目的是把新的数组顶端数据调整到相应位置</p>\n<p>4.&nbsp;重复步骤2，直到堆的尺寸为1</p>\n<p class=\"article_img\"><img class=\"alignnone size-full wp-image-707 lazy \" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/84376c0dd49d4c6c2fd6d8d9b101b2ae.gif\" alt=\"算法演示\" width=\"280\" height=\"214\" data-original=\"https://img.linux.net.cn/data/attachment/album/201408/14/111843fgpzrrp8j10d3l4n.gif\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>算法演示</em></p>\n<h3>算法三：归并排序</h3>\n<p>归并排序（Merge&nbsp;sort，台湾译作：合并排序）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide&nbsp;and&nbsp;Conquer）的一个非常典型的应用。</p>\n<p>算法步骤：</p>\n<p>1.&nbsp;申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</p>\n<p>2.&nbsp;设定两个指针，最初位置分别为两个已经排序序列的起始位置</p>\n<p>3.&nbsp;比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</p>\n<p>4.&nbsp;重复步骤3直到某一指针达到序列尾</p>\n<p>5.&nbsp;将另一序列剩下的所有元素直接复制到合并序列尾</p>\n<p class=\"article_img\"><img class=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/710ef46ca7f308b0bfea404dca768d82.gif\" alt=\"算法演示\" width=\"280\" height=\"237\" data-original=\"https://img.linux.net.cn/data/attachment/album/201408/14/111844d0vl920tj3nvm320.gif\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>算法演示</em></p>\n<h3>算法四：二分查找算法</h3>\n<p>二分查找算法是一种在有序数组中查找某一特定元素的搜索算法。搜素过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜&nbsp;素过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组&nbsp;为空，则代表找不到。这种搜索算法每一次比较都使搜索范围缩小一半。折半搜索每次把搜索区域减少一半，时间复杂度为&Omicron;(logn)&nbsp;。</p>\n<h3>算法五：BFPRT(线性查找算法)</h3>\n<p>BFPRT算法解决的问题十分经典，即从某n个元素的序列中选出第k大（第k小）的元素，通过巧妙的分&nbsp;析，BFPRT可以保证在最坏情况下仍为线性时间复杂度。该算法的思想与快速排序思想相似，当然，为使得算法在最坏情况下，依然能达到o(n)的时间复杂&nbsp;度，五位算法作者做了精妙的处理。</p>\n<p>算法步骤：</p>\n<p>1.&nbsp;将n个元素每5个一组，分成n/5(上界)组。</p>\n<p>2.&nbsp;取出每一组的中位数，任意排序方法，比如插入排序。</p>\n<p>3.&nbsp;递归的调用selection算法查找上一步中所有中位数的中位数，设为x，偶数个中位数的情况下设定为选取中间小的一个。</p>\n<p>4.&nbsp;用x来分割数组，设小于等于x的个数为k，大于x的个数即为n-k。</p>\n<p>5.&nbsp;若i==k，返回x；若i&lt;k，在小于x的元素中递归查找第i小的元素；若i&gt;k，在大于x的元素中递归查找第i-k小的元素。</p>\n<p>终止条件：n=1时，返回的即是i小元素。</p>\n<h3>算法六：DFS（深度优先搜索）</h3>\n<p>深度优先搜索算法（Depth-First-Search），是搜索算法的一种。它沿着树的深度遍历树的节点，尽可能深的搜索树的分&nbsp;支。当节点v的所有边都己被探寻过，搜索将回溯到发现节点v的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发&nbsp;现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止。DFS属于盲目搜索。</p>\n<p>深度优先搜索是图论中的经典算法，利用深度优先搜索算法可以产生目标图的相应拓扑排序表，利用拓扑排序表可以方便的解决很多相关的图论问题，如最大路径问题等等。一般用堆数据结构来辅助实现DFS算法。</p>\n<p>深度优先遍历图算法步骤：</p>\n<p>1.&nbsp;访问顶点v；</p>\n<p>2.&nbsp;依次从v的未被访问的邻接点出发，对图进行深度优先遍历；直至图中和v有路径相通的顶点都被访问；</p>\n<p>3.&nbsp;若此时图中尚有顶点未被访问，则从一个未被访问的顶点出发，重新进行深度优先遍历，直到图中所有顶点均被访问过为止。</p>\n<p>上述描述可能比较抽象，举个实例：</p>\n<p>DFS&nbsp;在访问图中某一起始顶点&nbsp;v&nbsp;后，由&nbsp;v&nbsp;出发，访问它的任一邻接顶点&nbsp;w1；再从&nbsp;w1&nbsp;出发，访问与&nbsp;w1邻&nbsp;接但还没有访问过的顶点&nbsp;w2；然后再从&nbsp;w2&nbsp;出发，进行类似的访问，&hellip;&nbsp;如此进行下去，直至到达所有的邻接顶点都被访问过的顶点&nbsp;u&nbsp;为止。</p>\n<p>接着，退回一步，退到前一次刚访问过的顶点，看是否还有其它没有被访问的邻接顶点。如果有，则访问此顶点，之后再从此顶点出发，进行与前述类似的访问；如果没有，就再退回一步进行搜索。重复上述过程，直到连通图中所有顶点都被访问过为止。</p>\n<h3>算法七：BFS(广度优先搜索)</h3>\n<p>广度优先搜索算法（Breadth-First-Search），是一种图形搜索算法。简单的说，BFS是从根节点开始，沿着树(图)的宽度遍历树(图)的节点。如果所有节点均被访问，则算法中止。BFS同样属于盲目搜索。一般用队列数据结构来辅助实现BFS算法。</p>\n<p>算法步骤：</p>\n<p>1.&nbsp;首先将根节点放入队列中。</p>\n<p>2.&nbsp;从队列中取出第一个节点，并检验它是否为目标。</p>\n<p>如果找到目标，则结束搜寻并回传结果。</p>\n<p>否则将它所有尚未检验过的直接子节点加入队列中。</p>\n<p>3.&nbsp;若队列为空，表示整张图都检查过了&mdash;&mdash;亦即图中没有欲搜寻的目标。结束搜寻并回传&ldquo;找不到目标&rdquo;。</p>\n<p>4.&nbsp;重复步骤2。</p>\n<p class=\"article_img\"><img class=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/9a9645692e28f00a4797cf16045d9751.gif\" alt=\"算法演示\" width=\"187\" height=\"175\" data-original=\"https://img.linux.net.cn/data/attachment/album/201408/14/111844maellactexdhxt1h.gif\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>算法演示</em></p>\n<h3>算法八：Dijkstra算法</h3>\n<p>戴克斯特拉算法（Dijkstra&rsquo;s&nbsp;algorithm）是由荷兰计算机科学家艾兹赫尔&middot;戴克斯特拉提出。迪科斯彻算法使用了广度优先搜索解决非负权有向图的单源最短路径问题，算法最终得到一个最短路径树。该算法常用于路由算法或者作为其他图算法的一个子模块。</p>\n<p>该算法的输入包含了一个有权重的有向图&nbsp;G，以及G中的一个来源顶点&nbsp;S。我们以&nbsp;V&nbsp;表示&nbsp;G&nbsp;中所有顶点的集合。每一个图中的边，都是两个顶点所形成的有序元素对。(u,&nbsp;v)&nbsp;表示从顶点&nbsp;u&nbsp;到&nbsp;v&nbsp;有路径相连。我们以&nbsp;E&nbsp;表示G中所有边的集合，而边的权重则由权重函数&nbsp;w:&nbsp;E&nbsp;&rarr;&nbsp;[0,&nbsp;&infin;]&nbsp;定义。因此，w(u,&nbsp;v)&nbsp;就是从顶点&nbsp;u&nbsp;到顶点&nbsp;v&nbsp;的非负权重（weight）。边的权重可以想像成两个顶点之间的距离。任两点间路径的权重，就是该路径上所有边的权重总和。已知有&nbsp;V&nbsp;中有顶点&nbsp;s&nbsp;及&nbsp;t，Dijkstra&nbsp;算法可以找到&nbsp;s&nbsp;到&nbsp;t的最低权重路径(例如，最短路径)。这个算法也可以在一个图中，找到从一个顶点&nbsp;s&nbsp;到任何其他顶点的最短路径。对于不含负权的有向图，Dijkstra算法是目前已知的最快的单源最短路径算法。</p>\n<p>算法步骤：</p>\n<p>1.&nbsp;初始时令&nbsp;S={V0},T={其余顶点}，T中顶点对应的距离值</p>\n<p>若存在&lt;v0,vi&gt;，d(V0,Vi)为&lt;v0,vi&gt;弧上的权值</p>\n<p>若不存在&lt;v0,vi&gt;，d(V0,Vi)为&infin;</p>\n<p>2.&nbsp;从T中选取一个其距离值为最小的顶点W且不在S中，加入S</p>\n<p>3.&nbsp;对其余T中顶点的距离值进行修改：若加进W作中间顶点，从V0到Vi的距离值缩短，则修改此距离值</p>\n<p>重复上述步骤2、3，直到S中包含所有顶点，即W=Vi为止</p>\n<p class=\"article_img\"><img class=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/6c497300b73cc93b3ffca13c37f41ba8.gif-water\" alt=\"算法演示\" width=\"283\" height=\"222\" data-original=\"https://img.linux.net.cn/data/attachment/album/201408/14/111845fkkdg9ndv1n24uje.gif\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>算法演示</em></p>\n<h3>算法九：动态规划算法</h3>\n<p>动态规划（Dynamic&nbsp;programming）是一种在数学、计算机科学和经济学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。&nbsp;动态规划常常适用于有重叠子问题和最优子结构性质的问题，动态规划方法所耗时间往往远少于朴素解法。</p>\n<p>动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再合并子问题的解以得出原问题的解。&nbsp;通常许多&nbsp;子问题非常相似，为此动态规划法试图仅仅解决每个子问题一次，从而减少计算量：&nbsp;一旦某个给定子问题的解已经算出，则将其记忆化存储，以便下次需要同一个&nbsp;子问题解之时直接查表。&nbsp;这种做法在重复子问题的数目关于输入的规模呈指数增长时特别有用。</p>\n<p>关于动态规划最经典的问题当属背包问题。</p>\n<p>算法步骤：</p>\n<p>1.&nbsp;最优子结构性质。如果问题的最优解所包含的子问题的解也是最优的，我们就称该问题具有最优子结构性质（即满足最优化原理）。最优子结构性质为动态规划算法解决问题提供了重要线索。</p>\n<p>2.&nbsp;子问题重叠性质。子问题重叠性质是指在用递归算法自顶向下对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。&nbsp;动态规划算法正是利用了这种子问题的重叠性质，对每一个子问题只计算一次，然后将其计算结果保存在一个表格中，当再次需要计算已经计算过的子问题时，只是&nbsp;在表格中简单地查看一下结果，从而获得较高的效率。</p>\n<h3>算法十：朴素贝叶斯分类算法</h3>\n<p>朴素贝叶斯分类算法是一种基于贝叶斯定理的简单概率分类算法。贝叶斯分类的基础是概率推理，就是在各种条件的存在不确定，仅知其出现概率的情况下，&nbsp;如何完成推理和决策任务。概率推理是与确定性推理相对应的。而朴素贝叶斯分类器是基于独立假设的，即假设样本每个特征与其他特征都不相关。</p>\n<p>朴素贝叶斯分类器依靠精确的自然概率模型，在有监督学习的样本集中能获取得非常好的分类效果。在许多实际应用中，朴素贝叶斯模型参数估计使用最大似然估计方法，换言之朴素贝叶斯模型能工作并没有用到贝叶斯概率或者任何贝叶斯模型。</p>','2014-08-14 11:10:11','2019-09-18 03:14:58','2019-09-18 03:14:58',NULL),(29,1,1,0,17,'有关云架构建设和选型的思考','Consideration on Cloud Architecture Construction and Selection','consideration-on-cloud-architecture-construction-and-selection','https://linux.cn/article-3672-1.html','计算机云经过多年的发展，由一开始的概念，慢慢发展成熟并能够推向市场，提供多种多样的服务，市场空间非常之大。\n\n在云的发展过程中，亚马逊经过多年的深耕积累，发展成为了云行业的标杆企业，甚至可以说是建立了云解决方案的标准。之后，Google、IBM、思 科、Oracle、HP、Intel、华为等IT巨头先后参与进来，在软件和硬件方面提供专门的面向企业的解决方案，纷纷打着云计算、大数据、智能等概念 来吸引客户，拓展市场。\n\n另外一方面，基于大数据、存储、云服务等，市场上也先后出现一些创新企业，如Dropbox、Rackspace，国内的七牛、青云、UnitedStack等。\n\n当前的IT世界有一个常见的现象，就是只要某一个领域有一套成熟的商业软件，就同时也会有一套开源的解决方案，如Windows之于 Linux，Google的MapReduce、GFS、大表之于Hadoop等。在云领域也存在相应的开源解决方案，目前最为著名的有 Openstack和Cloudstack。开源行业的领导者RedHat此前\n\n在企业操作系统的市场已经做的很好，RHEL的各个版本在企业级系统市场有相当高的市场份额。现在的RedHat特别重视云的发展，并将云操作系统作为未来10年的发展战略重点，在最近两年先后收购了Gluster以及Ceph等存储企业，以壮大自己在云领域的影响力。','https://net.lnmpa.top/thumbnail/2019/09/927729b7a6043e2cd84beb9a7ed3d781.jpg-water','<p>最近在负责公司内部私有云的建设，一直在思考怎么搞云计算，怎么才能够把云架构设计得好一些。本文尽量全面的列出了云架构建设和选型的考量因素。</p>\n<p>我们主要从五个层面逐步评估云架构的建设和选型，分别是：</p>\n<ol>\n<li>行业生态</li>\n<li>企业需求</li>\n<li>云计算的能力</li>\n<li>潜在的挑战</li>\n<li>如何建设</li>\n</ol>\n<h3>一、行业生态</h3>\n<p>计算机云经过多年的发展，由一开始的概念，慢慢发展成熟并能够推向市场，提供多种多样的服务，市场空间非常之大。</p>\n<p>在云的发展过程中，亚马逊经过多年的深耕积累，发展成为了云行业的标杆企业，甚至可以说是建立了云解决方案的标准。之后，Google、IBM、思 科、Oracle、HP、Intel、华为等IT巨头先后参与进来，在软件和硬件方面提供专门的面向企业的解决方案，纷纷打着云计算、大数据、智能等概念 来吸引客户，拓展市场。</p>\n<p>另外一方面，基于大数据、存储、云服务等，市场上也先后出现一些创新企业，如Dropbox、Rackspace，国内的七牛、青云、UnitedStack等。</p>\n<p>当前的IT世界有一个常见的现象，就是只要某一个领域有一套成熟的商业软件，就同时也会有一套开源的解决方案，如Windows之于 Linux，Google的MapReduce、GFS、大表之于Hadoop等。在云领域也存在相应的开源解决方案，目前最为著名的有 Openstack和Cloudstack。开源行业的领导者RedHat此前</p>\n<p>在企业操作系统的市场已经做的很好，RHEL的各个版本在企业级系统市场有相当高的市场份额。现在的RedHat特别重视云的发展，并将云操作系统作为未来10年的发展战略重点，在最近两年先后收购了Gluster以及Ceph等存储企业，以壮大自己在云领域的影响力。</p>\n<p>随着云领域的发展，市场上也逐渐形成了面向企业提供硬件和软件产品的提供商、面向企业提供服务的提供商、面向市场初创企业提供基础服务的提供商、面向个人提供业务服务的提供商等一系列行业生态。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/09/927729b7a6043e2cd84beb9a7ed3d781.jpg-water\" alt=\"\" width=\"776\" height=\"566\" /></p>\n<h3>二、企业需求</h3>\n<p>需求是什么，也就是what people need这个问题。我们所说的people，即人或者公司实体，该对象的划分并不单纯，可粗浅的从三个角度来进行分类：</p>\n<p>从企业角度看：</p>\n<p>1）小型企业</p>\n<p>小型企业的技术储备不多，人员缺乏，没有独立的IT部门，但是在构建自己的IT系统过程中需要购置各种产品和服务，包括服务器、网络、CDN等等，而要完成这样的工作，需要投入大量的人力和财力。通过购买云服务可以更加方便快捷，简单的完成系统的搭建。</p>\n<p>2）中型企业</p>\n<p>中型企业有一定的规模，需要在信息化、管理方面有所注重，一般内部都设立IT部门，但是和小型企业一样，IT部门大多数都是为了解决自身需求，很难能够有一个完整的解决方案。这样在服务器、网络、CDN、企业管理软件等等的需求还是比较大的。</p>\n<p>3）大型企业</p>\n<p>大型企业人数规模在万人以上，特别是高新企业，都有一个实力不错的IT支撑部门，通过部门就可以完善对企业内部信息化建设。</p>\n<p>从企业性质范围来看：</p>\n<p>1）传统行业企业</p>\n<p>传统行业大多数是以服务业、制造业、生产性企业为主，在IT信息化方面相对比较落后，属于重资产行业。</p>\n<p>2）互联网企业</p>\n<p>互联网行业是基于IT作为解决方案的</p>\n<p>3）IT服务企业</p>\n<p>以销售软件、硬件、以及技术咨询服务为主的企业。</p>\n<p>针对市场中存在的企业、个体等的需求特点，市场上一般对软件服务进行如下分类：</p>\n<ol>\n<li>提供软件的服务，解决企业内部信息化问题，如ERP系统、进销存管理系统、人力资源管理系统、行政系统、财务系统等等。（SaaS）</li>\n<li>提供平台服务，解决行业共性问题，将SaaS迁移到云端，提供平台类的服务。如淘宝的开放平台、Facebook的开放平台、基于Salesforce的销售系统、云笔记、云盘等。（PaaS）</li>\n<li>提供基础设施服务。基础设施包括软件和硬件方面的，包括存储、虚拟机、网络、防火墙、缓存、负载均衡、数据库等等。（IaaS）</li>\n</ol>\n<p>从企业内部人员角色来看：</p>\n<p>企业内部，尤其是互联网企业内部，一般将角色分为如下几类：</p>\n<ol>\n<li>开发</li>\n<li>测试</li>\n<li>运维</li>\n<li>DBA</li>\n<li>产品</li>\n<li>项目管理人员</li>\n<li>客服</li>\n<li>业务人员（销售、市场、BD、人力资源、行政等等）</li>\n</ol>\n<p>不同的角色对于软件服务的需求也是不同的，下图大致描绘了互联网行业各个角色对云平台的需求：</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/223a909fb0a15233f79ae5515f03c2b9.jpg-water\" alt=\"\" width=\"900\" height=\"527\" /></p>\n<h3>三、云计算的能力</h3>\n<p>云计算能够解决什么，也就是what cloud offer这个问题。目前的云计算在应用中主要提供了以下八个能力：</p>\n<ol>\n<li>封装：将计算能力和软件放在云端，可以减少重复建设，将通用的服务封装起来，达到重用，减少资源的浪费，提高生产效率，并提供成熟的解决方案。 在云端，云提供商可以建立软件的标准，提供发布包的方式，用户可以通过软件包的方式进行购买使用，譬如目前开源领域的Docker。</li>\n<li>安全：云计算将数据和存储，软件逻辑都集中于云端，更能方便的统一构建安全体系，通过Iptables实现网络过滤，并在服务端做安全组件实现安全策略，并能够通过海量集群应对DDOS攻击等。</li>\n<li>灵活：云计算提供灵活的软件和服务端架构，用户不再需要自己构建应用运行环境，对资源的使用能够按需购买，并能够升级，并自由组合。举例来说：用户可以选用不同的存储方式（mysql、oracle，文件系统，kv等等）</li>\n<li>性能：通过集群的能力和云端的集成能够提高集群的性能处理，通过专业的云解决提供商，在云端的性能扩展更加方便，技术上更加专业。譬如服务端可以在用户毫不察觉的情况下完成添加机器、存储扩容等操作。</li>\n<li>伸缩能力：在存储和计算能力方面提供弹性的资源管理，能够按需使用，在使用过程中，可以通过动态的添加和减少物理资源，来提高响应能力或节约成本。</li>\n<li>运维：云计算在IaaS角度来看，重要的是运维，能够将运维更加集中化管理，并完全智能化，大大降低人力成本</li>\n<li>充分利用物理资源：通过云建设，能够将物理资源进行虚拟化处理，屏蔽物理硬件底层，并能够完成物理资源软化进行逻辑管理和分配调度</li>\n<li>大数据：大数据保存于云端，能够提供数据分析和智能处理</li>\n</ol>\n<p>当然，云计算还有很多很多好处，给我们带来很多想像空间和IT技术的革命。</p>\n<h3>公有云与私有云</h3>\n<p>行业内将云分为&ldquo;公有云&rdquo;和&ldquo;私有云&rdquo;。在我们之前的需求分析过程中，大致了解了云的需求，&ldquo;公有云&rdquo;和&ldquo;私有云&rdquo;的差别最大的是需求的差异，因为需求的差异，导致了技术方案和产品决策的差异。</p>\n<p>公有云需求上由于用户多种多样，导致需求存在不一样，特别需要更多的定制化，譬如：</p>\n<ol>\n<li>存储个性化\n<p>云存储方面大概分为块存储和对象存储，块存储适合于vm运行环境，对象存储提供了KV的访问方式提供了海量扩展存储文件的能力，用户可以根据自己 的需求选择不同的存储方式，选用不同的容量。在存储物理介质方面来说，因为存在不同的物理介质，对性能和安全的要求，可以采用传统的SATA硬盘，或者 SSD存储等。</p>\n</li>\n<li>内存使用\n<p>内存方面，需要提供动态扩展内存的方式，用户能够自由扩展</p>\n</li>\n<li>网络的定制化\n<p>公有云用户需要能够构建自己的内部网络，并能够自动组网</p>\n</li>\n<li>数据库使用\n<p>公有云的用户分属不同的公司团体，各自的技术差异存在，因而有不同的数据库类型，譬如mysql，sqlserver，oracle等等。并能够定义存储大小，内存运行大小等等。并提供数据备份、恢复、高可用服务等</p>\n</li>\n<li>缓存使用\n<p>公有云的用户可以选择不同的缓存方式，譬如增加CDN，采用不同的KV缓存方式并选择容量。</p>\n</li>\n<li>安全问题\n<p>公有云对于云的安全和私有云差别较大，私有云大多数在安全问题上不需要公有云那么严格，大多数是内部系统之间的交互</p>\n</li>\n</ol>\n<p>以上仅限于IaaS层面的考虑，当然对于公有云来说还有很多细化的个性化需求，例如：数据分析，业务对接服务等等。</p>\n<h3>四、潜在的挑战</h3>\n<p>计算机自从诞生以来，一直按照冯.诺伊曼的体系发展在硬件的基础上的操作系统，也分为网络协议体系的实现、内存管理、文件管理体系等等。大致的抽象图如下：</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/da8fe2a7991824409a6d1e7c68e39f20.jpg-water\" alt=\"\" width=\"913\" height=\"607\" /></p>\n<p>要建设云，有几个重要的问题需要解决：</p>\n<ol>\n<li>管理问题\n<p>云计算的实施首先要解决运维的问题，在云环境下后端是大规模数量的物理节点的集群，对于同时维护数以千计算的计算节点，以及部署结构的复杂，需求 的变化，光靠增加人力也难以解决复杂的问题。从而需要构建高效的计算资源管理系统，能够灵活简单的管理运系统，并能够及时的发现问题。</p>\n</li>\n<li>计费问题(公有云)\n<p>对于公有云而言，因为是面向公众的，必然产生费用的问题，常用的收费方式多种多样，也因为产品的不同而计费方式不同，譬如：网络、存储、cpu、数据库容量等等</p>\n</li>\n<li>资源隔离问题\n<p>云计算运行在云端，是通过虚拟化体系建立的，虚拟化是建立在硬件之上，多个虚拟化资源同时运行于同一节点（host）中，存在着资源的共享争用问题，</p>\n<p>这样就存在着资源使用的公平性问题，导致同一Host上的资源使用相互影响。为了使得彼此资源使用相互独立，我们要建立相应的隔离机制。资源的隔离包括：存储、内存、cpu、数据库、网络等，其中网络是最难控制的。</p>\n</li>\n<li>安全问题\n<p>在云端的应用和基于客户端的安全，面临的环境不一样，客户端方面大多数是病毒问题引起的，而在云端，也存在一些服务器攻击的问题，以及数据相互独立相互影响的问题，以及一些服务端编程的安全问题等。</p>\n</li>\n<li>性能问题\n<p>对于云来说，需要保证云端的性能问题，包括CPU处理性能，IO处理能力，资源的就近访问，资源数据同步的速度，还需要解决系统底层的性能问题，包括文件处理Cache，存储介质的优化，采用SSD等，或者采用SATA+SSD的混合方式节约资源和降低成本。</p>\n</li>\n<li>存储问题\n<p>对于云来说，由于云端是将客户端的数据和运算转移到云端，必须要有足够的存储能力以及足够稳定的存储系统，保证用户数据的安全，对于存储来说，有 提供VM虚拟机运行环境的block device（块存储），以及提供KV方式的对象访问存储，这些都需要保证数据复制、数据读写访问的性能和数据永久可用的能力</p>\n</li>\n<li>网络问题\n<p>对于公有云以及私有云的一些应用场景，需要能够提供网络的逻辑隔离（SDN）或物理隔离，以及对网络的访问灵活问题。构建虚拟化网络，由于物理条 件的限制，我们不得不从L2-L4层进行处理，我们常用的方式 是：bridge，vlan，gre，sdn（openflow，opendaylight），以及一些厂家的产品等等。</p>\n</li>\n<li>高可用问题\n<p>高可用问题是在分布式系统中必须要处理的问题，正因为集群的问题，我们必须要从多方面考虑解决的问题，包括保证云管理系统的高可用性，存储介质的高可用性，网络的高可用性，虚拟机高可用问题等等。</p>\n</li>\n<li>提高资源利用率问题\n<p>对于物理资源的虚拟化，我们有很多种解决方法，KVM、Vmware、xen、Hyperv、LXC等等，在HVM的方式下，对于VM本身的启动 需要占用大量的内存、cpu和存储资源，导致系统内存和cpu使用有一定的浪费，基于LXC的解决方案因为是机基于Host OS进程，通过namespace的方式进行隔离的，是一种轻量级的实现，能够在资源初始化，资源利用率方面能够最大化，对于各个应用场景来说，我们可以 选用合适的解决方案。</p>\n</li>\n</ol>\n<h3>五、如何建设</h3>\n<p>58同城经过多年的发展，探索了一条适合自身发展的技术架构体系。随着业务和技术的发展，团队规模不断壮大，在技术和管理上面临越来越多的挑战。在 项目需求管理，开发效率、代码管理和质量建设，测试，线上发布，运维管理等方面需要有一套完整的解决方案，来提升公司的协作能力和整体能效。</p>\n<p>58同城目前所有的应用在线上都是跑在物理机器上，采用物理机的方式，一方面会导致服务器资源得不到充分和合理的使用，譬如：有些物理机器cpu使 用长期在10%以下，有些内存使用剩余很多；另外一方面，由于互联网的特点，存在着时段内的访问高峰问题，需要解决资源使用的伸缩问题；基于以上问题，架 构部对现有的技术体系进行梳理和分析，采用资源虚拟化的方式进行私有云的建设，并在这基础上，完善公司整体技术体系，包括：开发、测试、上线、运维等一系 列自动化和智能化方面的建设。</p>\n<p>私有云的目标</p>\n<ol>\n<li>提高物理资源的利用率</li>\n<li>一套云管理系统，降低运维的复杂度，提高运维工作效率</li>\n<li>构建灵活的开发、测试集成环境</li>\n<li>提供海量的存储体系</li>\n<li>建立完善的监控体系</li>\n<li>建立基础应用环境、方便测试</li>\n<li>统一架构</li>\n<li>智能资源调度</li>\n</ol>\n<p>实施方案：OpenStack</p>\n<p>对于云计算来说，也存在着多种解决方案，如CloudStack和OpenStack等。在两种方案的比较之后，我们最终选择了OpenStack的解决方案。主要是出于以下几点原因：</p>\n<ol>\n<li>OpenStack的社区成熟度：OpenStack经过几年的发展，社区已经越来越成熟，很多大公司都参与进来帮助完善，红帽公司未来十年也将OpenStack作为发展的战略重点。</li>\n<li>架构设计的选择：OpenStack采用了Python语言编写，并且设计上采用组件化的方式，各个组件独立发展，并相互解耦</li>\n<li>OpenStack提供了更加完整成熟的方案，能够满足多样的需求，同时已经有不少公司采用，已经经过生产上的验证</li>\n<li>文档问题：OpenStack文档化做的不错，网上能够找到多种多样的问题处理办法</li>\n<li>人员招聘问题，经过多年的发展和市场的培育，了解OpenStack的人越来越多，对于开发维护的人才建设和招聘相对成熟一些。</li>\n<li>发展比较迅速</li>\n</ol>\n<p>下图是我们大致的架构规划</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/ce1189c1b197a2ac93d6d8d505d968e1.jpg-water\" alt=\"\" width=\"861\" height=\"791\" /></p>\n<p>文章观点仅一家之言，欢迎大家一起交流探讨。我计划在下一篇文章《58同城私有云建设实践》中详细介绍我们私有云建设的思路和过程，中间遇到的问题，希望跟大家一起探讨。</p>','2014-08-25 11:17:14','2019-09-18 03:19:34','2019-09-18 03:19:34',NULL),(30,1,1,0,18,'前置逗号之争','Precomma Debate','precomma-debate','https://linux.cn/article-3693-1.html','其实在很多开源软件中前置逗号是经常使用的，它是Haskell语言默认的代码风格。\n\nNode.JS的前负责人isaacs（现npmjs.org负责人，参见：下一阶段的NodeJS) 写过一篇文章，讨论将逗号写在前面的优缺点。讨论中尽管很多人无法适应comma-first。但其中有一条优点无法回避，逗号前移可以很容易发现语法错误。\n\n下段代码的d变量名后面少了一个逗号，这是我们经常犯的一个错误，在一般代码风格中，这个错误是非常不容易被发现的：','https://net.lnmpa.top/thumbnail/2019/09/98e174a90bc67258f795228ecb8a0f0b.jpg-water','<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/09/98e174a90bc67258f795228ecb8a0f0b.jpg-water\" alt=\"\" width=\"500\" height=\"250\" /></p>\n<p>个人认为<a class=\"ext\" href=\"https://github.com/airbnb/\" target=\"_blank\" rel=\"external nofollow noopener\">Airbnb</a>的javascript代码规范是写的比较好的, 不过其中有一章关于逗号Commas的使用是这样写的：<br /><br />前置逗号（Leading commas）：不要使用</p>\n<pre class=\"language-javascript\"><code>// bad\nvar once\n  , upon\n  , aTime;\n \n// good\nvar once,\n    upon,\n    aTime;\n \n// bad\nvar hero = {\n    firstName: \'Bob\'\n  , lastName: \'Parr\'\n  , heroName: \'Mr. Incredible\'\n  , superPower: \'strength\'\n};\n \n// good\nvar hero = {\n  firstName: \'Bob\',\n  lastName: \'Parr\',\n  heroName: \'Mr. Incredible\',\n  superPower: \'strength\'\n};</code></pre>\n<p>其实在很多开源软件中前置逗号是经常使用的，它是Haskell语言默认的代码风格。</p>\n<p>Node.JS的前负责人isaacs（现npmjs.org负责人，参见：<a class=\"ext\" href=\"http://ourjs.com/detail/52d749f6ed5c27720300000d\" target=\"_blank\" rel=\"external nofollow noopener\">下一阶段的NodeJS</a>) 写过<a class=\"ext\" href=\"https://gist.github.com/isaacs/357981\" target=\"_blank\" rel=\"external nofollow noopener\">一篇文章</a>，讨论将逗号写在前面的优缺点。讨论中尽管很多人无法适应comma-first。但其中有一条优点无法回避，逗号前移可以很容易发现语法错误。</p>\n<p>下段代码的d变量名后面少了一个逗号，这是我们经常犯的一个错误，在一般代码风格中，这个错误是非常不容易被发现的：</p>\n<pre class=\"language-javascript\"><code>// error in standard style\nvar a = \"ape\",\n    b = \"bat\",\n    c = \"cat\",\n    d = \"dog\"\n    e = \"elf\",\n    f = \"fly\",\n    g = \"gnu\",\n    h = \"hat\",\n    i = \"ibu\";</code></pre>\n<p>但在前置代码规范中，一眼就可以看得出来：&nbsp;</p>\n<pre class=\"language-javascript\"><code>// error in comma-first style\nvar a = \"ape\"\n  , b = \"bat\"\n  , c = \"cat\"\n  , d = \"dog\"\n  e = \"elf\"\n  , f = \"fly\"\n  , g = \"gnu\"\n  , h = \"hat\"\n  , i = \"ibu\"\n  ;</code></pre>\n<p>前置逗号与\".\"的连续型写法或者叫做链式写法(可能还有\"+\")是保持一致的，如：</p>\n<pre class=\"language-javascript\"><code>jQuery\n  .ajax(\'//home/url\')\n  .done(function() {\n  })\n  .error(function() {\n  })\n  .always(function() {\n  })</code></pre>\n<p>前置逗号在最后新增删除变量时只需要影响一行。而无需删除或添加原来最后一个变量的结束符号。并且前置写法，2个空格的tab即可将变量对齐，2个space可使代码更紧凑。传统写法，需要4个空格的tab才能使变量对齐。</p>\n<pre class=\"language-javascript\"><code>var a = \"ape\"\n  , b = \"bat\"\n  , c = \"cat\"\n  , d = \"dog\"\n  , e = \"add new line\"  //只影响的一行（添加或删除）\n  ;\n \nvar a = \"ape\",\n    b = \"bat\",\n    c = \"cat\",\n    d = \"dog\",\n    e = \"add new line\"; //删除此行时需要将前一行d的最后一个逗号同时删除，此时会影响两行；新加时同时删除原有的分号，并换成逗号。此时即易发生输入错误。</code></pre>\n<p>另外在Twitter的bootstrap框架中，每个变量都使用var来声明，不用连续声明的方式。而且默认不用分号结束的：</p>\n<p>这种格式的代码看上去也比较优美，同时避免了关于逗号的争论：</p>\n<pre class=\"language-javascript\"><code>var a = \"ape\"\nvar b = \"bat\"\nvar c = \"cat\"</code></pre>\n<p>其实省略分号也是可以借鉴的，所以本文认为比较好的逗号格式应该是这样的：</p>\n<pre class=\"language-javascript\"><code>var one\n  , two\n  , three\n \nvar prop = {\n    a: \'a\'\n  , b: \'b\'\n  , c: \'c\'\n  , d: \'d\'\n}</code></pre>\n<h3>负作用</h3>\n<p>其实省略分号也有负用，在与闭包结合时会有一些问题，如下段代码：</p>\n<pre class=\"language-javascript\"><code>var a = 1\n \n(function() {\n  console.log(a)\n})()\n \n// TypeError: number is not a function</code></pre>\n<p>&nbsp;一个错误抛出了，在JS解释执行时，很可能将之合成了1行。</p>\n<pre class=\"language-javascript\"><code>var a = 1 (function() { console.log(a) })()</code></pre>\n<p>错误就产生了，所以很多开源框架都会在闭包前置或后置分号，以避免前人无意或故意遗漏分号从而造成错误，正确的写法应该是：</p>\n<pre class=\"language-javascript\"><code>var a = 1\n \n;(function() {\n  console.log(a)\n})()</code></pre>\n<p>不使用分号的bootstrap框架也是这么干的，不过bootstrap框架使用了看上去更加高级的+号分隔闭包并后置分号，不过这一套不适合代码与闭包混合使用的场景，还是不要学比较好。</p>\n<pre class=\"language-javascript\"><code>var a = 1\n \n+ function() {\n  console.log(a)\n} ();\n \n//a 的值会变成 NaN</code></pre>','2014-08-26 11:20:15','2019-09-18 03:25:13','2019-09-18 22:12:32',NULL),(31,1,1,0,19,'如何让你的JavaScript代码更加语义化','How to make your JavaScript code more semantical','how-to-make-your-javascript-code-more-semantical','https://linux.cn/article-3697-1.html','语义化这个词在 HTML 中用的比较多，即根据内容的结构化选择合适的标签。其作用不容小觑：\n\n赋予标签含义，让代码结构更加清晰，虽然我们可以在标签上添加 class 来标识，但这种通过属性来表示本体的形式会显得不够直接，而且在一定程度上也有冗余。\n优化搜索引擎（SEO），结构良好的网页对搜索引擎的亲和力是很高的，百度和 google 也给出了很多网页结构化的建议（规范），方便他们抓取网页。\n利于设备解析，如盲人阅读器对页面的分析，目前淘宝很多网页都是支持盲人阅读的，这种体验上的优化得利于网页的良好结构和语义化表达。\n便于开发者维护，在参加工作之前，很多程序员都是单人开发模式，单人开发无所谓代码结构，自己看得懂就差不多了，一旦走向工作岗位，会发现，以前的鄙习有点让自己捉襟见肘了。\nW3C Group 工作组在 web 规范上持续贡献，他们的目标也是期望整个互联网的发展态势稳定统一起来。不扯远了，回到本文需要阐述的重点：如何语义化 JavaScript 代码？','https://net.lnmpa.top/thumbnail/2019/09/762e70d82c4508de1ead5bbae51f9844.png-water','<p class=\"p1\">语义化这个词在 HTML 中用的比较多，即根据内容的结构化选择合适的标签。其作用不容小觑：</p>\n<ul class=\"ul1\">\n<li class=\"li3\">赋予标签含义，让代码结构更加清晰，虽然我们可以在标签上添加 class 来标识，但这种通过属性来表示本体的形式会显得不够直接，而且在一定程度上也有冗余。</li>\n<li class=\"li3\">优化搜索引擎（SEO），结构良好的网页对搜索引擎的亲和力是很高的，百度和 google 也给出了很多网页结构化的建议（规范），方便他们抓取网页。</li>\n<li class=\"li3\">利于设备解析，如盲人阅读器对页面的分析，目前淘宝很多网页都是支持盲人阅读的，这种体验上的优化得利于网页的良好结构和语义化表达。</li>\n<li class=\"li3\">便于开发者维护，在参加工作之前，很多程序员都是单人开发模式，单人开发无所谓代码结构，自己看得懂就差不多了，一旦走向工作岗位，会发现，以前的鄙习有点让自己捉襟见肘了。</li>\n</ul>\n<p class=\"p2\">W3C Group 工作组在 web 规范上持续贡献，他们的目标也是期望整个互联网的发展态势稳定统一起来。不扯远了，回到本文需要阐述的重点：如何语义化 JavaScript 代码？</p>\n<p class=\"p2 article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/09/762e70d82c4508de1ead5bbae51f9844.png-water\" alt=\"\" width=\"512\" height=\"512\" /></p>\n<h3 id=\"p-1\" class=\"p4\"><strong>一、先看看那些不易读懂的 JavaScript 代码</strong></h3>\n<p class=\"p2\"><strong>1. 判断</strong></p>\n<pre class=\"language-javascript\"><code>// 数据类型判断\nif(Object.prototype.toString.call(str) === &ldquo;[object String]&rdquo;){\n    // doSomething();\n}；\n \n// 文件类型判断\nif(/.*\\.css(?=\\?|$)/.test(&ldquo;/path/to/main.css&rdquo;)){\n    // doSomething();\n}</code></pre>\n<p class=\"p2\"><strong>2. 清空一个队列</strong></p>\n<pre class=\"language-javascript\"><code>var Queue = [\"test1\", \"test2\", \"test3\"];\n// 常见方式\nQueue.length = 0;\nQueue = []; </code></pre>\n<p class=\"p2\"><strong>3. 注册一个变量</strong></p>\n<pre class=\"language-javascript\"><code>// 注册\nvar repos = {};\n \nrepos[&ldquo;a&rdquo;] = {\n   name: &ldquo;a&rdquo;,\n   content: {}\n};\n \nrepos[&ldquo;b&rdquo;] = {\n   name: &ldquo;b&rdquo;,\n   content: {}\n};</code></pre>\n<p class=\"p2\">上面几个例子倒不至于看不懂，程序都特别简单，第一个例子中，我们通过 Object 原型链上的 toString 方法来判断一个变量是否为 string 类型，以及使用正则来判断一个文件是不是 css 文件。代码写起来比较轻松，倘若我们同时需要判断多个对象是否为多个类型中的一种呢？再比如我们需要在一串代码中提取 require 依赖关系呢，是否应该思考下如何组织自己的代码？</p>\n<p class=\"p2\">在第二个例子中，将数组的长度设置为 0，或者使用空数组来重置这个变量，都是十分常见的方式，但目前的场景是清空一个队列，我们是否可以使用更加语义化的形式来呈现？比如我们只需要清空该队列的前五个和后三个 item 呢？</p>\n<p class=\"p2\">第三个例子中，变量的注册，把一堆注册放在一起，上面的形式确实也是一目了然，如果 a b c d 等都是分隔穿插在几百行代码之间呢？突然来个 repos[\"x\"] 这样是否显得有些不太直观。</p>\n<p class=\"p2\">为了说明本文所倡导的思想，上面的几个解释都有些含糊和牵强，请往下看。</p>\n<h3 id=\"p-2\" class=\"p4\"><strong>二、提高代码语义性</strong></h3>\n<p class=\"p2\">针对上述三个案例，用更加语义化的方式来呈现代码：</p>\n<p class=\"p2\"><strong>1. 语义化变量</strong></p>\n<pre class=\"language-javascript\"><code>// 类型判断\nfunction isType(type){\n    return function(o){\n        return Object.prototype.toString.call(o) === \'[object \' + type + \']\';\n    }\n}\n \nvar isString = isType(&ldquo;String&rdquo;);\nvar isObject = isType(\"Object\");\nvar isArray = isType(\"Array\");\n \nisString(\"I\'m Barret Lee.\");\nisArray([1,2,3])；\nisObject({});</code></pre>\n<p class=\"p2\">我觉得不需要太多的解释，对比</p>\n<pre class=\"language-javascript\"><code>if(Object.prototype.toString.call(str) === &ldquo;[object String]&rdquo;){\n    // code here...\n}</code></pre>\n<p>显得清新多了吧。</p>\n<pre class=\"language-javascript\"><code>// 提取常量\nvar isCss = /.*\\.css(?=\\?|$)/;\nisCss.test(&ldquo;/path/to/main.css&rdquo;);</code></pre>\n<p class=\"p2\">不管 isCss 这个正则代码有多长，当我们看到 isCss 这个单词就可以顾名思义。很多人写正则都不会将正则单独提取出来使用某个有意义的变量去存储，加注释还好，要是不加注释，后续开发者就只能硬着头皮看懂正则去理解代码的含义。</p>\n<p class=\"p2\">这样的处理，实际上是增加了代码量，不过从工程角度去审视，有助于提高开发效率以及代码的组织性。</p>\n<p class=\"p2\"><strong>2. 语义化行为</strong></p>\n<pre class=\"language-javascript\"><code>var Queue = [\"test1\", \"test2\", \"test3\"];\nQueue.splice(0, Queue.length);</code></pre>\n<p class=\"p2\">上面代码具有很强的语义性，从索引为 0 的地方开始，直到队列最后，删除 Queue 中所有的 item。这种写法的扩展性也更好：</p>\n<pre class=\"language-javascript\"><code>Queue.splice(2, 4); // 删除从索引为 2，往后的 4 个元素</code></pre>\n<p class=\"p2\">这只是个小例子，有些行为是需要很多代码组合处理的，如果没有很好的组合同一行为的代码，整个结构就显得十分涣散，不利于阅读。</p>\n<pre class=\"language-javascript\"><code>// 注册\nvar repos = [];\n \nfunction register(o){\n   repos[o.name] = o;\n}\n \nregister({\n  name: &ldquo;a&rdquo;,\n  content: {}\n});</code></pre>\n<p class=\"p2\">对比我们之前</p>\n<pre class=\"language-javascript\"><code>repos[&ldquo;a&rdquo;] = {\n   name: &ldquo;a&rdquo;,\n   content: {}\n};</code></pre>\n<p class=\"p5\">语义化程度是不是有所提高~</p>\n<h3 id=\"p-3\" class=\"p4\"><strong>三、小结</strong></h3>\n<p class=\"p2\">代码的优化，需要考虑的维度很多。但是代码的优化并不是减少代码量，有的时候我们需要增加代码来提高代码的可阅读性。</p>\n<ul class=\"ul1\">\n<li class=\"li3\">正确标记变量</li>\n<li class=\"li3\">封装某个动作</li>\n<li class=\"li3\">注意函数的写法</li>\n<li class=\"li3\">不容易理解的东西，加注释</li>\n</ul>\n<p class=\"p2\">本文为抛砖引玉，希望可以触发你对代码优化的敏感度的思考，写出一手别人竖拇指的代码~</p>','2014-08-27 11:27:09','2019-09-18 03:31:04','2019-09-18 07:24:45',NULL),(32,1,1,0,17,'CSS编写指导规范和建议','Guidelines and Suggestions for CSS Writing','guidelines-and-suggestions-for-css-writing','https://linux.cn/article-3711-1.html','在参与规模庞大、历时漫长且参与人数众多的项目时，所有开发者遵守如下规则极为重要：\n\n保持 CSS 易于维护\n保持代码清晰易懂\n保持 CSS 的可拓展性\n为了实现这一目标，我们要采用诸多方法。','https://net.lnmpa.top/thumbnail/2019/09/66a2dee33cfd9d2d83253e33162b767c.jpg-water','<p>在参与规模庞大、历时漫长且参与人数众多的项目时，所有开发者遵守如下规则极为重要：</p>\n<ul class=\"task-list\">\n<li>保持 CSS 易于维护</li>\n<li>保持代码清晰易懂</li>\n<li>保持 CSS 的可拓展性</li>\n</ul>\n<p>为了实现这一目标，我们要采用诸多方法。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/09/66a2dee33cfd9d2d83253e33162b767c.jpg-water\" alt=\"\" width=\"700\" height=\"260\" /></p>\n<p>本文档第一部分将探讨语法、格式以及分析 CSS 结构；第二部分将围绕方法论、思维框架以及编写与规划 CSS 的看法。</p>\n<hr />\n<h2>CSS 文档分析</h2>\n<p>无论编写什么文档，我们都应当维持统一的风格，包括统一的注释、统一的语法与统一的命名规范。</p>\n<h3>总则</h3>\n<p>将行宽控制在 80 字节以下。渐变（gradient）相关的语法以及注释中的 URL 等可以算作例外，毕竟这部分我们也无能为力。</p>\n<p>我倾向于用 4 个空格而非 Tab 缩进，并且将声明拆分成多行。</p>\n<h3>单一文件与多文件</h3>\n<p>有人喜欢在一份文件文件中编写所有的内容，而我在迁移至 Sass 之后开始将样式拆分成多个小文件。这都是很好的做法。无论你选择哪种，下文的规则都将适用，而且如果你遵守这些规则的话你也不会遇到什么问题。这两种写法的区别仅仅在于目录以及区块标题：</p>\n<h3>目录</h3>\n<p>在 CSS 的开头，我会维护一份目录，就像这样：</p>\n<pre class=\"language-scss\"><code>/*------------------------------------*\\\n    $CONTENTS\n\\*------------------------------------*/\n/**\n * CONTENTS............You&rsquo;re reading it!\n * RESET...............Set our reset defaults\n * FONT-FACE...........Import brand font files\n */</code></pre>\n<p>这份目录可以告诉其他开发者这个文件中具体含有哪些内容。这份目录中的每一项都与其对应的区块标题相同。</p>\n<p>如果你在维护一份单文件 CSS，对应的区块将也在同一文件中。如果你是在编写一组小文件，那么目录中的每一项应当对应相应的 @include 语句。</p>\n<h3>区块标题</h3>\n<p>目录应当对应区块的标题。如下：</p>\n<pre class=\"language-scss\"><code>/*------------------------------------*\\\n    $RESET\n\\*------------------------------------*/</code></pre>\n<p>区块标题前缀&nbsp;$&nbsp;可以让我们使用 [Cmd|Ctrl]+F 命令查找标题名时将搜索范围限制在区块标题中。</p>\n<p>如果你在维护一份大文件，那么在区块之间空 5 行，如下：</p>\n<pre class=\"language-scss\"><code>/*------------------------------------*\\\n    $RESET\n\\*------------------------------------*/\n[Our\nreset\nstyles]\n \n \n \n \n \n/*------------------------------------*\\\n    $FONT-FACE\n\\*------------------------------------*/</code></pre>\n<p>在大文件中快速翻动时这些大块的空档有助于区分区块。</p>\n<p>如果你在维护多份以 include 连接的 CSS 的话，在每份文件头加上标题即可，不必这样空行。</p>\n<h2>代码顺序</h2>\n<p>尽量按照特定顺序编写规则，这将确保你充分发挥 CSS 中第一个&nbsp;<em>C</em>&nbsp;的意义：cascade，层叠。</p>\n<p>一份规划良好的 CSS 应当按照如下排列：</p>\n<ol class=\"task-list\">\n<li>Reset&nbsp;万物之根源</li>\n<li>元素类型&nbsp;没有 class 的&nbsp;h1、ul&nbsp;等</li>\n<li>对象以及抽象内容&nbsp;最一般、最基础的设计模式</li>\n<li>子元素&nbsp;由对象延伸出来的所有拓展及其子元素</li>\n<li>修补&nbsp;针对异常状态</li>\n</ol>\n<p>如此一来，当你依次编写 CSS 时，每个区块都可以自动继承在它之前区块的属性。这样就可以减少代码相互抵消的部分，减少某些特殊的问题，组成更理想的 CSS 结构。</p>\n<p>关于这方面的更多信息，强烈推荐 Jonathan Snook 的&nbsp;<a class=\"ext\" href=\"http://smacss.com/\" target=\"_blank\" rel=\"external nofollow noopener\">SMACSS</a>。</p>\n<h2>CSS 样式集分析</h2>\n<pre class=\"language-scss\"><code>[selector]{\n    [property]:[value];\n    [&lt;- Declaration -&gt;]\n}\n \n[选择器]{\n    [属性]:[值];\n    [&lt;- 声明 -&gt;]\n}</code></pre>\n<p>编写 CSS 样式时，我习惯遵守这些规则：</p>\n<ul class=\"task-list\">\n<li>class 名称以连字符（-）连接，除了下文提到的 BEM 命名法；</li>\n<li>缩进 4 空格；</li>\n<li>声明拆分成多行；</li>\n<li>声明以相关性顺序排列，而非字母顺序；</li>\n<li>有前缀的声明适当缩进，从而对齐其值；</li>\n<li>缩进样式集从而反映 DOM；</li>\n<li>保留最后一条声明结尾的分号。</li>\n</ul>\n<p>例如：</p>\n<pre class=\"language-scss\"><code>.widget{\n    padding:10px;\n    border:1px solid #BADA55;\n    background-color:#C0FFEE;\n    -webkit-border-radius:4px;\n       -moz-border-radius:4px;\n            border-radius:4px;\n}\n    .widget-heading{\n        font-size:1.5rem;\n        line-height:1;\n        font-weight:bold;\n        color:#BADA55;\n        margin-right:-10px;\n        margin-left: -10px;\n        padding:0.25em;\n    }</code></pre>\n<p>我们可以发现，.widget-heading&nbsp;是&nbsp;.widget&nbsp;的子元素，因为前者的样式集比后者多缩进了一级。这样通过缩进就可以让开发者在阅读代码时快速获取这样的重要信息。</p>\n<p>我们还可以发现&nbsp;.widget-heading&nbsp;的声明是根据其相关性排列的：.widget-heading&nbsp;是行间元素，所以我们先添加字体相关的样式声明，接下来是其它的。</p>\n<p>以下是一个没有拆分成多行的例子：</p>\n<pre class=\"language-scss\"><code>.t10    { width:10% }\n.t20    { width:20% }\n.t25    { width:25% }       /* 1/4 */\n.t30    { width:30% }\n.t33    { width:33.333% }   /* 1/3 */\n.t40    { width:40% }\n.t50    { width:50% }       /* 1/2 */\n.t60    { width:60% }\n.t66    { width:66.666% }   /* 2/3 */\n.t70    { width:70% }\n.t75    { width:75% }       /* 3/4*/\n.t80    { width:80% }\n.t90    { width:90% }</code></pre>\n<p>在这个例子（来自<a class=\"ext\" href=\"https://github.com/csswizardry/inuit.css/blob/master/inuit.css/partials/base/_tables.scss#L88\" target=\"_blank\" rel=\"external nofollow noopener\">inuit.css&rsquo;s table grid system</a>）中，将 CSS 放在一行内可以使得代码更紧凑。</p>\n<h2>命名规范</h2>\n<p>一般情况下我都是以连字符（-）连接 class 的名字（例如&nbsp;.foo-bar&nbsp;而非.foo_bar&nbsp;或&nbsp;.fooBar），不过在某些特定的时候我会用 BEM（Block, Element, Modifier）命名法。</p>\n<p>BEM 命名法可以使得选择器更规范，更清晰，更具语义。</p>\n<p>该命名法按照如下格式：</p>\n<pre class=\"language-scss\"><code>.block{}\n.block__element{}\n.block--modifier{}</code></pre>\n<p>其中：</p>\n<ul class=\"task-list\">\n<li>.block&nbsp;代表某个基本的抽象元素；</li>\n<li>.block__element&nbsp;代表构成&nbsp;.block&nbsp;的一个子元素；</li>\n<li>.block--modifier&nbsp;代表&nbsp;.block&nbsp;的某个不同状态或版本。</li>\n</ul>\n<p>打个比方：</p>\n<pre class=\"language-scss\"><code>.person{}\n.person--woman{}\n    .person__hand{}\n    .person__hand--left{}\n    .person__hand--right{}</code></pre>\n<p>这个例子中我们描述的基本元素是一个人，然后这个人可能是一个女人。我们还知道人拥有手，这些是人体的一部分，而手也有不同的状态，如同左手与右手。</p>\n<p>这样我们就可以根据亲元素来划定选择器的命名空间并传达该选择器的职能，例如根据这个选择器是一个子元素（__）还是其亲元素的不同状态（--）。</p>\n<p>由此，.page-wrapper&nbsp;是一个独立的选择器。这是一个符合规范的命名，因为它不是其它元素的子元素或其它状态；然而&nbsp;.widget-heading&nbsp;则与其它对象有关联，它应当是&nbsp;.widget&nbsp;的子元素，所以我们应当将其重命名为.widget__heading。</p>\n<p>BEM 命名法虽然不太好看，而且相当冗长，但是它使得我们可以通过名称快速获知元素的功能和元素之间的关系。与此同时，BEM 语法中的重复部分非常有利于 gzip 的压缩算法。</p>\n<p>无论你是否使用 BEM 命名法，你都应当确保 class 命名得当，力保一字不多、一字不少；将元素命名抽象化以提高复用性（例如&nbsp;.ui-list，.media）。子元素的命名则要尽量精准（例如&nbsp;.user-avatar-link）。不用担心 class 名的数量或长度，因为写得好的代码 gzip 也能有效压缩。</p>\n<h3>HTML 中的 class</h3>\n<p>为了确保易读性，在 HTML 标记中用两个空格隔开 class 名，例如：</p>\n<pre class=\"language-markup\"><code>&lt;div class=\"foo--bar  bar__baz\"&gt;</code></pre>\n<p>增加的空格应当可以使得在使用多个 class 时更易阅读与定位。</p>\n<h3>JavaScript 钩子</h3>\n<p>切勿将标记 CSS 样式的 class 用作 JavaScript 钩子。把 JS 行为与样式混在一起将无法对其分别处理。</p>\n<p>如果你要把 JS 和某些标记绑定起来的话，写一个 JS 专用的 class。简单地说就是划定一个前缀&nbsp;.js-&nbsp;的命名空间，例如&nbsp;.js-toggle，.js-drag-and-drop。这意味着我们可以通过 class 同时绑定 JS 和 CSS 而不会因为冲突而引发麻烦。</p>\n<pre class=\"language-markup\"><code>&lt;th class=\"is-sortable  js-is-sortable\"&gt;\n&lt;/th&gt;</code></pre>\n<p>上面的这个标记有两个 class，你可以用其中一个来给这个可排序的表格栏添加样式，用另一个添加排序功能。</p>\n<h3>I18n</h3>\n<p>虽然我（该 CSS Guideline 文档原作者 Harry Roberts）是个英国人，而且我一向拼写&nbsp;<em>colour</em>&nbsp;而非&nbsp;<em>color</em>，但是为了追求统一，我认为在 CSS 中用美式拼法更佳。CSS 以及其它多数语言都是以美式拼法编写，所以如果在&nbsp;.colour-picker{}&nbsp;中写&nbsp;color:red&nbsp;就缺乏统一性。我以前主张同时用两种拼法，例如：</p>\n<pre class=\"language-scss\"><code>.color-picker,\n.colour-picker{\n}</code></pre>\n<p>但是我最近参与了一份规模庞大的 Sass 项目，这个项目中有许多的颜色变量（例如&nbsp;$brand-color，$highlight-color&nbsp;等等），每个变量要维护两种拼法实在辛苦，要查找并替换时也需要两倍的工作量。</p>\n<p>所以为了统一，把所有的 class 与变量都以你参与的项目的惯用拼法命名即可。</p>\n<h2>注释</h2>\n<p>我使用行宽不超过 80 字节的文档块风格注释：</p>\n<pre class=\"language-sass\"><code>/**\n * This is a docBlock style comment\n * \n * This is a longer description of the comment, describing the code in more\n * detail. We limit these lines to a maximum of 80 characters in length.\n * \n * We can have markup in the comments, and are encouraged to do so:\n * \n   &lt;div class=foo&gt;\n       &lt;p&gt;Lorem&lt;/p&gt;\n   &lt;/div&gt;\n * \n * We do not prefix lines of code with an asterisk as to do so would inhibit\n * copy and paste.\n */\n \n \n/**\n * 这是一个文档块（DocBlock）风格的注释。\n *\n * 这里开始是描述更详细、篇幅更长的注释正文。当然，我们要把行宽控制在 80 字节以内。\n *\n * 我们可以在注释中嵌入 HTML 标记，而且这也是个不错的办法：\n *\n    &lt;div class=foo&gt;\n        &lt;p&gt;Lorem&lt;/p&gt;\n    &lt;/div&gt;\n *\n * 如果是注释内嵌的标记的话，在它前面不加星号，以免被复制进去。\n */</code></pre>\n<p>在注释中应当尽量详细描述代码，因为对你来说清晰易懂的内容对其他人可能并非如此。每写一部分代码就要专门写注释以详解。</p>\n<h3>注释的拓展用法</h3>\n<p>注释有许多很高级的用法，例如：</p>\n<ul class=\"task-list\">\n<li>准修饰选择器（Quasi-qualified selectors）</li>\n<li>代码标签</li>\n<li>继承标记</li>\n</ul>\n<h4>准修饰选择器（Quasi-qualified selectors）</h4>\n<p>你应当避免过分修饰选择器，例如如果你能写&nbsp;.nav{}&nbsp;就尽量不要写ul.nav{}。过分修饰选择器将影响性能，影响 class 复用性，增加选择器私有度。这些都是你应当竭力避免的。</p>\n<p>不过有时你可能希望告诉其他开发者 class 的使用范围。以&nbsp;.product-page为例，这个 class 看起来像是一个根容器，可能是&nbsp;html&nbsp;或者&nbsp;body&nbsp;元素，但是仅凭&nbsp;.product-page&nbsp;则无法判断。</p>\n<p>我们可以在选择器前加上准修饰（即将前面的类型选择器注释掉）来描述我们规划的 class 作用范围：</p>\n<pre class=\"language-markup\"><code>/*html*/.product-page{}</code></pre>\n<p>这样我们就能准确获知该 class 的作用范围而不会影响复用性。</p>\n<p>其它例子如：</p>\n<pre class=\"language-markup\"><code>/*ol*/.breadcrumb{}\n/*p*/.intro{}\n/*ul*/.image-thumbs{}</code></pre>\n<p>这样我们就能在不影响代码私有度的前提下获知 class 作用范围。</p>\n<h4>代码标签</h4>\n<p>如果你写了一组新样式的话，可以在它上面加上标签，例如：</p>\n<pre class=\"language-markup\"><code>/**\n * ^navigation ^lists\n */\n.nav{}\n \n/**\n * ^grids ^lists ^tables\n */\n.matrix{}</code></pre>\n<p>这些标签可以使得其他开发者快速找到相关代码。如果一个开发者需要查找和列表相关的部分，他只要搜索&nbsp;^lists&nbsp;就能快速定位到&nbsp;.nav，.matrix&nbsp;以及其它相关部分。</p>\n<h4>继承标记</h4>\n<p>将面向对象的思路用于 CSS 编写的话，你经常能找到两部分 CSS 密切相关（其一为基础，其一为拓展）却分列两处。我们可以用继承标记来在原元素和继承元素之间建立紧密联系。这些在注释中的写法如下：</p>\n<p>在元素的基本样式中：</p>\n<pre class=\"language-scss\"><code>/**\n * Extend `.foo` in theme.css\n */\n .foo{}</code></pre>\n<p>在元素的拓展样式中：</p>\n<pre class=\"language-scss\"><code>/**\n * Extends `.foo` in base.css\n */\n .bar{}</code></pre>\n<p>这样一来我们就能在两块相隔很远的代码间建立紧密联系。</p>\n<h2>编写 CSS</h2>\n<p>之前的章节主要探讨如何规划 CSS，这些都是易于量化的规则。本章将探讨更理论化的东西，也将探讨我们的态度与方法。</p>\n<h2>编写新组件</h2>\n<p>编写新组件时，要在着手处理 CSS&nbsp;之前写好 HTML 部分。这可以令你准确判断哪些 CSS 属性可以继承，避免重复浪费。</p>\n<p>先写标记的话，你就可以关注数据、内容与语义，在这之后再添加需要的 class 和 CSS 样式。</p>\n<h2>面向对象 CSS</h2>\n<p>我以面向对象 CSS 的方式写代码。我把组件分成结构（对象）与外观（拓展）。正如以下分析（注意此处并非示例）：</p>\n<pre class=\"language-scss\"><code>.room{}\n \n.room--kitchen{}\n.room--bedroom{}\n.room--bathroom{}</code></pre>\n<p>我们在屋子里有许多房间，它们都有共同的部分：地板、天花板、墙壁和门。这些共享的部分我们可以放到一个抽象的&nbsp;.room{}&nbsp;class 中。不过我们还有其它与众不同的房间：一个厨房可能有地砖，卧室可能有地毯，洗手间可能没有窗户但是卧室会有，每个房间的墙壁颜色也许也会不一样。面向对 象 CSS 的思路使得我们把相同部分抽象出来组成结构部分，然后用更具体的 class 来拓展这些特征并添加特殊的处理方法。</p>\n<p>所以比起编写大量各自不同的模块，应当努力找出这些模块中重复的设计模式并将其抽象出来，写成一个可以复用的 class，将其用作基础然后编写其它拓展模块的特殊情形。</p>\n<p>当你要编写一个新组件时，将其拆分成结构和外观。编写结构部分时用最通用 class 以保证复用性，编写外观时用更具体的 class 来添加设计方法。</p>\n<h2>布局</h2>\n<p>所有组件都不要声明宽度，而由其亲元素或格栅系统来决定。</p>\n<p>坚决不要声明高度。高度应当仅仅用于尺寸已经固定的东西，例如图片和 CSS Sprite。在&nbsp;p，ul，div&nbsp;等元素上不应当声明高度。如果需要的话可以使用更加灵活的&nbsp;line-height。</p>\n<p>格栅系统应当当作书架来理解。是它们容纳内容，而不是把它们本身当成内容装起来，正如你先搭起书架再把东西放进去。比起声明它们的尺寸，把格栅系统和元素的其它属性分来开处理更有助于布局，也使得我们的前端工作更高效。</p>\n<p>你在格栅系统上不应当添加任何样式，它们仅仅是为布局而用。在格栅系统内部再添加样式。在格栅系统中任何情况下都不要添加盒模型相关属性。</p>\n<h2>UI 尺寸</h2>\n<p>我用很多方法设定 UI 尺寸，包括百分比，px，em，rem&nbsp;以及干脆什么都不用。</p>\n<p>理想情况下，格栅系统应当用百分比设定。如上所述，因为我用格栅系统来固定栏宽和页宽，所以我可以不用理会元素的尺寸。</p>\n<p>我用 rem 定义字号，并且辅以 px 以兼容旧浏览器。这可以兼具 em 和 px 的优势。下面是一个非常漂亮的 Sass Mixin，假设你在别处声明了基本字号（base-font-size）的话，用它就可以生成 rem 以及兼容旧浏览器的 px。</p>\n<pre class=\"language-scss\"><code>@mixin font-size($font-size){\n    font-size:$font-size +px;\n    font-size:$font-size / $base-font-size +rem;\n}</code></pre>\n<p>我只在已经固定尺寸的元素上使用 px，包括图片以及尺寸已经用 px 固定的 CSS Sprite。</p>\n<h3>字号</h3>\n<p>我会定义一些与格栅系统原理类似的 class 来声明字号。这些 class 可以用于双重标题分级，关于这点请阅读&nbsp;<a class=\"ext\" href=\"http://csswizardry.com/2012/02/pragmatic-practical-font-sizing-in-css\" target=\"_blank\" rel=\"external nofollow noopener\">Pragmatic, practical font-sizing in CSS</a>。</p>\n<h2>简写</h2>\n<p>CSS 简写应当谨慎使用。</p>\n<p>编写像&nbsp;background: red;&nbsp;这样的属性的确很省事，但是你这么写的意思其实是同时声明&nbsp;background-image: none; background-position: top left; background-repeat: repeat; background-color: red;。虽然大多数时候这样不会出什么问题，但是哪怕只出一次问题就值得考虑要不要放弃简写了。这里应当改为&nbsp;background-color: red;。</p>\n<p>类似的，像&nbsp;margin: 0;&nbsp;这样的声明的确简洁清爽，但是还是应当尽量写清楚。如果你只是想修改底边边距，就要具体一些，写成&nbsp;margin-bottom: 0;。</p>\n<p>与此同时你需要声明的属性也要写清楚，不要因为简写而波及其它属性。例如如果你只想改掉底部的&nbsp;margin，那就不要用会把其它边距也清零的&nbsp;margin: 0。</p>\n<p>简写虽然好，但也很容易滥用。</p>\n<h2>ID</h2>\n<p>在我们开始处理选择器之前，牢记这句话：</p>\n<p>在 CSS 里坚决不要用 ID。</p>\n<p>在 HTML 里 ID 可以用于 JS 以及锚点定位，但是在 CSS 里只要用 class，一个 ID 也不要用。</p>\n<p>Class 的优势在于复用性，而且私有度也并不高。在项目中私有度非常容易导致问题，所以将其降低就尤为重要。ID 的私有度是 class 的&nbsp;255&nbsp;倍，所以在 CSS 中坚决不要使用。</p>\n<h2>选择器</h2>\n<p>务必保持选择器简短高效。</p>\n<p>通过页面元素位置而定位的选择器并不理想。例如&nbsp;.sidebar h3 span{}&nbsp;这样的选择器就是定位过于依赖相对位置，如果把 span 移到 h3 和 sidebar 外面时就很难保持其样式。</p>\n<p>结构复杂的选择器将会影响性能。选择器结构越复杂（如&nbsp;.sidebar h3 span为三层，.content ul p a&nbsp;是四层），浏览器的开销就越大。</p>\n<p>尽量使得样式不依赖于其定位，尽量保持选择器简洁清晰。</p>\n<p>作为一个整体，选择器应当尽量简短（例如只有一层结构），但是 class 名则不应当过于简略，例如&nbsp;.user-avatar&nbsp;就远比&nbsp;.usr-avt&nbsp;好。</p>\n<p>牢记：class 无所谓是否语义化；应当关注它们是否合理。不要强调 class 名要符合语义，而要注重使用合理且不会过时的名称。</p>\n<h3>过度修饰的选择器</h3>\n<p>由前文所述，过度修饰的选择器并不理想。</p>\n<p>过度修饰的选择器是指像&nbsp;div.promo&nbsp;这样的。很可能你只用&nbsp;.promo&nbsp;也能得到相同的效果。当然你可能偶尔会需要用元素类型来修饰 class（例如你写了一个&nbsp;.error&nbsp;而且想让它在不同的元素类型中显示效果不一样，例如&nbsp;.error { color: red; }&nbsp;div.error { padding: 14px; }），但是大多数时候还是应当尽量避免。</p>\n<p>再举一个修饰过度的选择器例子，ul.nav li a{}。如前文所说，我们马上就可以删掉&nbsp;ul&nbsp;因为我们知道&nbsp;.nav&nbsp;是个列表，然后我们就可以发现&nbsp;a&nbsp;一定在&nbsp;li&nbsp;中，所以我们就能将这个选择器改写成&nbsp;.nav a{}。</p>\n<h3>选择器性能</h3>\n<p>虽然浏览器性能日渐提升，渲染 CSS 速度越来越快，但是你还是应当关注效率。使用简短、没有嵌套的选择器，不使用全局选择器（* {}）作为核心选择器，避免使用日渐复杂的 CSS3 新选择器可以避免这样的问题。</p>\n<p>译注，核心选择器：浏览器解析选择器为从右向左的顺序，最右端的元素是样式生效的元素，是为核心选择器。</p>\n<h2>使用 CSS 选择器的目的</h2>\n<p>比起努力运用选择器定位到某元素，更好的办法是给你想要添加样式的元素直接添加一个 class。我们以&nbsp;.header ul {}&nbsp;这样一个选择器为例。</p>\n<p>假定这个&nbsp;ul&nbsp;就是这个网站的全站导航，它位于 header 中，而且目前为止是 header 中唯一的&nbsp;ul&nbsp;元素。.header ul{}&nbsp;的确可以生效，但是这样并不是好方法，它很容易过时，而且非常晦涩。如果我们在 header 中再添加一个&nbsp;ul&nbsp;的话，它就会套用我们给这个导航部分写的样式，哪怕我们设想的不是这个效果。这意味着我们要么要重构许多代码，要么给后面的&nbsp;ul&nbsp;新写许多样式来抵消之前的影响。</p>\n<p>你的选择器必须符合你要给这个元素添加样式的原因。思考一下，「我定位到这个元素，是因为它是&nbsp;.header&nbsp;下的&nbsp;ul，还是因为它是我的网站导航？」这将决定你应当如何使用选择器。</p>\n<p>确保你的核心选择器不是类型选择器，也不是高级对象或抽象选择器。例如你在我们的 CSS 中肯定找不到诸如&nbsp;.sidebar ul {}&nbsp;或者&nbsp;.footer .media {}&nbsp;这样的选择器。</p>\n<p>表达清晰：直接找到你要添加样式的元素，而非其亲元素。不要想当然地认为 HTML 不会改变。用 CSS 直接命中你需要的元素，而非投机取巧。</p>\n<p>完整内容请参考我的文章&nbsp;<a class=\"ext\" href=\"http://csswizardry.com/2012/07/shoot-to-kill-css-selector-intent/\" target=\"_blank\" rel=\"external nofollow noopener\">Shoot to kill; CSS selector intent</a></p>\n<h2>!important</h2>\n<p>只在起辅助作用的 class 上用&nbsp;!important。用&nbsp;!important&nbsp;提升优先级也可以，例如如果你要让某条规则一直生效的话，可以用&nbsp;.error { color:red!important; }。</p>\n<p>避免主动使用&nbsp;!important。例如 CSS 写得很复杂时不要用它来取巧，要好好整理并重构之前的部分，保持选择器简短并且避免用 ID 将效果拔群。</p>\n<h2>魔数与绝对定位</h2>\n<p>魔数（Magic Number）是指那些「凑巧有效果」的数字，使用魔数非常不好，因为它们只是治标不治本而且缺乏拓展性。</p>\n<p>例如使用&nbsp;.dropdown-nav li:hover ul { top: 37px; }&nbsp;把下拉菜单移动下来远非良策，因为这里的 37px 就是个魔数。37px 会生效的原因是因为这时.dropbox-nav&nbsp;碰巧高 37px 而已。</p>\n<p>这时你应该用&nbsp;.dropdown-nav li:hover ul { top: 100%; }，也即无论.dropbox-down&nbsp;多高，这个下拉菜单都会往下移动 100%。</p>\n<p>每当你要在代码中放入数字的时候，请三思而行。如果你能用一个关键字（例如&nbsp;top: 100%&nbsp;意即「从上面拉到最下面」）替换之，或者有更好的解决方法的话，就尽量避免直接出现数字。</p>\n<p>你在 CSS 中留下的每一个数字，都是你许下而不愿遵守的承诺。</p>\n<h2>条件判断</h2>\n<p>专门为 IE 写的样式基本上都是可以避免的，唯一需要为 IE 专门处理的是为了处理 IE 不支持的内容（例如 PNG）。</p>\n<p>简而言之，如果你重构 CSS 的话，所有的布局和盒模型都不用额外兼容 IE。也就是说你基本上不用&nbsp;&lt;!--[if IE 7]&gt; element{ margin-left:-9px; } &lt; ![endif]--&gt;&nbsp;或者类似的兼容 IE 的写法。</p>\n<h2>Debugging</h2>\n<p>如果你要解决 CSS 问题的话，先把旧代码拿掉再写新的。如果旧的 CSS 中有问题的话，写新代码是解决不了的。</p>\n<p>把 CSS 代码和 HTML 部分删掉，直到没有 BUG 为止，然后你就知道问题出在哪里了。</p>\n<p>有时候写上一个&nbsp;overflow: hidden&nbsp;或者其它能把问题藏起来的代码的确效果立竿见影，但是 overflow 方面可能根本就没问题。所以要治本，而不是单纯治标。</p>\n<h2>CSS 预处理器</h2>\n<p>我用 Sass。使用时应当灵活运用。用 Sass 可以令你的 CSS 更强大，但是不要嵌套得太复杂。在 Vanilla CSS 中，只在必要的地方用嵌套即可，例如：</p>\n<pre class=\"language-scss\"><code>.header{}\n.header .site-nav{}\n.header .site-nav li{}\n.header .site-nav li a{}</code></pre>\n<p>这样的写法在普通 CSS 里完全用不到。以下为不好的&nbsp;Sass 写法：</p>\n<pre class=\"language-scss\"><code>.header{\n    .site-nav{\n        li{\n            a{}\n        }\n    }\n}</code></pre>\n<p>如果你用 Sass 的话，尽量这么写：</p>\n<pre class=\"language-scss\"><code>.header{}\n.site-nav{\n    li{}\n    a{}\n}</code></pre>','2014-08-29 15:13:26','2019-09-18 07:22:38','2019-09-18 07:22:38',NULL),(33,3,1,0,19,'把你的树莓派打造成一个NAS','Make your raspberry pie a NAS','make-your-raspberry-pie-a-nas','https://linux.cn/article-1745-1.html','你有闲置的移动硬盘和树莓派吗？你可以用这些来打造一个廉价而且低能耗的NAS。最后的效果肯定比不上售价500美刀的NAS，比如Synology DiskStation出品的那些。但可以搭建出一个低能耗的网络存储平台——而且特别适用于已经厌倦了国家安全局的数据监控的那些人，你可以把数据藏在这个“小阁楼”里。','https://net.lnmpa.top/thumbnail/2019/09/27132c99c88dea1777351d5f4f92c4f3.jpg-water','<p class=\"article_img\">你有闲置的移动硬盘和树莓派吗？你可以用这些来打造一个廉价而且低能耗的NAS。最后的效果肯定比不上售价500美刀的NAS，比如Synology DiskStation出品的那些。但可以搭建出一个低能耗的网络存储平台&mdash;&mdash;而且特别适用于已经厌倦了国家安全局的数据监控的那些人，你可以把数据藏在这个&ldquo;小阁楼&rdquo;里。<br /><img class=\"aligncenter size-full wp-image-2773\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201308/06/2003487lb1l9bgtl71gya1.jpg\" alt=\"featured-pi-nas\" width=\"300\" height=\"300\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>featured-pi-nas</em></p>\n<p class=\"article_img\">你需要一个树莓派，和一两个闲置着的移动硬盘。体积较小的2.5硬盘可以由USB接口直接供电，但是我们需要一个带有供电功能的USB分线器，因为树莓派的USB接口提供的电是不足以给移动硬盘供电的。除此之外你也可以用thumbdrive，甚至是一张SD卡。事实上我现在在用的就是一个USB口的移动硬盘和一个thumbdrive搭建的，操作流程都是一样的。<br /><img class=\"aligncenter size-full wp-image-2772\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201308/06/200350nz9n6oinf1i3m9ts.jpg\" alt=\"ubs-drives\" width=\"590\" height=\"384\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>ubs-drives</em></p>\n<p>只用一个硬盘，也可以搭建分享文件的网络存储器，但是用两个硬盘，就可以设置数据备份，以防有一个硬盘坏掉。</p>\n<h2>准备硬盘</h2>\n<p>最初的步骤是在台式机上格式化硬盘。这是为了方便，如果出了问题，我们可以把硬盘从NAS上拔下来，还可以在一台PC上读上面的数据。</p>\n<p>可以在树莓派上格式化，但是会花上几个小时，从台式机上格式化会快很多。现在就去做吧。</p>\n<p>设置SSH，开启root用户，首先为root用户设置密码：</p>\n<pre class=\"language-bash\"><code>sudo -i\npasswd root</code></pre>\n<p>(输入你的密码)</p>\n<p class=\"article_img\">然后在命令行下面运行raspi-config脚本，可以用sudo命令，也可以注销当前用户，然后以root用户的身份登陆。在高级选项菜单中，开启SSH。<br /><img class=\"aligncenter size-full wp-image-2771\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201308/06/200351915y6lkxb81lb9ex.jpg\" alt=\"advanced-options\" width=\"562\" height=\"338\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>advanced-options</em></p>\n<p>重启后，你应该可以从联网的另一台机器登陆（如果在windows上，可以使用Putty）：<br />SSH root@[IP地址]</p>\n<p>登陆之后，搞清楚插上去的硬盘在/dev下面的编号是什么。下文假设使用两个硬盘，创建数据备份。输入</p>\n<pre class=\"language-bash\"><code>fdisk -l</code></pre>\n<p class=\"article_img\">会显示出已经挂载的存储设备。你应该看到类似于这样的画面：<br /><img class=\"aligncenter size-full wp-image-2770\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201308/06/200353cpxwfwdeeefe1dee.jpg\" alt=\"fdsik\" width=\"553\" height=\"431\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>fdsik</em></p>\n<p>/dev/mmc是树莓派系统的分区，mmc指的是SD卡。/dev/sda1和/dev/sdb1和SD卡没有关系，这些是你插上去的USB硬盘（本意是SCSI驱动器，但是现在用来指任何SATA口的或其他存储器）</p>\n<p>安装ntfs-3g模块，于是我们就能读写NTFS格式的硬盘了。<br />apt-get install ntfs-3g</p>\n<p>然后创建一个目录，以这个目录作为挂载点挂载硬盘。为简单起见，下文用1和2来指代。</p>\n<pre class=\"language-bash\"><code>mkdir /media/1\nmkdir /media/2\nmount -t auto /dev/sda1 /media/1\nmount -t auto /dev/sdb1 /media/2\nmkdir /media/1/shares\nmkdir /media/2/shares</code></pre>\n<h2>Samba</h2>\n<p>下一步我们来设置Samba。Samba是Windows使用的网络文件共享协议（事实上最新的OSX Mavericks也支持）</p>\n<pre class=\"language-bash\"><code>apt-get install samba\napt-get install samba-common-bin\ncp /etc/samba/smb.conf /etc/samba/smb.conf.bak\nnano /etc/samba/smb.conf</code></pre>\n<p>如果你不熟悉这类配置文件，行首的＃表示这一行是注释，于是这一行的配置也就不会生效。要开启一项功能，可以自己添加一行，也可以把某一行前面的注释符号去掉，让它生效。</p>\n<p>我们先来启动用户安全；按下CTRL-W然后输入&rdquo;security&rdquo;，来找到相关的选项。去掉这一行前面的注释符号：<br />security = user</p>\n<p>然后，移动到文本末尾（或者按住CTRL V直到移动到了末尾），添加网络共享，数目取决于你自己的需求。使用这种格式：</p>\n<pre class=\"language-bash\"><code>[test] comment = Test share\npath = /media/1/shares\nvalid users = @users\nforce group = users\ncreate mask = 0660\ndirectory mask = 0771\nread only = no</code></pre>\n<p>只有第一块硬盘的配置&mdash;&mdash;之后我们将用第二块硬盘和第一块同步，以进行备份。</p>\n<p class=\"article_img\">完成编辑之后，按下CTRL X然后按y来退出。<br /><img class=\"aligncenter size-full wp-image-2769\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201308/06/2003553tpq366d6m1zt6ot.jpg\" alt=\"samba-config\" width=\"567\" height=\"509\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>samba-config</em></p>\n<p>然后用下面的命令重启Samba。</p>\n<pre class=\"language-bash\"><code>service samba restart</code></pre>\n<p>现在给你的树莓派添加一个用户，假设你不想用同一个用户来访问（下文的&rdquo;jamie&rdquo;是用户名）</p>\n<pre class=\"language-bash\"><code>useradd jamie -m -G users</code></pre>\n<p>输入下面的命令给新用户设置密码，完成后确认。</p>\n<pre class=\"language-bash\"><code>passwd jamie</code></pre>\n<p>然后我们把这个用户加入到Samba中。你需要两次确认你的密码。</p>\n<pre class=\"language-bash\"><code>smbpasswd -a jamie</code></pre>\n<p class=\"article_img\">然后就去测试网络存储功能吧，应该可以在其他机器上看到了（Windows或Mac），而且你应该可以往上面写入文件。<br /><img class=\"aligncenter size-full wp-image-2768\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201308/06/200357vrstccresc2lkrp2.jpg\" alt=\"file-on-nas\" width=\"590\" height=\"432\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>file-on-nas</em></p>\n<p>现在还剩一个问题，你重启树莓派，驱动器的挂载就会失效。为了解决这个问题，我们需要安装autofs。</p>\n<pre class=\"language-bash\"><code>apt-get install autofs\nnano /etc/auto.master</code></pre>\n<p><br />在+auto.master下面加入一行：</p>\n<pre class=\"language-bash\"><code>/media/ /etc/auto.ext-usb &ndash;timeout=10,defaults,user,exec,uid=1000</code></pre>\n<p>现在就可以安全重启，不会破坏配置了。</p>\n<h2>数据备份</h2>\n<p>如果你安装了两个硬盘，我们现在就可以用一个脚本来同步数据，如果一块硬盘坏了，还有一份备份的。我们用rsync来做备份。</p>\n<pre class=\"language-bash\"><code>apt-get install rsync\ncrontab -e</code></pre>\n<p>linux下面的crontab是用来自动运行某个任务的一个软件。我曾经在《<a class=\"external ext\" href=\"http://www.makeuseof.com/tag/automate-wordpress-backup-simple-shell-scripting-cron/\" target=\"_blank\" rel=\"external nofollow noopener\">自动备份你的网站</a>》中简要提到过。加上这一行：</p>\n<pre class=\"language-bash\"><code>30 5 * * * rsync -av &ndash;delete /media/1/shares /media/2/shares/</code></pre>\n<p>数字的格式是这样子的：<br />分钟｜小时｜一个月中哪一天｜月份｜一个星期中哪一天</p>\n<p>所以我们加进去的那一行，rsync命令会在每天的早晨5点30分运行（＊通配符表示&ldquo;所有&rdquo;，所以会在&ldquo;每个月的每一天&rdquo;运行）</p>\n<p>如果你想立刻进行一次备份，只要粘贴这个rsync的命令：</p>\n<pre class=\"language-bash\"><code>rsync -av &ndash;delete /media/1/shares /media/2/shares/</code></pre>\n<p>取决于共享文件夹里放的东西，耗费的时间可能只要几秒钟，也可能会长一些，在完成之后会给你一个报告。rsync最棒的地方在于它会记录哪些文件更新了，哪些文件添加近来或是应该被删除。你可以再试一遍那个命令，应该立刻就会完成的，因为rsync知道没有文件发生了变动。</p>\n<p>教程到这里就结束了&mdash;&mdash;现在你搭建起了自己的NAS，虽然细节上有待改进，但是现在就可以用起来了。虽然没有市面上出售的NAS那些华丽的特性，但是它也能漂亮地完成任务，而且耗电会少很多。</p>\n<p>有问题请在评论区提出，我会尽力帮忙的，但是请确定你在使用最新的树莓派系统镜像。</p>\n<p>&nbsp;</p>\n<hr />\n<p>原文链接：&nbsp;<a class=\"external ext\" href=\"http://www.makeuseof.com/tag/turn-your-raspberry-pi-into-a-nas-box/\" target=\"_blank\" rel=\"external nofollow noopener\">James Bruce</a>&nbsp;翻译：&nbsp;<a class=\"external ext\" href=\"http://www.geekfan.net/\" target=\"_blank\" rel=\"external nofollow noopener\">极客范&nbsp;</a>-&nbsp;<a class=\"external ext\" href=\"http://www.geekfan.net/author/kongchuijin/\" target=\"_blank\" rel=\"external nofollow noopener\">孔垂瑾</a><br /><br />译文链接：&nbsp;<a class=\"external ext\" href=\"http://www.geekfan.net/2767/\" target=\"_blank\" rel=\"external nofollow noopener\">http://www.geekfan.net/2767/</a></p>','2014-08-06 15:27:12','2019-09-18 07:33:52','2019-09-18 22:18:03',NULL),(34,3,1,0,17,'教你用树莓派打造一个家庭影院','Teach you how to build a home theater with raspberry pie','teach-you-how-to-build-a-home-theater-with-raspberry-pie','https://linux.cn/article-1746-1.html','在四周的时间里，我用各种各样的方式折腾树莓派，例如用来浏览网页，用来跑日常的一些计算任务，以及折腾网络设置（以太网和USB无线网）。但是折腾树莓派是不是会有个穷尽？还是说我会一直对折腾它感兴趣，把它一直放在架子上，想出当一个有用的点子的时候就打开它？\n\n在MakeUseOf我们已经一同探究了树莓派各式各样的用法，但是还有一种非常流行的用法，就是利用树莓派做一个流媒体或家庭影院系统。\n\n当我在写这篇文章的时候，传统的报刊杂志正在说，仅售22英镑的智能电视即将来临，树莓派当然可以把普通的纯平LCD或等离子电视变成智能电视，感谢有人移植XBMC这个流行的软件，为我们带来了Raspbmc。','https://net.lnmpa.top/thumbnail/2019/09/b91c5ee6551902576f0f63e6d0734896.png-water','<p>在四周的时间里，我用各种各样的方式折腾树莓派，例如用来浏览网页，用来跑日常的一些计算任务，以及折腾网络设置（以太网和USB无线网）。但是折腾树莓派是不是会有个穷尽？还是说我会一直对折腾它感兴趣，把它一直放在架子上，想出当一个有用的点子的时候就打开它？</p>\n<p>在MakeUseOf我们已经一同探究了树莓派各式各样的用法，但是还有一种非常流行的用法，就是利用树莓派做一个流媒体或家庭影院系统。</p>\n<p>当我在写这篇文章的时候，传统的报刊杂志正在说，仅售22英镑的智能电视即将来临，树莓派当然可以把普通的纯平LCD或等离子电视变成智能电视，感谢有人移植XBMC这个流行的软件，为我们带来了Raspbmc。</p>\n<h2>准备Raspbmc</h2>\n<p>你应该已经遵照<a class=\"external ext\" href=\"http://www.makeuseof.com/tag/started-raspberry-pi/\" target=\"_blank\" rel=\"external nofollow noopener\">之前的一篇文章</a>，为树莓派安装好了Debian，而且已经能正常运行了。</p>\n<p>为了安装Raspbmc，需要准备几件东西。第一件是一张新的SD卡&mdash;&mdash;之前的那张要用在普通环境下；SD卡事实上就是树莓派的硬盘，所以如果过度写入，就只能重新刷镜像才能修复了，大概就等同于重装系统。没必要用一张新的SD卡，但是推荐用新的。一张microSD再加上一个SD卡套也是可以的。</p>\n<p class=\"article_img\">无论你选择哪种方案，卡都要先格式化，于是在进行下一步前，把卡插到读卡器中，连接到你的PC上。<br /><img class=\"aligncenter size-full wp-image-2852\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201308/06/200606rts7i45qqieyytwq.png\" alt=\"muo-raspbmc2\" width=\"480\" height=\"475\" /><br />然后，下载<a class=\"external ext\" href=\"http://download.raspbmc.com/downloads/bin/installers/raspbmc-win32.zip\" target=\"_blank\" rel=\"external nofollow noopener\">Raspbmc安装器</a>。下载完成后，解压缩并运行installer.exe文件。</p>\n<p class=\"article_img_desc\"><em>muo-raspbmc2</em></p>\n<p class=\"article_img\">你的SD卡应该会在安装窗口中显示出来，选中SD卡那一项前面的小方格，然后点击安装，软件就会把Raspbmc安装到SD卡上面。当&ldquo;恭喜&rdquo;信息出现的时候，就可以把卡拔下来，插到你的树莓派上面去了。<br /><img class=\"aligncenter size-full wp-image-2851\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201308/06/200607i8wqkp5g6z9pgixx.png\" alt=\"muo-raspbmc1\" width=\"414\" height=\"204\" /></p>\n<p class=\"article_img_desc\"><em>muo-raspbmc1</em></p>\n<h2>设置Raspbmc</h2>\n<p class=\"article_img\">把安装有Raspbmc的SD装到树莓派里，打开设备，确保设备和外网是连通的，因为在安装过程中，还有一部分数据要从网上下载，所以说连网是必须的。<br /><img class=\"aligncenter size-full wp-image-2850\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201308/06/200609wanw8ncj3nhphcqn.jpg\" alt=\"muo-raspbmc3\" width=\"563\" height=\"181\" /><br />在此过程中你什么都不用做&mdash;&mdash;除非网络连接断开了，网线传输出错了或者SD卡坏了&mdash;&mdash;所以现在可以坐下来，在等待的时候喝杯咖啡（Raspbmc的安装说明上就是这么说的！）。</p>\n<p class=\"article_img_desc\"><em>muo-raspbmc3</em></p>\n<h2>你可以用树莓派上的XBMC干什么</h2>\n<p class=\"article_img\">Raspbmc是流行的媒体中心软件XBMC移植到树莓派上的产物。所以用户界面喝功能大体上是相同的。<br /><img class=\"aligncenter size-full wp-image-2849\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201308/06/200613akkczbcq6k5j326q.jpg\" alt=\"muo-raspbmc4\" width=\"555\" height=\"339\" /><br />图片，视频以及音乐都有各自的菜单，有小软件可以收到三个地方的天气情况。媒体源需要手动添加，可以用插件管理器安装插件，有很多插件可供选择。<br /><img class=\"aligncenter size-full wp-image-2848\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201308/06/200615vd0arhr66hs8aeoi.jpg\" alt=\"muo-raspbmc5\" width=\"512\" height=\"321\" /><br />XBMC/Raspbmc最好的地方是使用简单，而且界面清爽，视觉效果也不错。</p>\n<p class=\"article_img_desc\"><em>muo-raspbmc4</em></p>\n<p>更多Raspbmc的使用说明，请前往<a class=\"external ext\" href=\"http://wiki.xbmc.org/\" target=\"_blank\" rel=\"external nofollow noopener\">XBMC wiki</a>。</p>\n<h2>改进Raspbmc</h2>\n<p>在树莓派上搭建这种媒体中心是相对简单的事情，不用再去进一步折腾，就可以连接一个媒体，享受你的（不那么繁重的）劳动成果。</p>\n<p>但是这个系统并不完美，它不支持某些文件的编码格式。MPEG-2和VC-1的解码器必须花钱买。幸运的是这些解码器相对来说不贵，可以在<a class=\"external ext\" href=\"http://www.raspberrypi.org/archives/1839\" target=\"_blank\" rel=\"external nofollow noopener\">树莓派的网站</a>找到。</p>\n<p>就算不去做这些改进，你的树莓派也已经是一个便携式家庭影院了。</p>\n<p>&nbsp;</p>\n<hr />\n<p>原文链接：&nbsp;<a class=\"external ext\" href=\"http://www.makeuseof.com/tag/raspberry-pi-home-theater-system/\" target=\"_blank\" rel=\"external nofollow noopener\">Christian Cawley</a>&nbsp;翻译：&nbsp;<a class=\"external ext\" href=\"http://www.geekfan.net/\" target=\"_blank\" rel=\"external nofollow noopener\">极客范&nbsp;</a>-&nbsp;<a class=\"external ext\" href=\"http://www.geekfan.net/author/kongchuijin/\" target=\"_blank\" rel=\"external nofollow noopener\">孔垂瑾</a><br /><br />译文链接：&nbsp;<a class=\"external ext\" href=\"http://www.geekfan.net/2847/\" target=\"_blank\" rel=\"external nofollow noopener\">http://www.geekfan.net/2847/</a></p>','2014-08-06 15:42:11','2019-09-18 07:44:00','2019-09-18 07:44:00',NULL),(35,3,1,0,18,'新OpenSUSE的树莓派镜像','New OpenSUSE Raspberry Pie Mirror','new-opensuse-raspberry-pie-mirror','https://linux.cn/article-1980-1.html','大家好！请注意，所有的openSUSE的fans们都应该读读这篇重要的文章。你有树莓派吗？你想试试openSUSE吗？你对树莓派和openSUSE很狂热吗？想不想看看它们在一起？真让人激动，ARM版的openSUSE针对树莓派平台发布了一个新的基于ARM v6的安装镜像。这个新的openSUSE镜像是内核3.6版本，带有轻量级的X11/icewm(ice 窗口管理器)，压缩后仅有82MB。\n\n不用谢我，应该谢Bernhard Wiedeman。如此酷的penSUSE镜像是他使用一个openSUSE的替代镜像自动构建的。还有，你知道它最有趣的地方是什么？Bernhard Wiedeman在一个早上只用3个小时就创建建立了它，真强啊!','https://net.lnmpa.top/thumbnail/2019/09/9b482e2487f94b120e45d557c3fdfa4b.png-water','<p class=\"p1 article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/09/9b482e2487f94b120e45d557c3fdfa4b.png-water\" alt=\"\" width=\"640\" height=\"193\" /></p>\n<p class=\"p1\">大家好！请注意，所有的openSUSE的fans们都应该读读这篇重要的文章。你有树莓派吗？你想试试openSUSE吗？你对树莓派和openSUSE很狂热吗？想不想看看它们在一起？真让人激动，ARM版的openSUSE针对树莓派平台发布了一个新的基于ARM v6的<a class=\"external ext\" href=\"http://www.zq1.de/~bernhard/linux/opensuse/raspberrypi-opensuse-20130907.img.xz\" target=\"_blank\" rel=\"external nofollow noopener\"><span class=\"s1\">安装镜像</span></a>。这个新的openSUSE镜像是内核3.6版本，带有轻量级的X11/icewm(ice 窗口管理器)，压缩后仅有82MB。</p>\n<p class=\"p1\">不用谢我，应该谢Bernhard Wiedeman。如此酷的penSUSE镜像是他使用一个openSUSE的替代镜像自动构建的。还有，你知道它最有趣的地方是什么？Bernhard Wiedeman在一个早上只用3个小时就创建建立了它，真强啊!</p>\n<p class=\"p1\">如果你对这个Bernhard用来构建基于ARM v6的树莓派镜像写的自动化脚本感兴趣，你可以在<a class=\"external ext\" href=\"https://build.opensuse.org/package/show/devel:ARM:Factory:Contrib:RaspberryPi/altimagebuild\" target=\"_blank\" rel=\"external nofollow noopener\"><span class=\"s1\">这里</span></a>找到。这个脚本让每个人都有机会简单的构建自己的镜像，然后分享给全世界其它的openSUSE极客们。Bernhard Wiedeman为我们写了一篇在3分钟内从头构建一个镜像的博客。是的，3分钟！并且每件事都做的尽善尽美。Bernhard Wiedeman的树莓派在55秒内启动成功。你的呢？多少时间完成启动？你能在评论中分享给我们吗？我们会非常开心的听到来自其它用户的体验。</p>\n<p class=\"p1\">当然，没有什么事情是完美的，剩余的尚未解决的问题还在解决中.下面已经列出了这些剩余的问题。</p>\n<ul class=\"ul1\">\n<li class=\"li2\">安装文件key初始化不可靠</li>\n<li class=\"li2\">构建脚本没有出错处理</li>\n</ul>\n<p class=\"p1\">这个新的image相对于之前的image有什么优势?</p>\n<ul class=\"ul1\">\n<li class=\"li2\">很容的改变镜像大小，因为root分区放到了最后</li>\n<li class=\"li2\">压缩后镜像文件非常小</li>\n<li class=\"li2\">可重复构建镜像，因此更容易定制</li>\n<li class=\"li2\">ARM v6带有浮点计算支持，因此更快</li>\n<li class=\"li2\">有超过5200个来自openSUSE:Factory:ARM的成功构建的包</li>\n<li class=\"li2\">举个例子，你可以使用zypper安装xauth twm xorg-x11-server xinit这些包来建立一个轻量级的图形环境， 之后使用startx启动它。</li>\n</ul>\n<p class=\"p1 article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201309/19/121839fdkkv7hkh8khd7xb.gif\" alt=\"\" /></p>\n<p class=\"p1\">好了伙计们，这可不是PiSUSE去娱乐的时间，我的意思是快去试试在你的树莓派上安装openSUSE，不要喝太多的啤酒。openSUSE的伙计们快乐！</p>\n<p class=\"p3\"><span class=\"s2\">Source:&nbsp;<a class=\"external ext\" href=\"https://lizards.opensuse.org/2013/09/07/new-raspberry-pi-image/\" target=\"_blank\" rel=\"external nofollow noopener\"><span class=\"s1\">openSUSE Lizards</span></a></span></p>\n<p class=\"p3\">&nbsp;</p>\n<p class=\"p3\">&nbsp;</p>\n<hr />\n<p class=\"p3\"><span class=\"s2\">via:&nbsp;<a class=\"external ext\" href=\"http://www.unixmen.com/new-opensuse-raspberry-pi-image/\" target=\"_blank\" rel=\"external nofollow noopener\"><span class=\"s1\">http://www.unixmen.com/new-opensuse-raspberry-pi-image/</span></a></span></p>\n<p class=\"p1\">本文由&nbsp;<a class=\"external ext\" href=\"https://github.com/LCTT/TranslateProject\" target=\"_blank\" rel=\"external nofollow noopener\"><span class=\"s1\">LCTT</span></a>&nbsp;原创翻译，<a href=\"https://linux.cn/article-1980-1.html\"><span class=\"s1\">Linux中国</span></a>&nbsp;荣誉推出</p>\n<p class=\"p4\"><span class=\"s2\">译者：<a href=\"http://linux.cn/space/flsf01\"><span class=\"s1\">flsf01</span></a>&nbsp;校对：<a href=\"http://linux.cn/space/wxy\"><span class=\"s1\">wxy</span></a></span></p>','2014-08-20 15:45:18','2019-09-18 07:47:03','2019-09-18 22:21:40',NULL),(36,3,1,0,18,'树莓派（Raspberry Pi）：完美的家用服务器','Raspberry Pi: Perfect Home Server','raspberry-pi-perfect-home-server','https://linux.cn/article-2228-1.html','自从树莓派发布后，所有在互联网上的网站为此激动人心的设备提供了很多有趣和具有挑战性的使用方法。虽然这些想法都很棒，但树莓派( RPi )最明显却又是最不吸引人的用处是：创建你的完美家用服务器。\n\n如果你有几个不同的电脑需要同步和自动化备份，RPi可以做到。如果你想通过家中的任意屏幕来访问你的音乐和视频，RPi也能实现。也许你有一个或两个打印机，你想要简单与大家共享，树莓派在硬件和时间上用最小投资就能满足你的这些需求。','https://net.lnmpa.top/thumbnail/2019/09/437aaf52140b160af02c79c508bc88f1.jpg-water','<p>自从树莓派发布后，所有在互联网上的网站为此激动人心的设备提供了很多有趣和具有挑战性的使用方法。虽然这些想法都很棒，但树莓派(&nbsp;<strong>RPi</strong>&nbsp;)最明显却又是最不吸引人的用处是：创建你的完美家用服务器。</p>\n<p>如果你有几个不同的电脑需要同步和自动化备份，RPi可以做到。如果你想通过家中的任意屏幕来访问你的音乐和视频，RPi也能实现。也许你有一个或两个打印机，你想要简单与大家共享，树莓派在硬件和时间上用最小投资就能满足你的这些需求。</p>\n<h3>树莓派的好处</h3>\n<p>低成本：35美元（约合242元RMB），B型的RPi接近一台完整的电脑，512M内存，100Mb以太网，SD卡插槽，2个USB接口，音频输出和HDMI或RCA视频输出。我知道HDMI电缆就比树莓派贵。</p>\n<p>能源效率：硬件成本只是服务器费用的一部分，因为你需要考虑能源成本去不断运行设备。家用服务器所需要的服务不会占用太多CPU，大部分时间它都处于空闲状态，等待发挥功效。RPi\'s超低功率组件非常适合这个工作负载，这有助于降低你的电费消耗。我的一个B型的RPi加上外部硬盘消耗总共只有8瓦，然而用老式速龙代替的机器在闲置时消耗54瓦。假设10美分每千瓦一小时，这使得一个RPi每年的电费在7美元。一个基于速龙的机器是47美元。在不到一年的时间里，RPI基本上能够收回成本。</p>\n<p>低噪音：因为RPi没有风扇和移动部件，在你最终配置中的唯一能生成噪音或明显热量的组件就是硬盘。如果你担心噪音，像<a class=\"external ext\" href=\"http://www.silentpcreview.com/\" target=\"_blank\" rel=\"external nofollow noopener\">Silent PC Review</a>发烧友网站经常在他们的评论中涉及到噪声基准。我的体会是现代驱动器足够安静，要比其他的设备安静的多（如媒体中心，游戏机或其他电脑）。如果你家里没有为布线提供更多的灵活性选择，RPi的小尺寸、少量发热和低噪音也许让你走过它旁边都很难发现。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201311/07/230232hzveaaihvovvbbl8.jpg\" alt=\"\" /></p>\n<p style=\"text-align: center;\">图1,一个简洁高效的家用服务器</p>\n<p>新机会：一个不怎么实际的好处是-简单快乐的尝试新事物！对我来说，这是我第一次真正工作在基于Debian的发行版，很可能也是许多Linux爱好者们第一次有机会尝试一个基于ARM的体系结构。</p>\n<h3>布置硬件</h3>\n<p>对于一个家庭服务器来说，你将需要一个中等容量的SD闪存卡作为本地存储。它可以使用一个USB引导，但那会占用两个宝贵的USB插槽之一。闪存卡不需要很大容量，但是速度越快越好。我选择了一个名牌SD卡，8GB容量和CLASS 10的速度等级。对于备份和存储多媒体文件，一个有USB连接插槽的硬盘驱动器是必须的。我选择一个1.5TB的硬盘和一个Calvary EN-CAHDD-D 2-bay USB 2.0硬盘连接基座。这个连接基座有个功能，在RAID-0模式中连接两个硬盘，总有一天会有用的。最后，RPi不带电源线，但可以用大多数智能手机充电器所用的5v微型USB。看看RPi是否挑剔电源，我为电源已换了三个不同的微型USB手机充电器。我在这周内尝试了每一个，在任何一个上都没有问题。</p>\n<h3>安装操作系统</h3>\n<p>安装RPi操作系统包括了许多方面的大量细节，但这里有一些家用特定服务器的安装提示，大致按需要的顺序讲述。</p>\n<p>1）直接通过<a class=\"external ext\" href=\"http://www.raspberrypi.org/downloads\" target=\"_blank\" rel=\"external nofollow noopener\">http://www.raspberrypi.org/downloads</a>获取Raspbian \"Wheezy\"安装镜像，并复制到SD卡，用网站上已列出的步骤。</p>\n<p>2）第一次引导RPi时，连接一个键盘、鼠标和显示器。在引导RPi之前别忘打开显示器，可以检测到正确的HDMI或混合输出端口。</p>\n<p>3）RPi有一个很好的\"raspi-config\"屏幕，在第一次启动时你会看到。对于家庭服务器来说，以下选择将会有用：</p>\n<ul>\n<li>expand_rootfs：调整默认2GB OS镜像的大小，来填满闪存卡剩余的内存。</li>\n<li>change_pass：修改默认密码\"raspberry\"，但是，越安全的密码越好。</li>\n<li>设置你的地点和时区。</li>\n<li>memory_split：给GPIU服务分配最少的内存（16M）尽可能为其他服务留下更多内存。</li>\n<li>SSH：别忘开启SSH服务。</li>\n<li>boot_behaviour：关闭&ldquo;启动至桌面（boot to desktop）&rdquo;（再次为你的其他服务节省内存）。</li>\n</ul>\n<p>完成后，你将在出现 pi@raspberrypi 提示符下。安装脚本可以在任何时间通过 sudo raspi-config 重新运行。</p>\n<p>还有一些其他配置，然后操作系统就可以用了。</p>\n<p>1）一个静态IP让一切变得更容易，切换eth0的网络设置：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; sudo nano -w /etc/network/interfaces  </code></pre>\n<p>更改eth0的那行 iface eth0 inet dhcp ，如下所示（根据你的家庭网络设置修改）：</p>\n<pre class=\"language-bash\"><code>======/etc/network/interfaces======\n...\niface eth0 inet static\naddress 192.168.1.10\nnetmask 255.255.255.0\ngateway 192.168.1.1\n...\n======/etc/network/interfaces======</code></pre>\n<p>2）创建本地用户并加入到users组和sudo组：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; sudo adduser YOURUSERIDHERE\n&gt;&gt; sudo usermod -a -G users YOURUSERIDHERE\n&gt;&gt; sudo usermod -a -G sudo YOURUSERIDHERE</code></pre>\n<p>3）更新系统确保所有的库是最新最好的：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; sudo apt-get update; sudo apt-get upgrade</code></pre>\n<p>4）好了，准备重新启动吧！先关闭PI：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; sudo /sbin/shutdown -h now</code></pre>\n<p>一旦关闭（注意RPi电路板上的绿色LED状态指示灯，可以知道什么时候完成关闭了），拔下显示器，键盘，鼠标和电源线。插入USB端口上的硬盘，然后插回电源重启RPi。</p>\n<p>5）一旦RPi开启（这些绿色LED指示灯用来描述状态），你可以从远程网络上从任何其他机器ssh到RPi并完成所有的配置（更改以下命令里的IP为你的静态IP）：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; ssh YOURUSERIDHERE@192.168.1.10</code></pre>\n<p>祝贺你，有了一个可以工作的树莓派！</p>\n<h3>外设</h3>\n<p>第一件事是要连接外设。用dmesg来寻找你的存储设备，会发现&mdash;&mdash;几乎可以肯定是/dev/sda。我喜欢使用自动挂载去挂载移动存储设备，这样更灵活，因为在启动时这些设备也许没有或者没准备好：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; sudo apt-get install autofs\n&gt;&gt; sudo nano -w /etc/auto.master \n======/etc/auto.master======\n...\n/misc /etc/auto.misc\n...\n======/etc/auto.master======\n\n&gt;&gt; sudo nano -w /etc/auto.misc\n</code></pre>\n<pre><br />注意，我的外部存储设备是ext4格式，如果需要话可以在下面更改：</pre>\n<pre class=\"language-bash\"><code>======/etc/auto.misc======\n...\nstorage -fstype=ext4:/dev/sda1\n...\n======/etc/auto.misc======\n&gt;&gt; sudo /etc/init.d/autofs restart \n&gt;&gt; ls -lat /misc/storage </code></pre>\n<p>可选的，创建一个符号链接的短路径：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; ln -s /misc/storage /storage</code></pre>\n<h3>备份仓库</h3>\n<p>在任何家庭服务器功能列表里面最重要的是提供坚如磐石的备份。对于RPi来说，这很简单而优美，在Linux中有丰富的网络共享选项：Samba/CIFS用于Windows机器，NFS用于基于UNIX的设备，并且甚至SFTP可以用于更多新的备份客户端，如deja-dup。由于RPi只有100MB以太网接口和USB上的存储设备，它没有非常快的传送速度。不过在另一方面，好的备份客户端是在后台自动运行的，所以你不会注意略微缓慢的传输速度。</p>\n<p>我的家庭网络包括一台Windows 7电脑。对于它，我通过Samba在RPi\'s外部USB存储设备上导出一个备份目录。因为备份程序在Windows7基础版上不支持网络设备作为备份目标，我使用<a class=\"external ext\" href=\"http://www.2brightsparks.com/freeware/freeware-hub.html\" target=\"_blank\" rel=\"external nofollow noopener\">SyncBack Free</a>去设置使其自动化，每日备份。</p>\n<p>配置Samba是容易的。</p>\n<p>1）安装samba和common-bin库（具有smbpasswd效用）</p>\n<pre class=\"language-bash\"><code>&gt;&gt; sudo apt-get install samba samba-common-bin</code></pre>\n<p>2）使用 smbpasswd 让你的本地ID能访问：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; sudo smbpasswd -a YOURUSERIDHERE</code></pre>\n<p>3）编辑samba配置文件：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; sudo nano -w /etc/samba/smb.conf</code></pre>\n<p>4）更改 workgroup = WORKGROUP 行以匹配你的Windows工作组名称。</p>\n<p>5）注释掉或删除[homes]和[printers]共享。(打印机共享稍后将通过直接CUPS访问来完成。)</p>\n<p>6）为Windows备份路径增加一个条目。这是我的示例，放置在该文件的底部：</p>\n<pre class=\"language-bash\"><code>======/etc/samba/smb.conf======\n...\n[win7pc] \ncomment=Backup for windows PC\npath=/storage/win7pc \nwriteable=Yes \ncreate mask=0777 \ndirectory mask=0777 \nbrowsable=Yes \npublic=Yes \nvalid users=YOURUSERIDHERE\n...\n======/etc/samba/smb.conf======</code></pre>\n<p>7）重启Samba使你的编辑生效：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; sudo /etc/init.d/samba restart</code></pre>\n<p>8）从Windows机器文件资源管理器通过映射一个网络设备测试连通。</p>\n<p>对Linux设备来说，设置和使用deja-dup非常简单。它被默认安装在我的Fedora 18和Ubuntu 12.10上。包的名称是&ldquo;deja-dup&rdquo;，程序名简单的称为&ldquo;Backup（备份）&rdquo;。虽然RPi很容易支持NFS导出，我发现使用deja-dup的SSH选项更容易，更方便，在RPi上它不需要额外服务的支持。指定一个deja-dup加密密码是一个好主意，除非你不在意一旦丢失了存储器，别人就可以拿走全部数据：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; sudo mkdir /storage/linuxlaptop\n&gt;&gt; sudo chown -R YOURUSERIDHERE:YOURUSERIDHERE /storage/linuxlaptop</code></pre>\n<p>从linux客户端启动备份程序，选择&ldquo;SSH&rdquo;作为备份位置，输入RPi的IP地址和你创建的存储位置。首次备份会很慢，但是以后的运行将只发送增量变化，速度更快。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201311/07/230234bj4j0qu874t0ui0z.png\" alt=\"\" /></p>\n<p style=\"text-align: center;\">图2,Deja-dup客户端设置</p>\n<h3>多媒体服务器：DLNA</h3>\n<p>现在每个人的文件都已安全备份。让我们继续看些有趣的！一个DLNA服务器可以让你集中存储你的电影、音乐和图片。通过这个中心库，家中每一个屏幕的DLNA客户端都可以轻松重放此内容。</p>\n<p>至少，这是一个宣称。事实是这样的，DNLA规格并不太确定一些重要的事情，如支持哪些格式或编码。每个客户端通常对于支持什么格式和服务器功能都有略微不同的想法。很多高功率的服务器也许能转码本地内容到移动设备支持的格式，但是在RPi上是不可能的，在即时转码上经常扰乱其他功能，如暂停，快进和倒带。一般情况下，高功率设备如PS3、Xbox和WD TV设备支持大多数格式，而无需任何转码。低端设备如智能TVs或Blu-ray播放器只支持更有限的编码列表。</p>\n<p>对于RPi来说，最好的办法是支持你的主要的DLNA设备的标准编码，然后测试你的其他DLNA客户端。如果没有完美播放，在下一节的提示也许有帮助。在我的情况下，我的PlayStation 3充当DLNA客户端，PS3能够流畅播放经Handbrake制作后的.m4v文件。</p>\n<p>对于RPi的DLNA服务器来说，Minidlna是个很好的选择。它已经在Raspbian发行版中，易于设置和使用最小服务资源运行：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; sudo apt-get install minidlna\n&gt;&gt; sudo nano  -w /etc/minidlna.conf</code></pre>\n<p>这是我/etc/minidlna.conf文件的相关部分：</p>\n<pre class=\"language-bash\"><code>...\n# I found keeping video + audio in different paths helpful\nmedia_dir=V,/storage/dlna/video \nmedia_dir=A,/storage/dlna/music \n...\npresentation_url=http://192.168.1.10:8200/\n... \nfriendly_name=MyRPi\n...\n# Since I add new media infrequently, turning off \n# inotify keeps minidlna for polling for \n# content changes. It\'s simple enough to run \n# sudo /etc/init.d/minidlna force-reload\n# when new content is added.\ninotify=no</code></pre>\n<p>一旦完成编辑，重启minidlna以加载新配置：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; sudo /etc/init.d/minidlna force-reload</code></pre>\n<p>Minidlna能够为你的设备支持的电影提供电影海报缩略图（像PS3）。这让我能够更方便地在几十个电影文件中滚屏查找我想要的那个电影。我发现每个电影一个目录是最兼容的文件布局，只包含影片文件和缩略图，图像命名为&ldquo;Cover.jpg&rdquo;。使用像\"MovieName.m4v\"和\"MovieName.jpg\"的格式在PS3上工作的很好，但它不太适合VLC（除非你能让VLC uPNP插件首先查找服务器的话）。</p>\n<p>通过PS3，你可以通过转到在XMB栏上的\"Video\"测试连通性。当视频列表向下翻页时，你以前设置的\"friendly_name\"应该是可见的，测试确保Minidlna是通过浏览器转到<a class=\"external ext\" href=\"http://192.168.1.10:8200/%E3%80%82\" target=\"_blank\" rel=\"external nofollow noopener\">http://192.168.1.10:8200/。</a></p>\n<h3>非DLNA设备的多媒体</h3>\n<p>当你让DNLA与你的一些设备一起工作时，你可能会发现有些设备并不适合它，所以多媒体计划B是个好主意。Nginx网站服务器有一个MP4插件尝试在旧式的HTTP连接上改善流媒体传输，但是浏览器回放的性能差别很大，在一部电影里快进也一直不工作。看起来多媒体共享或非 DLNA 设备的最低共同特性是使用传统Samba共享的访客只读访问。</p>\n<p>这是/etc/samba/smb.conf的部分示例：</p>\n<pre class=\"language-bash\"><code>[dlna] \npath=/storage/dlna \nread only=yes \nbrowsable=yes \npublic=yes </code></pre>\n<p>定义了共享设置后重启Samba（ sudo /etc/init.d/samba restart ），你可以开始测试你的客户端。</p>\n<p>我用一个混合的编码m4v视频文件测试了以下客户端：</p>\n<ul>\n<li>\n<p>Android 4.0.4手机：\"ES File Explorer\"与\"ES Media Player\"（播放器附带安装）。</p>\n</li>\n<li>\n<p>Android 4.1.2平板电脑：\"ES File Explorer\"与\"ES Media Player\"（播放器附带安装）。</p>\n</li>\n<li>\n<p>Linux设备：自动挂载：//192.168.1.10/dlna，然后使用VLC或MPlayer。</p>\n</li>\n<li>\n<p>Windows：挂载//192.168.1.10:/dlna，然后使用VLC。</p>\n</li>\n</ul>\n<p>所有设备都能几乎立即开始播放和快进没有延迟的情况。</p>\n<h3>打印服务器</h3>\n<p>RPi运行CUPS相当不错，所以它容易共享一个较旧的没有本地网络接口的打印机。</p>\n<p>安装你的打印机所需的CUPS和任何软件包。我需要hplip-cups，因为我有一个HP喷墨打印机：</p>\n<pre class=\"language-bash\"><code>&gt;&gt;  sudo apt-get install cups hplip-cups</code></pre>\n<p>更新&ldquo;Listen&rdquo;行和增加 Allow @LOCAL 到位置指令，如下所示（你可以使用其他机器在你的LAN上去管理CUPS）：</p>\n<pre class=\"language-bash\"><code>======/etc/cups/cupsd.conf======\n#Listen localhost:631  #Comment this out\nListen 192.168.1.10:631 #Add this line\n...\n \n  Order allow,deny \n  Allow @LOCAL \n \n\n# Restrict access to the admin pages... \n \n  Order allow,deny \n  Allow @LOCAL \n \n\n# Restrict access to configuration files... \n  \n  AuthType Default \n  Require user @SYSTEM \n  Order allow,deny \n  Allow @LOCAL \n \n======/etc/cups/cupsd.conf======</code></pre>\n<p>添加你的本地ID到lpadmin组就能管理CUPS：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; sudo usermod -a -G lpadmin  YOURUSERIDHERE</code></pre>\n<p>重启CUPS：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; sudo /etc/init.d/cups restart</code></pre>\n<p>然后转到<a class=\"external ext\" href=\"http://192.168.1.10:631/%E5%B9%B6%E7%82%B9%E5%87%BB\" target=\"_blank\" rel=\"external nofollow noopener\">http://192.168.1.10:631/并点击</a>&nbsp;\"Adding Printers and Classes\"去设置你的打印机。我的打印机是自动发现的USB设备，所以，我只需点击&ldquo;share&rdquo;就可以。同样访问<a class=\"external ext\" href=\"https://192.168.1.10:631/admin%EF%BC%8C%E7%A1%AE%E4%BF%9D%E6%A3%80%E6%9F%A5%E2%80%9CShare\" target=\"_blank\" rel=\"external nofollow noopener\">https://192.168.1.10:631/admin，确保检查&ldquo;Share</a>&nbsp;printers connected to this system（共享连接至这个系统的打印机）&rdquo;。</p>\n<p>完成后，你可以用通常的方式设置你的客户端。当我输入主机名，我的Linux客户端就能够自动发现打印机，并选择正确的驱动程序。在我的Windows7的机器上，一旦我选择&ldquo;Network Printer（网络打印机）&rdquo;，我必须点击&ldquo;The printer that I want isn\'t listed（我想要的打印机未列出）&rdquo;，选择&ldquo;Select a shared printer by name（通过名称选择共享的打印机）&rdquo;，然后从CUPS网络接口输入URL：<a class=\"external ext\" href=\"http://192.168.1.10:631/printers/HP_J4500%E3%80%82\" target=\"_blank\" rel=\"external nofollow noopener\">http://192.168.1.10:631/printers/HP_J4500。</a></p>\n<h3>结论</h3>\n<p>用最少的额外的硬件和配置，树莓派是高效、简洁的家用服务器。它能够花最小的硬件费用来为你的家庭环境带来由Linux提供的广泛企业服务。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<hr />\n<p>via:&nbsp;<a class=\"external ext\" href=\"http://www.linuxjournal.com/content/raspberry-pi-perfect-home-server\" target=\"_blank\" rel=\"external nofollow noopener\">http://www.linuxjournal.com/content/raspberry-pi-perfect-home-server</a></p>\n<p>本文由&nbsp;<a class=\"external ext\" href=\"https://github.com/LCTT/TranslateProject\" target=\"_blank\" rel=\"external nofollow noopener\">LCTT</a>&nbsp;原创翻译，<a href=\"https://linux.cn/article-2228-1.html\">Linux中国</a>&nbsp;荣誉推出</p>\n<p>译者：<a class=\"external ext\" href=\"https://github.com/vito-L\" target=\"_blank\" rel=\"external nofollow noopener\">Vito</a>&nbsp;校对：<a class=\"external ext\" href=\"https://github.com/carolinewuyan\" target=\"_blank\" rel=\"external nofollow noopener\">Caroline</a></p>','2014-11-17 15:47:37','2019-09-18 07:52:51','2019-09-18 22:20:27',NULL),(37,3,1,0,18,'树莓派使用实例之：2 Pi R','An example of raspberry pie: 2 Pi R','an-example-of-raspberry-pie-2-pi-r','https://linux.cn/article-2587-1.html','很多人都对树莓派的硬件 hack 功能（译注：就是用户可以自己发挥想像力，把树莓派设计成自己想要的机器）感兴趣，而我看中的一点是树莓派的低耗电功能，我可以用它来代替现在在用的 Linux 服务器。在以前的文章中我已经介绍过如何用树莓派代替这些服务器来管理我的啤酒冰箱，以及我在澳大利亚托管的一台树莓派。托管树莓派之后，我开始思考我正在使用的服务器的单点故障问题，并且考虑着手解决它。当你看到文章标题里的“2 Pi R”，你也许会想到圆周长计算公式（C = 2PiR，Pi 为圆周率，R 为半径），但在本文中，“R”的意思是“冗余（redundancy）”。当然，一块树莓派并不能实现冗余，至少需要两块。下面我将介绍如何用两块树莓派实现冗余。','https://net.lnmpa.top/thumbnail/2019/09/504c85fdc41cc02ec96d467e925d4f3e.jpg-water','<p>很多人都对树莓派的硬件 hack 功能（译注：就是用户可以自己发挥想像力，把树莓派设计成自己想要的机器）感兴趣，而我看中的一点是树莓派的低耗电功能，我可以用它来代替现在在用的 Linux 服务器。在以前的文章中我已经介绍过如何用树莓派代替这些服务器来管理我的啤酒冰箱，以及我在澳大利亚托管的一台树莓派。托管树莓派之后，我开始思考我正在使用的服务器的单点故障问题，并且考虑着手解决它。当你看到文章标题里的&ldquo;2 Pi R&rdquo;，你也许会想到圆周长计算公式（C = 2<em>Pi</em>R，Pi 为圆周率，R 为半径），但在本文中，&ldquo;R&rdquo;的意思是&ldquo;冗余（redundancy）&rdquo;。当然，一块树莓派并不能实现冗余，至少需要两块。下面我将介绍如何用两块树莓派实现冗余。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201402/21/1029369hipkkq85r9qi6p5.jpg\" alt=\"\" width=\"640\" height=\"360\" /></p>\n<p>本文将建立一个底层框架，为俩树莓派实现冗余提供基础服务，首先我要用 GlusterFS 建立一个集群网络文件系统。在之后的文章中，我还会介绍如何利用共享存储来建立其他冗余服务。注意，虽然本文使用的是树莓派，但下面的配置操作同样适用于其他硬件。</p>\n<h3>配置俩树莓派</h3>\n<p>首先从树莓派官网下载最新的 Linux 发行版，并安装到两块 SD 卡中。将树莓派接到电视机上，然后按照文档提示选择内核镜像并启动系统，确认一下 SSH 服务有没有启动（默认情况下 SSH 应该是开机启动的）。你可以使用 raspi-config 命令来增加根分区空间，以便能充分利用 SD 卡的容量。确认系统正常工作、SSH 正常启动后，我可以过程访问它了。我将树莓派与电视机断开，并连到交换机上，重启系统，没有显示界面。</p>\n<p>默认情况下，Raspbian 会通过 DHCP 获取自己的网络信息，但是在设置冗余服务时，我们希望树莓派每次开机都使用同一个 IP 地址。在我的环境中，我设置了我的 DHCP 服务器，它会在树莓派启动时为它们分配固定的 IP 地址。而你可以编辑 /etc/network/interfaces 文件：</p>\n<pre class=\"language-bash\"><code>iface eth0 inet dhcp</code></pre>\n<p>修改成：</p>\n<pre class=\"language-bash\"><code>auto eth0\niface eth0 inet static\n  address 192.168.0.121\n  netmask 255.255.255.0\n  gateway 192.168.0.1</code></pre>\n<p>当然，要将上面的参数修改成你自己的参数，确保每个树莓派使用不同的 IP 地址。我把两个树莓派的主机名都改了，便于在（通过 SSH）登录的时候区分它们。怎么改主机名呢？以 root 权限编辑 /etc/hostname 文件。最后重启系统，确认树莓派使用了正确的网络配置和主机名。</p>\n<h3>配置 GlusterFS 服务器</h3>\n<p>GlusterFS 是一个用户态的集群文件系统，我选择它，是因为它配置共享网络文件系统很方便。首先选一个树莓派作为主设备（master）。在主设备上你需要做一些初始化操作，完成后，它们会自动执行故障转移。下面是我架设的环境：</p>\n<pre class=\"language-bash\"><code>Master hostname: pi1\nMaster IP: 192.168.0.121\nMaster brick path: /srv/gv0\nSecondary hostname: pi2\nSecondary IP: 192.168.0.122\nSecondary brick path: /srv/gv0</code></pre>\n<p>在开始之前，登入这两个树莓派，然后安装 glusterfs-server 软件包：</p>\n<pre class=\"language-bash\"><code>$ sudo apt-get install glusterfs-server</code></pre>\n<p>GlusterFS 将数据保存在一些被称为&ldquo;块&rdquo;的设备中。一个&ldquo;块&rdquo;是一个系统路径，由你指定给 gluster 使用。GlusterFS 会将所有&ldquo;块&rdquo;组合成一个存储卷，给客户端使用。GlusterFS 会将文件的数据分割成多份，保存在不同的&ldquo;块&rdquo;中。所以虽然一个&ldquo;块&rdquo;看起来就是一个普通的路径，你最好不要在树莓派中直接操作它，而应该通过客户端访问 GlusterFS 服务，让 GlusterFS 操作。本文中我在两个树莓派中都新建一个 /srv/gv0 目录作为 GlusterFS 的&ldquo;块&rdquo;：</p>\n<pre class=\"language-bash\"><code>$ sudo mkdir /srv/gv0</code></pre>\n<p>在我的环境中，我将 SD 卡上的根文件系统共享出来，而你可能需要共享更大的存储空间。如果是这样的话，在两块树莓派上都接上 USB 硬盘，格式化后挂载到 /srv/gv0 上。编辑下 /etc/fstab 文件，确保系统每次启动时都会把你的 USB 硬盘挂载上去。两个树莓派上的&ldquo;块&rdquo;不一定需要有相同的名字或者相同的路径名称，但是把它们设置为相同的值也没什么坏处。</p>\n<p>配置好&ldquo;块&rdquo;的路径，安装好 glusterfs-server 软件包，确认两个树莓派都正常工作，然后登入被你设为主设备的树莓派，输入&ldquo;gluster peer probe&rdquo;命令，将次设备加入到集群中。在我的环境中，我用 IP 地址表示第二个节点，如果你比较有个性，并且有设置过 DNS，你也可以用主机名表示这个节点。</p>\n<pre class=\"language-bash\"><code>pi@pi1 ~ $ sudo gluster peer probe 192.168.0.122\nProbe successful</code></pre>\n<pre class=\"brush: bash;font-size: 100%; first-line: 1; \"><br />目前为止，我的 pi1 (192.168.0.121) 信任 pi2 (192.168.0.122)，我可以建立一个存储卷，名字都想好了：gv0。在主设备端运行命令&ldquo;gluster volume create&rdquo;：</pre>\n<pre class=\"language-bash\"><code>pi@pi1 ~ $ sudo gluster volume create gv0 replica 2 192.168.0.121:/srv/gv0 192.168.0.122:/srv/gv0\nCreation of volume gv0 has been successful. Please start the volume to access data.</code></pre>\n<p>这里稍微解释一下命令的意思。&ldquo;gluster volume create&rdquo;就是新建一个卷；&ldquo;gv0&rdquo;是卷名，这个名称将会在客户端被用到；&ldquo;replica 2&rdquo;表示这个卷的数据会在两个&ldquo;块&rdquo;之间作冗余，而不是将数据分割成两份分别存于两个&ldquo;块&rdquo;。这个命令保证了卷内的数据会被复制成两份分别保存在两个&ldquo;块&rdquo;中。最后我定义两个独立的&ldquo;块&rdquo;，作为卷的存储空间：192.168.0.121 上的 /srv/gv0 和 192.168.0.122 上的 /srv/gv0。</p>\n<p>现在，卷被成功创建，我只需启动它：</p>\n<pre class=\"language-bash\"><code>pi@pi1 ~ $ sudo gluster volume start gv0\nStarting volume gv0 has been successful</code></pre>\n<p>然后我可以在任何一个树莓派上使用&ldquo;volume info&rdquo;命令来查看状态：</p>\n<pre class=\"language-bash\"><code>$ sudo gluster volume info\n\nVolume Name: gv0\nType: Replicate\nStatus: Started\nNumber of Bricks: 2\nTransport-type: tcp\nBricks:\nBrick1: 192.168.0.121:/srv/gv0\nBrick2: 192.168.0.122:/srv/gv0</code></pre>\n<h3>配置 GlusterFS 客户端</h3>\n<p>卷已启动，现在我可以在一个支持 GlusterFS 的客户端上，将它作为一个 GlusterFS 类型的文件系统挂载起来。首先我想在这两个树莓派上挂载这个卷，于是我在两个树莓派上都创建了挂载点，并下面的命令把这个卷挂载上去：</p>\n<pre class=\"language-bash\"><code>$ sudo mkdir -p /mnt/gluster1\n$ sudo mount -t glusterfs 192.168.0.121:/gv0 /mnt/gluster1\n$ df\nFilesystem         1K-blocks    Used Available Use% Mounted on\nrootfs               1804128 1496464    216016  88% /\n/dev/root            1804128 1496464    216016  88% /\ndevtmpfs               86184       0     86184   0% /dev\ntmpfs                  18888     216     18672   2% /run\ntmpfs                   5120       0      5120   0% /run/lock\ntmpfs                  37760       0     37760   0% /run/shm\n/dev/mmcblk0p1         57288   18960     38328  34% /boot\n192.168.0.121:/gv0   1804032 1496448    215936  88% /mnt/gluster1</code></pre>\n<p>如果你是一个喜欢钻研的读者，你可能会问了：&ldquo;如果我指定了一个 IP 地址，如果192.168.0.121当机了，怎么办？&rdquo;。别担心，这个 IP 地址仅仅是为了指定使用哪个卷，当我们访问这个卷的时候，卷内的两个&ldquo;块&rdquo;都会被访问到。</p>\n<p>当你挂载好这个文件系统后，试试在里面新建文件，然后查看一下&ldquo;块&rdquo;对应的路径：/srv/gv0。你应该可以看到你在 /mngt/gluster1 里创建的文件，在两个树莓派的 /srv/gv0 上都出现了（重申一遍，不要往 /srv/gv0 里写数据）：</p>\n<pre class=\"language-bash\"><code>pi@pi1 ~ $ sudo touch /mnt/gluster1/test1\npi@pi1 ~ $ ls /mnt/gluster1/test1\n/mnt/gluster1/test1\npi@pi1 ~ $ ls /srv/gv0\ntest1\npi@pi2 ~ $ ls /srv/gv0\ntest1</code></pre>\n<p>你可以在 /etc/fstab 上添加下面一段，就可以在系统启动的时候自动把 GlusterFS 的卷挂载上来：</p>\n<pre class=\"language-bash\"><code>192.168.0.121:/gv0  /mnt/gluster1  glusterfs  defaults,_netdev  0  0</code></pre>\n<p>注意：如果你想通过其他客户端访问到这个 GlusterFS 卷，只需要安装一个 GlusterFS 客户端（在基于 Debian 的发行版里，这个客户端叫 glusterfs-client），然后接我上面介绍的，创建挂载点，将卷挂载上去。</p>\n<h3>冗余测试</h3>\n<p>现在我们就来测试一下这个冗余文件系统。我们的目标是，当其中一个节点当掉，我们还能访问 GlusterFS 卷里面的文件。首先我配置一个独立的客户端用于挂载 GlusterFS 卷，然后新建一个简单的脚本文件放在卷中，文件名为&ldquo;glustertest&rdquo;：</p>\n<pre class=\"language-bash\"><code>#!/bin/bash\n\nwhile [ 1 ]\ndo\n  date &gt; /mnt/gluster1/test1\n  cat /mnt/gluster1/test1\n  sleep 1\ndone</code></pre>\n<p>这个脚本运行无限循环并每隔1秒打印出系统时间。当我运行这个脚本时，我可以看到下面的信息：</p>\n<pre class=\"language-bash\"><code># chmod a+x /mnt/gluster1/glustertest\nroot@moses:~# /mnt/gluster1/glustertest\nSat Mar  9 13:19:02 PST 2013\nSat Mar  9 13:19:04 PST 2013\nSat Mar  9 13:19:05 PST 2013\nSat Mar  9 13:19:06 PST 2013\nSat Mar  9 13:19:07 PST 2013\nSat Mar  9 13:19:08 PST 2013</code></pre>\n<p>我发现这个脚本偶尔会跳过1秒，可能是 date 这个命令并不是很精确地每隔1秒钟打印一次，所以偶尔会出现输出时间不连惯的现象。</p>\n<p>当我执行这个脚本后，我登入一个树莓派并输入&ldquo;sudo reboot&rdquo;重启这个设备。这个脚本一直在运行，如果出现输出时间不连惯现象，我不知道还是不是上面说的偶然现象。当第一个树莓派启动后，我重启第二个树莓派，确认下这个系统有一个节点丢失后，我的程序仍然能正常工作。这个冗余系统配置起来只需要几个命令，如果你需要一个冗余系统，这是个不错的选择。</p>\n<p>现在你已经实现了 2 Pi R 组成的冗余文件系统，在我的下篇文章中，我将会加入新的冗余服务，将这个共享存储系统好好利用起来。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<hr />\n<p>via:&nbsp;<a class=\"external ext\" href=\"http://www.linuxjournal.com/content/two-pi-r\" target=\"_blank\" rel=\"external nofollow noopener\">http://www.linuxjournal.com/content/two-pi-r</a></p>\n<p>译者：<a class=\"external ext\" href=\"https://github.com/bazz2\" target=\"_blank\" rel=\"external nofollow noopener\">bazz2</a>&nbsp;校对：<a class=\"external ext\" href=\"https://github.com/wxy\" target=\"_blank\" rel=\"external nofollow noopener\">wxy</a></p>\n<p>本文由&nbsp;<a class=\"external ext\" href=\"https://github.com/LCTT/TranslateProject\" target=\"_blank\" rel=\"external nofollow noopener\">LCTT</a>&nbsp;原创翻译，<a href=\"https://linux.cn/article-2587-1.html\">Linux中国</a>&nbsp;荣誉推出</p>','2015-02-11 15:54:03','2019-09-18 07:57:29','2019-09-18 22:22:52',NULL),(38,3,1,0,17,'树莓派使用实例之：2 Pi R 第二篇：Web服务器','Examples of raspberry pie usage: 2 Pi R Part 2: Web server','examples-of-raspberry-pie-usage-2-pi-r-part-2-web-server','https://linux.cn/article-2658-1.html','可能你没有看过我的上一篇文章，那我就在这里简单回顾一下上次的内容。我有两个树莓派：Pi1 和 Pi2。Pi1 的 IP 地址为 192.168.0.121，Pi2 的 IP 地址为 192.168.0.122。我把它们组合成为 GlusterFS 集群系统，共享一个存储卷，卷名为 gv0。并且这个 gv0 被挂载在两个树莓派上，挂载点都是 /mnt/gluster1，这样一来，两个树莓派能同时访问到这个共享卷。最后我测试了下系统的容错性，将共享卷挂载到第三个物理机上，并执行共享卷上的一个简单的脚本：打印系统时间并输出到 gv0 上的一个文件内，然后轮着关掉两台树莓派，检测这个冗余系统是否还能用。','https://net.lnmpa.top/thumbnail/2019/09/8e9b8b1e54c255fa94384c926527a0e8.jpg-water','<p>在我的上一篇<a href=\"http://linux.cn/article-2587-1.html\">文章</a>中讲过如何做一个高可用系统：两个树莓派布署上 GlusterFS 集群文件系统，就变成一个容错文件服务器了。在这篇文章中我们会基于这个高可用系统构建另一个容错服务：建立一个简单的 Web 服务器集群。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/09/8e9b8b1e54c255fa94384c926527a0e8.jpg-water\" alt=\"\" width=\"400\" height=\"300\" /></p>\n<p>可能你没有看过我的上一篇文章，那我就在这里简单回顾一下上次的内容。我有两个树莓派：Pi1 和 Pi2。Pi1 的 IP 地址为 192.168.0.121，Pi2 的 IP 地址为 192.168.0.122。我把它们组合成为 GlusterFS 集群系统，共享一个存储卷，卷名为 gv0。并且这个 gv0 被挂载在两个树莓派上，挂载点都是 /mnt/gluster1，这样一来，两个树莓派能同时访问到这个共享卷。最后我测试了下系统的容错性，将共享卷挂载到第三个物理机上，并执行共享卷上的一个简单的脚本：打印系统时间并输出到 gv0 上的一个文件内，然后轮着关掉两台树莓派，检测这个冗余系统是否还能用。</p>\n<p>现在我手上有这个经过检验的存储系统，我要做的是把这个系统做成有容错功能的 Web 服务器集群。树莓派的 CPU 处理速度和内存资源都不是很高，好在对付一个静态 Web 服务器已经是绰绰有余了。我故意把这个例子做得非常简单，因为我觉得如果你能摆平这个简单的例子，你也能处理复杂一点的问题了。</p>\n<h3>安装 Nginx</h3>\n<p>虽然我也比较喜欢 Apache，但在资源有限的情况下，像 Nginx 这样功能全、性能高、资源占用少的 Web 服务器是比较理想的选择。在 Raspbian 的默认源中存在 Nginx，所以我只要登入一台树莓派并且输入以下命令：</p>\n<pre class=\"language-bash\"><code>$ sudo apt-get update\n$ sudo apt-get install nginx</code></pre>\n<p>Nginx 安装好后，创建配置文件 /mnt/gluster1/cluster ，内容如下：</p>\n<pre class=\"language-nginx\"><code>server {\n  root /mnt/gluster1/www;\n  index index.html index.htm;\n  server_name twopir twopir.example.com;\n \n  location / {\n        try_files $uri $uri/ /index.html;\n  }\n}</code></pre>\n<p>注意：我这里把服务器命名为&ldquo;twopir&rdquo;，你可以根据自己爱好命名你的网站。另外我把 Web 服务器的根目录设置为 /mng/gluster1/www。这样，我就能把我的静态文件放在这个共享存储系统内，从而让两个树莓派主机都访问到它们。</p>\n<p>现在删除默认的 Nginx 配置文件，将上面配好的配置文件作为 Nginx 的配置文件。在 Debian 系统中，Nginx 将它的配置文件像 Apache 一样放在 sites-available 和 site-enabled 两个目录下面。虚拟主机配置文档放在 sites-available 中，而 sites-enabled 目录包含了你想生效的配置文件的软链接。</p>\n<pre class=\"language-bash\"><code>$ cd /etc/nginx/sites-available\n$ sudo ln -s /mnt/gluster1/cluster .\n$ cd /etc/nginx/sites-enabled\n$ sudo rm default\n$ sudo ln -s /etc/nginx/sites-available/cluster .</code></pre>\n<p>现在我已经放好了配置文件，但系统还不存在上面所说的 Web 服务器根目录。下一步就是创建目录 /mnt/gluster1/www，并复制 index.html 文件进去。当然你也可以建立自己定义的 index.html 文件，但先复制一个已有的文件是个不错的选择：</p>\n<pre class=\"language-bash\"><code>$ sudo mkdir /mnt/gluster1/www\n$ cp /usr/share/nginx/www/index.html /mnt/gluster1/www</code></pre>\n<p>重启 Nginx 服务：</p>\n<pre class=\"language-bash\"><code>$ sudo /etc/init.d/nginx restart</code></pre>\n<p>现在去 DNS 服务器为192.168.0.121的树莓派配置记录。你可以根据自己的情况配置你自己的域名和 IP 地址。现在在浏览器上输入 http://twopir/ 然后出现默认的 Nginx 首页。如果你查看下 /var/log/nginx/access.log 文件，你可以看到点击网页留下的记录。</p>\n<p>Nginx 能正常工作后，配置第二个树莓派。因为我们已经将配置文件都放在 GlusterFS 共享目录下，我们现在要做的只是安装 Nginx，创建相关的软链接，重启 Nginx：</p>\n<pre class=\"language-bash\"><code>$ sudo apt-get update\n$ sudo apt-get install nginx\n$ cd /etc/nginx/sites-available\n$ sudo ln -s /mnt/gluster1/cluster .\n$ cd /etc/nginx/sites-enabled\n$ sudo rm default\n$ sudo ln -s /etc/nginx/sites-available/cluster .\n$ sudo /etc/init.d/nginx restart</code></pre>\n<h3>DNS 服务器上配置两条 A 记录</h3>\n<p>现在两个主机共享同一份文件，下一步是设置冗余系统的关键步骤。虽然你完全可以设置一个类似心跳的服务用于轮询检测哪个树莓派的 Web 服务是开启的，但这里有个更好的方法：给同一个主机名指定两个 DNS 的 A 记录，分别指向你的两个树莓派（译注：A 记录就是将域名转化为 IP 地址的记录，DNS 包含很多记录方式，如 A 记录、PTR 记录、MX 记录等等），这就是传说中的 DNS 负载均衡，DNS 访问主机时，如果主机名对应多个 IP 地址，DNS 会随机返回这些 IP 地址的顺序：</p>\n<pre class=\"language-bash\"><code>$ dig twopir.example.com A +short\n192.168.0.121\n192.168.0.122\n$ dig twopir.example.com A +short\n192.168.0.122\n192.168.0.121</code></pre>\n<p>因为返回随机的顺序，用户可以均匀地往两台服务器发送请求，这个负载均衡的机制就是由 DNS 服务器的多条 A 记录来提供。相对于 DNS 的负载均衡技术，我更感兴趣的是 Web 浏览器如何处理请求失败的情况。当浏览器通过网页主机获得两条 A 记录，并且第一条记录所在的主机当机了，浏览器几乎立刻就切到另一条记录上。切换效率快到用户根本察觉不出来，这可比传统的心跳线轮循请求主机快多了。</p>\n<p>所以在你正在使用的 DNS 服务器上添加你的树莓派集群的两个 IP 地址，然后试试 dig 命令，就像我在上面使用过的一样，你也应该能得到两个 IP 地址。</p>\n<p>当你为同一个域名设置好了两个 A 记录，这套集群就可以提供容错服务了。打开两个终端并分别登录到两个树莓派，运行 tail -f /var/log/ngnix/access.log 命令，你可以监视 Web 服务器的访问情况。当你通过浏览器访问网页时，你可以看到在一台树莓派上产生了访问日志，而在另外一台的日志里什么也没有出现。现在你可以刷新几次页面，当你觉得你对能成功访问到 Web 服务器感到满意了，你可以重启响应你请求的那台树莓派，然后再刷新几次页面。也许浏览器上会出现一个短暂的不可访问信号，但会马上重定向到第二台树莓派上，你会看到一样的页面，并且你能通过终端访问日志了解具体情况。当第一台树莓派启动后，你在浏览器上根本不会察觉到。</p>\n<p>（译注：如何处理DNS 轮询的多个IP地址，不同浏览器有不同的做法，目前译者收集到的资料显示，只有<a class=\"ext\" href=\"http://www-archive.mozilla.org/docs/netlib/dns.html\" target=\"_blank\" rel=\"external nofollow noopener\">mozilla的netlib库</a>支持自动重连下一个IP地址的做法。如果读者知道更多的浏览器对DNS轮询的处理策略，请评论给我们。其实，以译者的态度看，DNS轮询根本就不能算作是高可用性的方案，勉强可以算作是负载均衡方案，建议考虑更可靠的其它方案。）</p>\n<p>随机重启一台树莓派，只要有一台在线，Web 服务器就能提供服务。这是一个非常简单的案例，你可以把你其它的静态文件放到 /mnt/gluster1/www 上，为你提供真正有价值的服务，现在好好享受你的低成本容错集群 Web 服务器吧。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<hr />\n<p>via:&nbsp;<a class=\"ext\" href=\"http://www.linuxjournal.com/content/two-pi-r-2-web-servers\" target=\"_blank\" rel=\"external nofollow noopener\">http://www.linuxjournal.com/content/two-pi-r-2-web-servers</a></p>\n<p>译者：<a class=\"ext\" href=\"https://github.com/bazz2\" target=\"_blank\" rel=\"external nofollow noopener\">bazz2</a>&nbsp;校对：<a class=\"ext\" href=\"https://github.com/wxy\" target=\"_blank\" rel=\"external nofollow noopener\">wxy</a></p>\n<p>本文由&nbsp;<a class=\"ext\" href=\"https://github.com/LCTT/TranslateProject\" target=\"_blank\" rel=\"external nofollow noopener\">LCTT</a>&nbsp;原创翻译，<a href=\"https://linux.cn/article-2658-1.html\">Linux中国</a>&nbsp;荣誉推出</p>','2015-03-02 15:58:19','2019-09-18 08:02:16','2019-09-18 08:02:16',NULL),(39,3,1,0,17,'树莓派进阶学习的五个建议','Five Suggestions for Advanced Learning of raspberry pie','five-suggestions-for-advanced-learning-of-raspberry-pie','https://linux.cn/article-3056-1.html','当你可以在命令行输入命令时，你就不再是一个新手在做一些新手的设置了。虽然进度不快，但是你的确正在通过你的方式去学习使用这物超所值的、只有信用卡大小的计算机去满足一些DIY想法，这就是树莓派。\n\n然而，从基础跨越到中级还是存在较大距离。当你从“设置你的派”的教程转而学习“创建一个媒体服务器”时，项目开始前的需求就会有一点点挑战。许多中级的Pi教程，包括ReadWrite的一些文章，都会假设你已经对树莓派设置好了一些东西。','https://net.lnmpa.top/thumbnail/2019/09/0d342a1ae7fe046e60223532b5e89e90.jpg-water','<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/09/0d342a1ae7fe046e60223532b5e89e90.jpg-water\" alt=\"\" width=\"700\" /></p>\n<blockquote>\n<p>从SSH到端口转发，这些先进的技术将让你的树莓派开发更简单。</p>\n</blockquote>\n<p>当你可以在命令行输入命令时，你就不再是一个新手在做一些<a class=\"ext\" href=\"http://www.raspberrypi.org/downloads/\" target=\"_blank\" rel=\"external nofollow noopener\">新手的设置</a>了。虽然进度不快，但是你的确正在通过你的方式去学习使用这物超所值的、只有信用卡大小的计算机去满足一些DIY想法，这就是树莓派。</p>\n<blockquote>\n<p>然而，从基础跨越到中级还是存在较大距离。当你从&ldquo;设置你的派&rdquo;的教程转而学习&ldquo;创建一个媒体服务器&rdquo;时，项目开始前的需求就会有一点点挑战。许多中级的Pi教程，包括ReadWrite的一些文章，都会假设你已经对树莓派设置好了一些东西。</p>\n</blockquote>\n<p>并非每一个项目都需要找个教程里的所有建议，但是知道这些步骤可以使项目更顺利地贴合需求。</p>\n<p>当你准备脱离小白行列时，做一些树莓派教程的预先准备工作对你非常有用。</p>\n<h3>1) 使用SSH登录</h3>\n<p>SSH意思是<a class=\"ext\" href=\"http://en.wikipedia.org/wiki/Secure_Shell\" target=\"_blank\" rel=\"external nofollow noopener\">Secure Shell</a>，它是一种加密网络协议，用于安全地在计算机与树莓派之间传输你的数据。项目中也许需要你通过你的计算机的命令行控制树莓派，而不是通过给树莓派连接显示器和键盘来控制。</p>\n<p>现在SSH已经预先安装在树莓派系统&nbsp;<a class=\"ext\" href=\"http://www.raspbian.org/\" target=\"_blank\" rel=\"external nofollow noopener\">Raspbian</a>&nbsp;中了，所以如果你安装的是最新版本或较新版本的树莓派都是支持SSH使用的。</p>\n<p>要使用SSH，第一，你需要知道你的树莓派的IP地址，在你的树莓派中输入以下命令：</p>\n<pre class=\"language-bash\"><code>sudo ifconfig</code></pre>\n<p><a class=\"ext\" href=\"https://learn.adafruit.com/adafruits-raspberry-pi-lesson-3-network-setup/finding-your-pis-ip-address\" target=\"_blank\" rel=\"external nofollow noopener\">会显示出三个段落</a>。你的IP地址将会在第一段或者第三段显示，这主要看你的树莓派是通过线缆还是通过WIFI适配器连接网络的。如果是通过线缆连接，那请查看第一段，在&ldquo;eth0&rdquo;那行开始显示。如果是通过wifi链接，将在第三段&ldquo;wlan0&rdquo;开头的地方显示。</p>\n<p>无论通过哪种方式，你将会看到以&ldquo;inet addr&rdquo;开头后面跟着像192.168.2.2这样类型的IP地址，这是我们在这篇文章中经常引用到的一种默认IP地址格式。</p>\n<p>现在你有一个可以连接树莓派与你的电脑的IP地址了，如果你使用的是Mac，你已经有了内置的SSH，启动你的终端应用并输入：</p>\n<pre class=\"language-bash\"><code>ssh pi@192.168.2.2</code></pre>\n<p>连接之后将会要求输入密码，默认情况下，密码一般是&ldquo;respberry&rdquo;.如果你修改了默认密码，请输入你的新密码。这样，您将登入了树莓派系统。</p>\n<p>如果你在一台PC，还需要附加的一个步骤。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201405/20/161616n7ch4ucc3op9z3ch.jpg\" alt=\"\" /></p>\n<p>下载并运行<a class=\"ext\" href=\"http://www.chiark.greenend.org.uk/~sgtatham/putty/\" target=\"_blank\" rel=\"external nofollow noopener\">PuTTY</a>或者其它支持Windows系统的SSH客户端。输入你的IP地址在如上截图中的输入框中。保持默认端口为22不变。然后安心回车，PuTTY将会提示你输入用户名和密码。输入之后，就可以开始在你的树莓派里远程工作了。</p>\n<h3>2) 使用远程桌面连接到你的树莓派</h3>\n<p>使用SSH去从命令行远程控制你的Pi是极好的，但是如果你想通过图形界面去管理你的Pi怎么办呢？幸运的是MAC和PC都已经内建了这种方式。</p>\n<p>在你的树莓派中的命令行（是的，你可以通过SSH来操作），输入：</p>\n<pre class=\"language-bash\"><code>sudo apt-get install xrdp</code></pre>\n<p>xdrp是一种在可以在后台运行的计算机<a class=\"ext\" href=\"http://en.wikipedia.org/wiki/Daemon_(computing)\" target=\"_blank\" rel=\"external nofollow noopener\">守护进程</a>，并支持Mac和PC上的微软远程桌面客户端。当树莓派中安装好xrdp之后，你的MAC或者PC就可以通过客户端登录到树莓派中了。</p>\n<p>找到你的电脑中一个叫远程桌面的客户端。它本身并不是隐藏起来的，但没有放到应用程序的文件夹中。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201405/20/161618no4g3hpsp6p3akwe.png\" alt=\"\" width=\"700\" /></p>\n<p>出现上述提示时输入你的IP地址。接下来会弹出xrdp窗口，提示你输入用户名和密码。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201405/20/161621ffx0l2f05752e0ry.png\" alt=\"\" width=\"700\" /></p>\n<p>如果进展顺利，你的树莓派桌面就会在你的电脑屏幕上的窗口里面显示出来了。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201405/20/161629lhogr9rg19bzk1yh.png\" alt=\"\" width=\"700\" /></p>\n<h3>3) 给你的树莓派设置一个家庭网络的静态地址</h3>\n<p>在之前（第一步）找到的树莓派的IP地址现在是可以连接的，但是不能保证你的路由器会一直给你的树莓派分配一个永久固定的IP地址。这意味着在你网段中的其它计算机无法知道树莓派被分配了什么IP地址。那么如何来给树莓派分配静态的IP地址而不是每隔几天就在树莓派上执行&ldquo;sudo ifconfig&rdquo;命令，或者糟糕到每隔几个小时一次？</p>\n<p>显然，我们要从&ldquo;ifconfig&rdquo;命令开始，所以输入：</p>\n<pre class=\"language-bash\"><code>sudo ifconfig</code></pre>\n<p>拿出笔和纸做准备，记录下面的三个IP地址。（#后面的代码是注释，实际不会显示.）：</p>\n<pre class=\"language-bash\"><code>inet addr: 192.168.2.2 # 树莓派的当前IP地址\nBcast: 192.168.0.255 # 地址广播范围\nMask: 255.255.255.0 # 子网掩码</code></pre>\n<p>此外，你还需要知道另外2个信息。请输入以下命令获取网关和目的地址（译注：实际上我们只需要知道默认网关的IP就行了）。</p>\n<pre class=\"language-bash\"><code>netstat -nr</code></pre>\n<p>接下来，去查看你路由器上的配置。（如何进行这一步主要取决于你用什么路由器，所以还是查看下说明书吧）找出你的设备通过DHCP设置了哪段ip地址。有些地址是不能使用的，因为DHCP协议中已经分配使用了。所以要选择没有被使用的，例如，192.168.2.2。你的路由器也许可以让你保留一个未使用的IP地址，固定分配给像树莓派这样的本地设备。（如果你的路由器是Belkin，那大概就是这样）如果是这样的，那就不用看下面的部分了。</p>\n<p>如果不能固定分配，你需要让树莓派知道它的新的ip地址。我们通过nano编辑器来编辑树莓派中相关的文件。</p>\n<pre class=\"language-bash\"><code>sudo nano /etc/network/interfaces</code></pre>\n<p>将&ldquo;iface eth0 inet dhcp&rdquo;这一段修改成&ldquo;iface eth0 inet static&rdquo;，也就是将动态获取IP修改成静态IP。</p>\n<p>接下来输入如下，将下列X取代成你之前所记下来的地址信息。最上面的地址是我们将要把DHCP中没有使用的IP地址分配作为树莓派的静态IP地址。</p>\n<pre class=\"language-bash\"><code>address 192.168.2.2\nnetmask XXX.XXX.XXX.X\nnetwork XXX.XXX.X.X\nbroadcast XXX.XXX.X.X\ngateway XXX.XXX.X.X</code></pre>\n<p>使用&ldquo;sudo reboot&rdquo;的命令重启树莓派系统后，在命令行再次输入&ldquo;ifconfig&rdquo;，我们刚刚新设置的静态IP设置就会呈现。</p>\n<h3>4) 端口转发至树莓派</h3>\n<p>一些树莓派程序可能需要你转发一个特定的网络端口号到你的树莓派。端口是信息在互联网传送的虚拟路径。有时候你需要转发一个端口来使像树莓派这样计算机可以被互联网访问，即使它在路由器后面。这种情况有点像拨电话分机号一样。</p>\n<p>端口转发能够用于像<a class=\"ext\" href=\"http://raspberrywebserver.com/serveradmin/get-your-raspberry-pi-web-site-on-line.html\" target=\"_blank\" rel=\"external nofollow noopener\">树莓派网页服务器</a>，树莓派的VOIP或者简单的点对点下载。有超过65000个端口可供选择，你可以分配不同的端口给不同的树莓派项目用来进行通信。</p>\n<p>某些端口默认情况下代表着特定的应用。例如80端口默认为HTML页面，21端口默认代表FTP传输，1194端口默认用于设置VPN服务器。所以大多数情况下，你应该选择默认的端口提供服务。</p>\n<p>设置端口转发的方法完全取决于你的路由器，于是很难创建一个固定的关于设置<a class=\"ext\" href=\"http://portforward.com/help/portforwarding.htm\" target=\"_blank\" rel=\"external nofollow noopener\">端口转发</a>教程。你只能阅读你路由器的说明书来定义端口和转发了。</p>\n<p>下面链接了几个主流路由器厂商的端口转发教程。</p>\n<ul>\n<li><a class=\"ext\" href=\"http://www.belkin.com/us/support-article?articleNum=10790\" target=\"_blank\" rel=\"external nofollow noopener\">Belkin</a></li>\n<li><a class=\"ext\" href=\"http://kb.netgear.com/app/answers/detail/a_id/24046/~/how-do-i-configure-port-forwarding-on-routers-with-the-netgear-genie-interface%3F\" target=\"_blank\" rel=\"external nofollow noopener\">Netgear</a></li>\n<li><a class=\"ext\" href=\"http://kb.linksys.com/Linksys/ukp.aspx?pid=80&amp;vw=1&amp;articleid=21470\" target=\"_blank\" rel=\"external nofollow noopener\">Linksys</a></li>\n</ul>\n<h3>5) 在互联网上给你的树莓派设置静态地址</h3>\n<p>再次声明，如果你的运营商给了你一个静态IP，你就不需要看这个部分了。</p>\n<p>我们已经给树莓派设置了一个静态的内部IP地址，这意味着在你的内部网络中总是能够连到你的树莓派。但是如果程序需要树莓派连接到互联网呢？如果你想要在你的树莓派上搭建一个Web服务器，在你网络之外的人们需要知道你的树莓派在哪里，这意味着我们要来设置一个像静态IP的公开地址。</p>\n<p>我之所以说&ldquo;看起来像&rdquo;是因为我们已经设置了一个伪静态IP地址。通常，你所在的运营商将会不断变换分配给你的地址。所以每一次有人连接到你的树莓派时，我们就要写个脚本说：&ldquo;树莓派已经搬家了，让我带你去新的地址吧！ &rdquo;</p>\n<p>我们可以通过<a class=\"ext\" href=\"http://en.wikipedia.org/wiki/Dynamic_DNS\" target=\"_blank\" rel=\"external nofollow noopener\">DDNS</a>（即动态DNS）来实现，它实时维护名字解析，并通过&nbsp;<a class=\"ext\" href=\"http://sourceforge.net/p/ddclient/wiki/Home/\" target=\"_blank\" rel=\"external nofollow noopener\">DDClient</a>&nbsp;程序通知DDNS修改指向到你的树莓派。</p>\n<p>首先需要注册一个类似<a class=\"ext\" href=\"https://www.dnsdynamic.org/\" target=\"_blank\" rel=\"external nofollow noopener\">DNS Dynamic</a>的动态主机服务。根据指示并创建新的名称服务器类似Yourserver.dnsdynamic.com.</p>\n<p>接下来进入树莓派中的命令行，使用下面命令来安装DDNS客户端：</p>\n<pre class=\"language-bash\"><code>sudo apt-get install ddclient</code></pre>\n<p>我们需要编辑DDNS客户端配置，使用新的名称服务器：</p>\n<pre class=\"language-bash\"><code>sudo nano /etc/ddclient/ddclient.conf</code></pre>\n<p>每种服务配置都会有略微的不同，但是DDNS的网站会告诉你需要在配置文件中修改的内容。一个标准的DDNS配置，举个栗子，如&nbsp;<a class=\"ext\" href=\"http://dnsdynamic.blog.com/2011/06/26/using-ddclient-with-dnsdynamic/\" target=\"_blank\" rel=\"external nofollow noopener\">DDNS配置</a>，可以直接复制粘贴。</p>\n<p>你的运营商不会因为你的这个文件而停止更新给你分配的IP地址，因此我们在脚本的最前面设置一个守护进程执行的频度，以确保及时检查IP地址是否已经更改。</p>\n<pre class=\"language-bash\"><code>daemon=600\n# check every 600 seconds</code></pre>\n<p>这里设置的是每10分钟检查一次，这是一个不错的选择。如果你设置成每秒钟检查一次，你的动态服务器恐怕不干，因为这样对它来说是一种轰炸。记得按下ctrl+x保存并退出配置文件。</p>\n<p>接下来，输入：</p>\n<pre class=\"language-bash\"><code>ddclient</code></pre>\n<p>如上输入程序的名称就可以运行了。当你的树莓派开着的时候就会持续运行了。如果你重启树莓派，键入 &ldquo;ddclient&rdquo;就会重新开始运行了。</p>\n<p>现在你的树莓派已经被装修一番，可以迎接更高级的教程了，请从中获得更多乐趣吧！</p>\n<h3>关于作者：</h3>\n<p>本文的美女作者：<a class=\"ext\" href=\"http://readwrite.com/author/lauren-orsini#awesm=%7EoEMljxDCpMKnXj\" target=\"_blank\" rel=\"external nofollow noopener\">Lauren Orsini</a>是一个专业记者、业余程序员和全职宅女，她住在饱受交通之苦的Arlington, VA。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201405/20/161632iaa8h7z8eizbe6ae.jpg\" alt=\"Lauren Orsini\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>Lauren Orsini</em></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\">&nbsp;</p>\n<p class=\"article_img_desc\" style=\"text-align: center;\">&nbsp;</p>\n<p class=\"article_img_desc\" style=\"text-align: center;\">&nbsp;</p>\n<p class=\"article_img_desc\" style=\"text-align: center;\">&nbsp;</p>\n<hr />\n<p>via:&nbsp;<a class=\"ext\" href=\"http://readwrite.com/2014/04/09/raspberry-pi-projects-ssh-remote-desktop-static-ip-tutorial#feed=/hack&amp;awesm=%7EoB1b7zvteUQGOV\" target=\"_blank\" rel=\"external nofollow noopener\">http://readwrite.com/2014/04/09/raspberry-pi-projects-ssh-remote-desktop-static-ip-tutorial#feed=/hack&amp;awesm=~oB1b7zvteUQGOV</a></p>\n<p>译者：<a class=\"ext\" href=\"https://github.com/disylee\" target=\"_blank\" rel=\"external nofollow noopener\">disylee</a>&nbsp;校对：<a class=\"ext\" href=\"https://github.com/wxy\" target=\"_blank\" rel=\"external nofollow noopener\">wxy</a></p>\n<p>本文由&nbsp;<a class=\"ext\" href=\"https://github.com/LCTT/TranslateProject\" target=\"_blank\" rel=\"external nofollow noopener\">LCTT</a>&nbsp;原创翻译，<a href=\"https://linux.cn/article-3056-1.html\">Linux中国</a>&nbsp;荣誉推出</p>','2015-05-20 19:57:57','2019-09-18 12:02:16','2019-09-18 12:02:16',NULL);
/*!40000 ALTER TABLE `articles` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `articles_en`
--

DROP TABLE IF EXISTS `articles_en`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `articles_en` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `article_id` int(10) unsigned NOT NULL COMMENT '关联主表 id',
  `title` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `source` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `description` mediumtext COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `content` longtext COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=40 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `articles_en`
--

LOCK TABLES `articles_en` WRITE;
/*!40000 ALTER TABLE `articles_en` DISABLE KEYS */;
INSERT INTO `articles_en` VALUES (1,1,NULL,NULL,NULL,NULL,'2019-06-26 02:30:51','2019-07-02 03:24:55'),(2,2,NULL,NULL,NULL,NULL,'2019-06-26 03:42:08','2019-07-02 03:41:23'),(3,3,NULL,NULL,NULL,NULL,'2019-06-26 03:53:30','2019-07-02 07:44:09'),(4,4,NULL,NULL,NULL,NULL,'2019-06-26 13:04:33','2019-07-02 07:48:42'),(5,5,NULL,NULL,NULL,NULL,'2019-06-27 01:47:18','2019-07-02 07:55:05'),(6,6,NULL,NULL,NULL,NULL,'2019-06-27 02:40:30','2019-07-03 05:48:09'),(7,7,NULL,NULL,NULL,NULL,'2019-06-27 02:43:33','2019-07-03 05:53:12'),(8,8,NULL,NULL,NULL,NULL,'2019-06-27 03:14:29','2019-07-03 05:58:00'),(9,9,NULL,NULL,NULL,NULL,'2019-06-27 03:20:53','2019-07-08 11:06:11'),(10,10,NULL,NULL,NULL,NULL,'2019-06-27 03:25:05','2019-07-07 07:55:19'),(11,11,NULL,NULL,NULL,NULL,'2019-06-27 03:28:37','2019-07-07 08:01:41'),(12,12,NULL,NULL,NULL,NULL,'2019-06-27 03:38:15','2019-07-07 08:04:24'),(13,13,NULL,NULL,NULL,NULL,'2019-06-27 11:21:21','2019-07-07 08:06:46'),(14,14,NULL,NULL,NULL,NULL,'2019-06-27 11:25:38','2019-07-07 08:11:35'),(15,15,NULL,NULL,NULL,NULL,'2019-06-27 11:35:50','2019-07-07 08:17:48'),(16,16,NULL,NULL,NULL,NULL,'2019-06-27 11:42:36','2019-07-07 08:19:24'),(17,17,NULL,NULL,NULL,NULL,'2019-06-27 12:39:19','2019-07-07 08:22:55'),(18,18,NULL,NULL,NULL,NULL,'2019-06-28 08:06:15','2019-07-07 08:25:37'),(19,19,'linux简单之美','https://linux.cn/article-3254-1.html','话说windows也有syscall，这是必须的。但是win的syscall可以直接call吗？可以是\n\n可以但是破费周折，搞成SDT之类的复杂概念。下面看看linux是如何做的吧。','<p>话说windows也有syscall，这是必须的。但是win的syscall可以直接call吗？可以是</p>\n<p>可以但是破费周折，搞成SDT之类的复杂概念。下面看看linux是如何做的吧。</p>\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/07/337e1dc84736f2b5b2e2d4db47c4424f.jpeg-pic540\" alt=\"\" width=\"256\" height=\"256\" /></p>\n<pre class=\"language-vim\"><code>section .data\nmsg db \"hello hopy!\",0x0a\n \nsection .text\nglobal _start\n \n_start:\n	mov eax,4\n	mov ebx,1\n	mov ecx,msg\n	mov edx,12\n	int 0x80\n	\n	mov eax,1\n	mov ebx,0\n	int 0x80</code></pre>\n<p>关键是系统调用号要知道，开始找的是usr/include/asm-gen*/unistd.h，</p>\n<p>可是都不对。后来找的是usr/include/x86_64_linux_gnu/asm/下的头文件，</p>\n<p>有2个，分别对应x86和x64.、编译连接指令如下:</p>\n<pre class=\"language-bash\"><code>nasm -f elf main.asm\nld main.o</code></pre>\n<p>运行，段转储错误鸟，查了一下，本猫用的是x64位的linux，所以要生成</p>\n<p>x64位的程序，或者指明是x86的程序，我选择后者:</p>\n<pre class=\"language-bash\"><code>ld -m elf_i386 -o main main.o</code></pre>\n<p>哦鸟！</p>\n<h3>（二）</h3>\n<p>我们在前一章中看到了如何仅仅用syscall做一些简单的事,现在我们看能不能直接调用</p>\n<p>C标准库中的函数快速做一些\"复杂\"的事:</p>\n<pre class=\"language-bash\"><code>section .data\n	ft db \"now is %d\",10\n \nsection .text\nextern puts\nextern exit\nextern sleep\nextern printf\nglobal main\n \nmain:\n	mov edi,11\nagain:	\n	dec edi\n	push edi\n	push ft\n	call printf\n	\n	push 1\n	call sleep\n	\n	cmp edi,0\n	jnz again\n \n	push msg\n	call puts\n	\n	push 0\n	call exit\n	\nmsg:\n db \"happy xxx day!\",0</code></pre>\n<p>以上代码功能很简单,从10倒数到0,然后打印一行,最后结束.与之前代码不同的是其中</p>\n<p>调用了C标准库中的函数.编译和以前一样:</p>\n<pre class=\"language-markup\"><code>nasm -e elf main.asm</code></pre>\n<p>我们看看怎么连接:</p>\n<pre class=\"language-markup\"><code>gcc -m32 -o main main.o</code></pre>\n<p>好鸟!运行正常.</p>\n<p>值得注意的是:我的OS是ubuntu64,而asm代码中是32位的,如果开始用</p>\n<pre class=\"language-markup\"><code>ld -m elf_i386 -lc -o main main.o</code></pre>\n<p>的方式,首先会提示找不到c库,这可以进入/usr/lib,然后使用</p>\n<pre class=\"language-markup\"><code>sudo ln -sv /lib/i386-linux-gun/libc.so.6 libc.so</code></pre>\n<p>创建软连接解决.</p>\n<p>但在运行时提示无法找到可执行文件!该文件明明在的!</p>\n<p>遂用gcc来连接,但要将_start改为main,还要装载32库</p>\n<pre class=\"language-markup\"><code>sudo apt-get install ia32-libs</code></pre>\n<p>还会提示找不到h文件,这时再装载库</p>\n<pre class=\"language-markup\"><code>sudo apt-get install g++-multilib</code></pre>\n<p>还有2族库,如有必要也可加载:</p>\n<pre class=\"language-bash\"><code>sudo apt-get install libc6:i386 libgcc1:i386 gcc-4.6-base:i386 \nlibstdc++5:i386 libstdc++6:i386\nsudo apt-get install libc6-i386</code></pre>\n<p>最后要说的是,一些C代码在用std=c99编译时会发现提示无法获取结构大小,</p>\n<p>这时改成如下即可:</p>\n<pre class=\"language-markup\"><code>gcc -D_GNU_SOURCE -std=c99 main.c</code></pre>\n<h3>&nbsp;（三）</h3>\n<p>在（二）中我们尝试使用了C库的函数完成功能,那么能不能用syscall方式</p>\n<p>来搞呢?显然可以!</p>\n<pre class=\"language-bash\"><code>section .data\n	ft db \"now is X\",10\n \nsection .text\nglobal _start\n \n_start:\n	mov edi,10\nagain:\n	dec edi\n	mov eax,edi\n	add eax,0x30\n	mov byte [ft+7],al\n \n	mov eax,4\n	mov ebx,1\n	mov ecx,ft\n	mov edx,9\n	int 0x80\n \n	mov eax,162\n	push 0\n	push 1\n	mov ebx,esp\n	mov ecx,0\n	int 0x80\n	\n	cmp edi,0\n	jnz again\n	\n	mov eax,4\n	mov ebx,1\n	mov ecx,msg\n	mov edx,15\n	int 0x80\n	\n	mov eax,1\n	mov ebx,0\n	int 0x80\n	\nmsg:\n db \"happy xxx day!\",10</code></pre>\n<p>--</p>\n<pre class=\"language-bash\"><code>nasm -f elf main.asm\nld -m elf_i386 -o main main.o</code></pre>\n<p>在代码中延时使用的是nanosleep,其他和第一篇一致,只不过做了一个bin-&gt;ascii的小转换</p>\n<p>&nbsp;</p>\n<hr />\n<p>via：&nbsp;<a class=\"ext\" href=\"http://blog.csdn.net/mydo/article/details/8224352\" target=\"_blank\" rel=\"external nofollow noopener\">http://blog.csdn.net/mydo/article/details/8224352</a>&nbsp;<a class=\"ext\" href=\"http://blog.csdn.net/mydo/article/details/8452386\" target=\"_blank\" rel=\"external nofollow noopener\">http://blog.csdn.net/mydo/article/details/8452386</a>&nbsp;<a class=\"ext\" href=\"http://blog.csdn.net/mydo/article/details/8452417\" target=\"_blank\" rel=\"external nofollow noopener\">http://blog.csdn.net/mydo/article/details/8452417</a></p>','2019-07-27 13:17:36','2019-07-27 13:17:36'),(20,20,'C编程vim初步配置','https://linux.cn/article-3330-1.html','vundle(用于插件管理)\ntaglist(显示代码结构)\nNERD_Tree(树形目录)\nYouCompleteMe(智能补全)\nSyntastic( 语法检查)','<h3>我的 .vimrc文件</h3>\n<pre class=\"language-vim\"><code>\"********************************************************\n\"                   一般性配置                          *\n\"********************************************************\n \n\"关闭vim一致性原则\nset nocompatible\n \n\"显示行号\nset number\n \n\"设置在编辑过程中右下角显示光标的行列信息\nset ruler\n \n\"在状态栏显示正在输入的命令\nset showcmd\n \n\"设置历史记录条数\nset history=1000\n \n\"设置取消备份 禁止临时文件的生成\nset nobackup\nset noswapfile\n \n\"设置匹配模式\nset showmatch\n \n\"设置C/C++方式自动对齐\nset autoindent\nset cindent\n \n\"开启语法高亮功能\nsyntax enable\nsyntax on\n \n\"指定配色方案为256色\nset t_Co=256\n \n\"设置搜索时忽略大小写\nset ignorecase\n \n\"配置backspace的工作方式\nset backspace=indent,eol,start\n \n\"设置在vim中可以使用鼠标\nset mouse=a\n \n\"设置tab宽度\nset tabstop=4\n \n\"设置自动对齐空格数\nset shiftwidth=4\n \n\"设置退格键时可以删除4个空格\nset smarttab\nset softtabstop=4\n \n\"将tab键自动转换为空格\nset expandtab\n \n\"设置编码方式\nset encoding=utf-8\n \n\"自动判断编码时 依次尝试以下编码\nset fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1\n \n\"检测文件类型\nfiletype on\n \n\"针对不同的文件采取不同的缩进方式\nfiletype indent on\n \n\"允许插件\nfiletype plugin on\n \n\"启动智能补全\nfiletype plugin indent on\n \n \n\"*********************************************************\n\"                  vundle 配置                           *\n\"*********************************************************\n \nset rtp+=~/.vim/bundle/vundle/\ncall vundle#rc()\n \n\" let Vundle manage Vundle\nBundle \'gmarik/vundle\'\n  \n\" My Bundles here:\n \nBundle \'tpope/vim-fugitive\'\nBundle \'Lokaltog/vim-easymotion\'\nBundle \'rstacruz/sparkup\', {\'rtp\': \'vim/\'}\nBundle \'tpope/vim-rails.git\'\nBundle \'taglist.vim\'\nBundle \'The-NERD-tree\'\nBundle \'Syntastic\'\nBundle \'L9\'\nBundle \'FuzzyFinder\'\nBundle \'Lokaltog/vim-powerline\'\nBundle \'Valloric/YouCompleteMe\' \n   \n \n\"*****************************************************\n\"                   taglist配置                      *\n\"*****************************************************\n \n\"不显示\"press F1 to display help\"\nlet Tlist_Compact_Format=1\n \n\"窗口在左侧显示\nlet Tlist_Use_Right_Window=1\n \n\"只显示当前文件的tags\nlet Tlist_Show_One_File=1  \n \n\"高亮显示\nlet Tlist_Auto_Highlight_tag=1\n \n\"随文件自动更新\nlet Tlist_Auto_Update=1\n \n\"设置宽度\nlet Tlist_WinWidth=30       \n \n\"taglist窗口是最后一个窗口，则退出vim\nlet Tlist_Exit_OnlyWindow=1 \n \n\"单击跳转\nlet Tlist_Use_SingClick=1\n \n\"打开关闭快捷键\nnnoremap &lt;silent&gt; &lt;F8&gt; :TlistToggle&lt;CR&gt;\n \n \n \n \n\"********************************************************\n\"                      NERD_Tree 配置                   *\n\"********************************************************\n \n\"显示增强\nlet NERDChristmasTree=1\n \n\"自动调整焦点\nlet NERDTreeAutoCenter=1\n \n\"鼠标模式:目录单击,文件双击\nlet NERDTreeMouseMode=2\n \n\"打开文件后自动关闭\nlet NERDTreeQuitOnOpen=1\n \n\"显示文件\nlet NERDTreeShowFiles=1\n \n\"显示隐藏文件\nlet NERDTreeShowHidden=1\n \n\"高亮显示当前文件或目录\nlet NERDTreeHightCursorline=1\n \n\"显示行号\nlet NERDTreeShowLineNumbers=1\n \n\"窗口位置\nlet NERDTreeWinPos=\'left\'\n \n\"窗口宽度\nlet NERDTreeWinSize=31\n \n\"不显示\'Bookmarks\' label \'Press ? for help\'\nlet NERDTreeMinimalUI=1\n \n\"快捷键\nnnoremap &lt;silent&gt; &lt;F4&gt; :NERDTreeToggle&lt;CR&gt;\n \n \n \n\"*****************************************************\n\"           YouCompleteMe配置                        *\n\"*****************************************************\n \n\"leader映射为逗号&ldquo;，&rdquo;\nlet mapleader = \",\"  \n \n\"配置默认的ycm_extra_conf.py\nlet g:ycm_global_ycm_extra_conf = \'~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py\' \n \n\"按,jd 会跳转到定义\nnnoremap &lt;leader&gt;jd :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt;   \n \n\"打开vim时不再询问是否加载ycm_extra_conf.py配置\nlet g:ycm_confirm_extra_conf=0   \n \n\"使用ctags生成的tags文件\nlet g:ycm_collect_identifiers_from_tag_files = 1 \n \n \n\"*****************************************************\n\"           Syntastic配置                            *\n\"*****************************************************\n \n \nlet g:Syntastic_check_on_open=1</code></pre>\n<p>&nbsp;</p>\n<h3>效果图</h3>\n<p><img src=\"https://net.lnmpa.top/thumbnail/2019/08/2b6738a1f994a8d4e71bd74f67d368e5.png-pic540\" alt=\"\" width=\"540\" height=\"394\" /></p>\n<p><img src=\"https://net.lnmpa.top/editor/2019/08/1c527a9c17d89cf055bd55c247385465.png-pic540\" alt=\"\" width=\"540\" height=\"401\" /></p>\n<p>&nbsp;</p>\n<h3>用到的主要插件</h3>\n<ul>\n<li>vundle(用于插件管理)</li>\n<li>taglist(显示代码结构)</li>\n<li>NERD_Tree(树形目录)</li>\n<li>YouCompleteMe(智能补全)</li>\n<li>Syntastic( 语法检查)</li>\n</ul>\n<p>学习时间不长，如有问题请指出！感谢！</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<hr />\n<p class=\"copyright\"><span class=\"z\">原创：<a href=\"https://linux.cn/\" target=\"_blank\" rel=\"noopener\">Linux中国</a>&nbsp;<a href=\"https://linux.cn/article-3330-1.html\" target=\"_blank\" rel=\"noopener\">https://linux.cn/article-3330-1.html</a></span><span class=\"y\">作者： 零度王爵</span><br class=\"clear\" /><br />本文由本站网友原创，<a href=\"https://linux.cn/article-3330-1.html\">Linux中国首发</a>。也想发表您的文章，为开源做一些自己的贡献么？欢迎<a href=\"https://linux.cn/forum.php?mod=post&amp;action=newthread&amp;fid=119\" target=\"_blank\" rel=\"noopener\">投递</a>！&nbsp;<br class=\"clear\" />欢迎遵照&nbsp;<a href=\"http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh\" target=\"_blank\" rel=\"noopener\">CC-BY-NC-SA 协议规定</a>转载，敬请在正文中标注并保留原文/译文链接和作者/译者等信息。&nbsp;<br class=\"clear\" />文章仅代表作者的知识和看法，如有不同观点，请楼下排队<a>吐槽</a>&nbsp;:D&nbsp;</p>\n<div class=\"o cl ptm pbm\">&nbsp;</div>','2019-08-30 13:35:43','2019-08-30 13:35:43'),(21,21,'Markdown的各种扩展','https://linux.cn/article-3367-1.html','Markdown在标准语法（http://daringfireball.net/projects/markdown/syntax ）之外，还支持各种扩展。\n\nMarkdown的php解析与实现，并且增加了许多有用的扩展。PHP Markdown Extra其中几个比较重要的改进有：\n\n支持在html块元素中插入markdown语法\n支持为一些元素添加id或class，比如为header添加id属性，用带锚点的链接导航。例如：','<p>Markdown在标准语法（<a class=\"ext\" href=\"http://daringfireball.net/projects/markdown/syntax\" target=\"_blank\" rel=\"external nofollow noopener\">http://daringfireball.net/projects/markdown/syntax</a>&nbsp;）之外，还支持各种扩展。</p>\n<p><img style=\"float: left;\" src=\"https://net.lnmpa.top/thumbnail/2019/08/8347c7ca66d9b872a3b0622f30784e09.png-water\" alt=\"\" width=\"128\" height=\"128\" /></p>\n<h3>&nbsp;</h3>\n<h3>&nbsp;</h3>\n<h3>&nbsp;</h3>\n<h3 id=\"blogTitle0\">PHP Markdown Extra</h3>\n<p>Markdown的php解析与实现，并且增加了许多有用的扩展。<a class=\"ext\" href=\"https://michelf.ca/projects/php-markdown/extra/\" target=\"_blank\" rel=\"external nofollow noopener\">PHP Markdown Extra</a>其中几个比较重要的改进有：</p>\n<ul>\n<li>支持在html块元素中插入markdown语法</li>\n<li>支持为一些元素添加id或class，比如为header添加id属性，用带锚点的链接导航。例如：</li>\n</ul>\n<pre class=\"language-markdown\"><code>[Link back to header 1](#header1)\n \nHeader 1            {#header1}\n========\n \n## Header 2 ##      {#header2}</code></pre>\n<p>支持元素包括header、code block、link、image</p>\n<ul>\n<li>支持将代码块用`或者~包起来，这样可以避免一些二义，还可以为代码块添加id或class</li>\n</ul>\n<pre class=\"language-markdown\"><code>~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \n{.html #example-1}\n&lt;p&gt;paragraph &lt;b&gt;emphasis&lt;/b&gt;\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~</code></pre>\n<ul>\n<li>支持手写的表格：</li>\n</ul>\n<pre class=\"language-markdown\"><code>| Function name | Description                    |\n| ------------- | ------------------------------ |\n| `help()`      | Display the help window.       |\n| `destroy()`   | **Destroy your computer!**     |</code></pre>\n<ul>\n<li>支持dl和dt在markdown中的对应语法</li>\n<li>支持脚注引用</li>\n</ul>\n<pre class=\"language-markdown\"><code>That\'s some text with a footnote.[^1]\n \n[^1]: And that\'s the footnote.</code></pre>\n<ul>\n<li>支持专有名词abbr</li>\n<li>避免下划线出现在单词中间，导致斜体输出</li>\n</ul>\n<p>&nbsp;</p>\n<h3 id=\"blogTitle1\">Maruku</h3>\n<p>在&rdquo;始作俑者PHP Markdown Extra&rdquo;后，很多基于Ruby的Markdown解释器开始浮现。其中，<a class=\"ext\" href=\"https://github.com/bhollis/maruku\" target=\"_blank\" rel=\"external nofollow noopener\">Maruku</a>号称：</p>\n<ul>\n<li>支持原生Markdown</li>\n<li>支持所有PHP Markdown Extra的特性</li>\n<li>支持新的元数据语法，实际上就是给元素添加属性的能力</li>\n<li>支持<a class=\"ext\" href=\"https://github.com/bhollis/maruku/blob/master/docs/math.md\" target=\"_blank\" rel=\"external nofollow noopener\">公式格式</a>输出</li>\n</ul>\n<p>Maruku的语法详见<a class=\"ext\" href=\"https://github.com/bhollis/maruku/blob/master/docs/markdown_syntax.md\" target=\"_blank\" rel=\"external nofollow noopener\">这里</a></p>\n<p>不过，该项目已经停止维护了。</p>\n<h3 id=\"blogTitle2\">kramdown</h3>\n<p>同样是ruby开发的解释器，<a class=\"ext\" href=\"http://kramdown.gettalong.org/quickref.html\" target=\"_blank\" rel=\"external nofollow noopener\">kramdown</a>吸取了Maruku几乎所有的特点，功能更为强大。其中有特点的功能有：</p>\n<ol>\n<li>改进了一些二义语法</li>\n<li>引入EOB标记^作为块元素的分隔符</li>\n<li>手写table的语法更加强大一些，支持table中的header和footer</li>\n<li>同样支持ALD(Attribute List Definitions属性列表定义)</li>\n<li>还支持注释，以及在转化时配置一些转化选项</li>\n</ol>\n<p><a class=\"ext\" href=\"https://help.github.com/articles/migrating-your-pages-site-from-maruku\" target=\"_blank\" rel=\"external nofollow noopener\">Github-Page推荐使用这个解释器</a></p>\n<h3 id=\"blogTitle3\">RDiscount</h3>\n<p><a class=\"ext\" href=\"http://dafoster.net/projects/rdiscount/\" target=\"_blank\" rel=\"external nofollow noopener\">RDiscount</a>又是一个基于Ruby开发的解释器，不过它是基于<a class=\"ext\" href=\"http://www.pell.portland.or.us/~orc/Code/discount/\" target=\"_blank\" rel=\"external nofollow noopener\">Discount</a>的语法移植的，所以语法规则需要参考<a class=\"ext\" href=\"http://www.pell.portland.or.us/~orc/Code/discount/#Language.extensions\" target=\"_blank\" rel=\"external nofollow noopener\">Discount</a>。其语法支持几种上面没有提到过的特性：</p>\n<ul>\n<li>文本居中，即输出： &lt;center&gt;</li>\n<li>图片大小定义：&nbsp;![dust mite](http://dust.mite =150x150)</li>\n</ul>\n<ul>\n<li>输出alpha列表： &lt;ol type=\'a\'&gt;&lt;/ol&gt;</li>\n</ul>\n<h3 id=\"blogTitle4\">Redcarpet</h3>\n<p><a class=\"ext\" href=\"https://github.com/vmg/redcarpet\" target=\"_blank\" rel=\"external nofollow noopener\">Redcarpet</a>是一个转化库，可以在标准Markdown的基础上，配置一些额外的功能：</p>\n<ul>\n<li>单词中间的_不处理</li>\n<li>转化PHP-Markdown风格的手写表格</li>\n<li>转化PHP-Markdown风格的带包含的代码块，也可禁用标准markdown的代码块语法</li>\n<li>自动link生成</li>\n<li>删除线支持：~~good~~</li>\n<li>高亮标签&lt;mark&gt;&lt;/mark&gt;通过==highlighted==输出</li>\n<li>引用标签&lt;q&gt;&lt;/q&gt;通过\"quote\"输出</li>\n<li>转化PHP-Markdown风格脚注</li>\n<li>一些二义性的约束支持</li>\n</ul>\n<h3 id=\"blogTitle5\">Github支持</h3>\n<p>Github Page对于上述的基于Ruby的markdown是支持的，从<a class=\"ext\" href=\"https://pages.github.com/versions/\" target=\"_blank\" rel=\"external nofollow noopener\">这里</a>可以看到。另外，Github对于Issue、comments等，还定义了GFM(<a class=\"ext\" href=\"https://help.github.com/articles/github-flavored-markdown\" target=\"_blank\" rel=\"external nofollow noopener\">GitHub Flavored Markdown</a>)，其中的语法一般基本来源于上面的提到的东西。除此之外，github还支持一些额外的特性：</p>\n<ul>\n<li>支持把列表变成带勾选框的任务列表</li>\n</ul>\n<pre class=\"language-markdown\"><code>- [x] @mentions, #refs, [links](), **formatting**, and &lt;del&gt;tags&lt;/del&gt; are supported \n- [x] list syntax is required (any unordered or ordered list supported) \n- [x] this is a complete item \n- [ ] this is an incomplete item</code></pre>\n<ul>\n<li>站内对分支、问题、用户等对象的直接引用</li>\n<li><a class=\"ext\" href=\"http://www.emoji-cheat-sheet.com/\" target=\"_blank\" rel=\"external nofollow noopener\">表情</a>&nbsp;</li>\n</ul>\n<p>&nbsp;</p>\n<p>&nbsp;</p>','2019-08-30 14:05:16','2019-08-30 14:08:04'),(22,22,'教你用NeoBundle管理Vim插件','https://linux.cn/article-3433-1.html','我们为什么要使用插件管理器？Vim 支持大量插件，但是由于它没有严格定义框架，插件的文件可以胡乱分布在不同目录下，导致用户管理起来会很困难（LCTT：当然，前提是你有很多插件，还有点小小的强迫症，觉得理一理这些插件心里会舒服点）。而一款插件管理器能让管理变得简单许多。Pathogen, Vundle 和 NeoBundle 的工作就是为不同插件建立一个目录，然后将这些目录扔到 ~/.vim/bundle 目录下。这个文件整理方法可以让你方便彻底地删除插件，使用 \'rm -rf <插件目录>\' 或直接在文件管理器里面把插件所在的目录删除就可以了，绝对绿色环保无残留。同时，这种方法还能最大程度避免插件与插件之间的不兼容性。','<p><a class=\"ext\" href=\"https://github.com/Shougo/neobundle.vim\" target=\"_blank\" rel=\"external nofollow noopener\">NeoBundle</a>&nbsp;是一个&nbsp;<a class=\"ext\" href=\"http://olex.openlogic.com/packages/vim\" target=\"_blank\" rel=\"external nofollow noopener\">Vim</a>&nbsp;的插件管理器，以&nbsp;<a class=\"ext\" href=\"https://github.com/gmarik/Vundle.vim\" target=\"_blank\" rel=\"external nofollow noopener\">Vundle</a>&nbsp;为基础（Vundle 是一个基于&nbsp;<a class=\"ext\" href=\"https://github.com/tpope/vim-pathogen\" target=\"_blank\" rel=\"external nofollow noopener\">Pathogen</a>&nbsp;的 Vim 插件管理器）。在之前的文章中，我<a class=\"ext\" href=\"http://www.openlogic.com/wazi/bid/262302/Three-tools-for-managing-Vim-plugins\" target=\"_blank\" rel=\"external nofollow noopener\">非常不推荐使用 Neobundle</a>，原因是它当时还处于高速开发阶段（LCTT：意味着不稳定、变数大），并且当时它的英文文档很少。现在，已经过了一年多了，这两个问题都早已不再是问题。</p>\n<p>我们为什么要使用插件管理器？Vim 支持大量插件，但是由于它没有严格定义框架，插件的文件可以胡乱分布在不同目录下，导致用户管理起来会很困难（LCTT：当然，前提是你有很多插件，还有点小小的强迫症，觉得理一理这些插件心里会舒服点）。而一款插件管理器能让管理变得简单许多。Pathogen, Vundle 和 NeoBundle 的工作就是为不同插件建立一个目录，然后将这些目录扔到 ~/.vim/bundle 目录下。这个文件整理方法可以让你方便彻底地删除插件，使用 \'rm -rf &lt;插件目录&gt;\' 或直接在文件管理器里面把插件所在的目录删除就可以了，绝对绿色环保无残留。同时，这种方法还能最大程度避免插件与插件之间的不兼容性。</p>\n<p class=\"article_img\"><img src=\"https://net.lnmpa.top/thumbnail/2019/09/fc68088d8059e624bc094a710f65aa2b.png-water\" alt=\"\" width=\"512\" height=\"512\" /></p>\n<p>NeoBundle 是一个基于 Vundle 的项目，如同 Vundle，它们都可以安装和升级插件。然而 NeoBundle 的说明文件上明确指出：&ldquo;NeoBundle 不是一个稳定的插件管理器，如果你想要一个稳定的，请选择 Vundle&rdquo;。最新的 release-note 上也有警告&ldquo;可能会造成兼容性问题&rdquo;&mdash;&mdash;这是一个开发者写的注解，说明这个管理器还不能让人放心使用。</p>\n<p>所以，我们为什么要使用 NeoBundle？它都不能保证稳定运行！好吧，它还是有可取之处的。Vundle 只支持&nbsp;<a class=\"ext\" href=\"http://olex.openlogic.com/packages/git\" target=\"_blank\" rel=\"external nofollow noopener\">Git</a>&nbsp;这种版本控制系统，而 NeoBundle 可以支持&nbsp;<a class=\"ext\" href=\"http://olex.openlogic.com/packages/subversion\" target=\"_blank\" rel=\"external nofollow noopener\">Subversion</a>&nbsp;和&nbsp;<a class=\"ext\" href=\"http://olex.openlogic.com/packages/mercurial\" target=\"_blank\" rel=\"external nofollow noopener\">Mercurial</a>。另一个原因是如果你不想插件升级时破坏你的 Vim 生态环境，你可以锁住 NeoBundle，让它只使用某个插件的固定版本。</p>\n<p>另外，NeoBundle 创建者，Shougo Matsuishita（LCTT：名字看着像日本人），正在将它的命令接口添加到其他插件项目，以便减少他们的命令使用量。现在 NeoBundle 支持3种插件：<a class=\"ext\" href=\"https://github.com/Shougo/unite.vim\" target=\"_blank\" rel=\"external nofollow noopener\">unite.vim</a>，Vim 使用的文件和缓存管理器；<a class=\"ext\" href=\"https://github.com/Shougo/vimshell.vim/blob/master/doc/vimshell.txt\" target=\"_blank\" rel=\"external nofollow noopener\">vimshell.vim</a>，Vim 使用的脚本程序；<a class=\"ext\" href=\"https://github.com/Shougo/vimproc.vim/blob/master/doc/vimproc.txt\" target=\"_blank\" rel=\"external nofollow noopener\">vimproc.vim</a>，运行于 vimshell.vim 中，用于对异步事件的支持。上面说的都是特殊案例，缺少英文文档，所以用户希望有人能完善它们。在正式使用它们之前，我们需要把注意力先集中在一些基本操作上。</p>\n<h3 id=\"toc_1\">安装并初始化 NeoBundle</h3>\n<p>NeoBundle 支持 Vim 7.2.051 或更高版本，需要 git 和&nbsp;<a class=\"ext\" href=\"http://olex.openlogic.com/packages/curl\" target=\"_blank\" rel=\"external nofollow noopener\">cURL</a>（用于下载文件）。你可以手动下载 NeoBundle，也可以使用 cURL 下载它在 GitHub 上的库。在你的 home 目录下使用如下命令，可以将 NeoBundle 插件下载到 .vim/bundle/neobundle.vim 目录里，然后 NeoBundle 就能管理它自己了。</p>\n<pre class=\"language-bash\"><code>curl https://raw.githubusercontent.com/Shougo/neobundle.vim/master/bin/install.sh | sh</code></pre>\n<p>你还需要修改 .vimrc 文件。NeoBundle 的 GitHub 主页提供一个 .vimrc 范本，但是直接使用这个范本，NeoBundle 需要你安装5个可能不需要插件。如果不需要它们，你可以使用下面的最小配置：</p>\n<pre class=\"language-bash\"><code>if has(\'vim_starting\')\nset nocompatible\nset runtimepath+=~/.vim/bundle/neobundle.vim/\ncall neobundle#begin(expand(\'~/.vim/bundle/\'))\nNeoBundleFetch \'Shougo/neobundle.vim\'call neobundle#end()\nfiletype plugin indent on</code></pre>\n<p>上述配置的作用是：启动 NeoBundle 并且像其他插件一样升级自己。NeoBundle 默认从 GitHub 下载并升级，如果你正好在使用 GitHub，你只需要为这个插件指定维护者的用户名和路径。在上面的配置中，NeoBundleFetch 只需要指定为&ldquo;Shougo/neobundle.vim&rdquo;，而不是完整的 GitHub 路径。如果你想使用其他网站，比如是 Subversion 或 Mecurial 的网站，你就需要添加完整的 URL。</p>\n<p>如果你想安装其他插件，你可以使用下面的命令：</p>\n<pre class=\"language-bash\"><code>curl -k https://github.com/[项目维护者]/[插件路径] &gt; ~/.vim/bundle/[插件路径]</code></pre>\n<p>举个例子：你想安装&nbsp;<a class=\"ext\" href=\"https://github.com/tpope/vim-abolish\" target=\"_blank\" rel=\"external nofollow noopener\">vim-abolish</a>，一个超级 NB 的文本搜索和替换插件，就使用下面的命令：</p>\n<pre class=\"language-bash\"><code>curl -k https://github.com/tpope/vim-abolish &gt; ~/.vim/bundle/abolish</code></pre>\n<p>如果要让它自动升级，在 NeoBundleFetch 那行下面添加一行：</p>\n<pre class=\"language-markup\"><code>NeoBundle \'tpope/vim-abolish\'</code></pre>\n<p>再介绍一个小技巧：你可以为插件指定一个分支或版本号。什么意思？NeoBundle 只会使用这个插件的某个分支或版本，而忽略其版本更新。如果你使用的某个插件处于高速开发过程，你就可以使用这个技巧，避免用到有 bug 的插件版本。举个例子：</p>\n<pre class=\"language-markup\"><code>NeoBundle \'Shougo/vimshell\', { \'rev\' : \'3787e5\' }</code></pre>\n<p>还有一个技巧：在 .vimtc 文件内添加一行关于&ldquo;NeoBundleCheck&rdquo;的属性。NeoBundle 会根据配置检查没安装的插件，并提示你安装它们。你也可以使用命令&ldquo;:NeoBundleInstall&rdquo;（LCTT：这是要在 Vim 编辑器的命令模式下输入）来安装或升级插件。</p>\n<h3 id=\"toc_2\">NeoBundle 用法</h3>\n<p>很多 NeoBundle 命令用起来和 Vundle 类似，但命令的名字不一样。下面是 NeoBundle 命令的用法：</p>\n<ul>\n<li>:NeoBundleUpdate：安装或升级插件，如果你手动把一个插件的目录删除了，这个命令会重新安装这个插件。在这个命令后面加上插件名称，就只升级一个插件；不加参数，会将所有己安装但没被记录在案的插件给记录下来。:NeoBundleInstall 命令效果相同。</li>\n<li>:NeoBundle {REPOSITORY URI} [[REVISION}] [,OPTIONS}]]：将一个插件锁定到固定版本，防止胡乱升级。</li>\n<li>:NeoBundleList：列出所有未初始化的插件。</li>\n<li>:NeoBundleClean：进入交互界面，删除插件。</li>\n</ul>\n<p>这些命令在配合 unite.vim （LCTT：就是上面举过的32个例子之一）使用时，效果会稍微有些出入。你可以使用&ldquo;:help neobundle&rdquo;命令了解更多信息。</p>\n<h3 id=\"toc_3\">是否使用 NeoBundle，自己决定</h3>\n<p>NeoBundle 是强大的工具，正处于高速开发状态。任何处于这种状态的项目，都会被帖上&ldquo;有前途&rdquo;和&ldquo;不稳定&rdquo;两个标签，看你自己怎么选。如果你想要最新的稳定版本的插件，NeoBundle 能够把 Vundle 和 Pathogen 甩出几条街。</p>\n<p>然而在线帮助文档已经给出警告，它不是个稳定的产品，不及时更新版本可能造成一些插件运行出错。最后，你需要在 .vimrc 文件为你的 Neoundle 和其他插件指定一个稳定的版本。记住这警告，然后你可以在使用这些尖端技术产品时游刃有余。</p>\n<p>&nbsp;</p>\n<hr />\n<p>via:&nbsp;<a class=\"ext\" href=\"http://www.openlogic.com/wazi/bid/348084/Managing-Vim-extensions-with-NeoBundle\" target=\"_blank\" rel=\"external nofollow noopener\">http://www.openlogic.com/wazi/bid/348084/Managing-Vim-extensions-with-NeoBundle</a></p>\n<p>译者：<a class=\"ext\" href=\"https://github.com/bazz2\" target=\"_blank\" rel=\"external nofollow noopener\">bazz2</a>&nbsp;校对：<a class=\"ext\" href=\"https://github.com/wxy\" target=\"_blank\" rel=\"external nofollow noopener\">wxy</a></p>\n<p>本文由&nbsp;<a class=\"ext\" href=\"https://github.com/LCTT/TranslateProject\" target=\"_blank\" rel=\"external nofollow noopener\">LCTT</a>&nbsp;原创翻译，<a href=\"https://linux.cn/article-3433-1.html\">Linux中国</a>&nbsp;荣誉推出</p>','2019-09-17 12:14:35','2019-09-17 12:14:35'),(23,23,'已经会用Git了？不会这十招怎么行','https://linux.cn/article-3463-1.html','之前我们发了一些教程让你熟悉Git基础和在团队合作环境中使用Git.我们讨论的这些Git命令足够让一个开发者在Git的世界里生存下去。在这篇教程里，我们试着探索如何高效地管理你的时间以及如何充分利用Git提供的特性。\n\n注意：这里介绍的命令中有的包含方括号(例如：git add -p [file_name])。在这些例子中，你应该用你自己的数字、标识符等替代方括号里的内容，并且去掉方括号。','<p>之前我们发了一些教程让你熟悉<a class=\"ext\" href=\"http://www.sitepoint.com/git-for-beginners/\" target=\"_blank\" rel=\"external nofollow noopener\">Git基础</a>和<a class=\"ext\" href=\"http://www.sitepoint.com/getting-started-git-team-environment/\" target=\"_blank\" rel=\"external nofollow noopener\">在团队合作环境中使用Git</a>.我们讨论的这些Git命令足够让一个开发者在Git的世界里生存下去。在这篇教程里，我们试着探索如何高效地管理你的时间以及如何充分利用Git提供的特性。</p>\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/09/244247a1764ab477c474cb86f8623930.png/2019/09/4da133e6ff302546a9540a3246103de6.png/2019/09/f2f1b2852ce28763d63f5252eba607ab.png-water\" alt=\"\" width=\"670\" height=\"457\" /></p>\n<blockquote>\n<p>注意：这里介绍的命令中有的包含方括号(例如：git add -p [file_name])。在这些例子中，你应该用你自己的数字、标识符等替代方括号里的内容，并且去掉方括号。</p>\n</blockquote>\n<h3 id=\"toc_1\">1. Git自动补全</h3>\n<p>如果你在命令行环境中运行Git命令，每次都手动地逐个输入命令是一件很无聊的事。为此，你可以花几分钟时间配置一下Git命令的自动补全功能。</p>\n<p>在*nix系统运行下列命令下载自动补全脚本：</p>\n<pre class=\"language-bash\"><code>cd ~\ncurl https://raw.github.com/git/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash</code></pre>\n<p>然后，添加下面的行到你的~/.bash_profile文件：</p>\n<pre class=\"language-bash\"><code>if [ -f ~/.git-completion.bash ]; then    \n. ~/.git-completion.bash\nfi</code></pre>\n<p>尽管我之前已经提到过，但我还是想再强调一下：如果你想使用完整的Git特性，你绝bi应该切换到命令行环境。</p>\n<h3 id=\"toc_2\">2. 在Git中忽略文件</h3>\n<p>你是不是对出现在你Git库里面的编译生成文件（比如.pyc)感到很无语？或者你是不是很厌恶不小心将他们添加到了Git？直接看这里，这里有一个方法可以让你告诉Git忽略所有这些文件和目录。只需要创建一个名字为.gitignore的文件，里面列出你不想要Git跟踪的文件和目录。可以用感叹号(!)列出例外情况。</p>\n<pre class=\"language-markup\"><code>*.pyc\n*.exe\nmy_db_config/\n \n!main.pyc</code></pre>\n<h3 id=\"toc_3\">3. 谁动了我的代码？</h3>\n<p>当事情出了乱子时立马责怪别人这是人类的天性。如果你的服务器程序不能正常工作了，要找出罪魁祸首是非常简单的--只需要执行git blame。这个命令告诉你文件里的每一行的作者是谁，最后改动那一行的提交，以及提交的时间戳。</p>\n<pre class=\"language-bash\"><code>git blame [file_name]</code></pre>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/6774a49e18a7eded8f90b4411a6bddba.png-water\" alt=\"\" width=\"833\" height=\"179\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>git blame demonstration</em></p>\n<p>在下面的截图里，你可以看到在一个更大的库里这个命令的输出是什么样的：</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/b73905d76d525e454da43ead90282011.png-water\" alt=\"\" width=\"800\" height=\"314\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>git blame on the ATutor repository</em></p>\n<h3 id=\"toc_4\">4. 查看库的历史</h3>\n<p>在之前的教程里，我们已经看过了如何使用git log命令。不管怎样，有3个选项你应该知道。</p>\n<ul>\n<li><strong>--oneline</strong>&nbsp;- 压缩每次的提交信息，只保留一个缩减的Hash值和说明文字，然后把这些都展示在一行里。</li>\n<li><strong>--graph</strong>&nbsp;- 这个选项将在左边画出一个文字界面的提交历史图。如果你只有一个分支，用这个选项查看历史时是没什么意义的。</li>\n<li><strong>--all</strong>&nbsp;- 显示所有分支历史。</li>\n</ul>\n<p>这是这3个选项合起来使用的效果：</p>\n<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/497011d1d19ac1354446701cd6f64632.png-water\" alt=\"\" width=\"855\" height=\"326\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>Use of git log with all, graph and oneline</em></p>\n<h3 id=\"toc_5\">5. 不要丢失对某个提交的跟踪</h3>\n<p>假设你提交了一些不需要的东西，然后你进行了hard重置回到之前的状态。后来，你发现在这个过程中你丢失了其他一些重要的信息，你想要把这些信息找回来，或者至少可以查看一下这些信息。这就需要git reflog帮忙。</p>\n<p>简单的git log只能告诉你最近的提交，这个提交的父提交，父提交的父提交，等等。但是git reflog是一个HEAD指向的提交的列表。记住，这个列表依赖于你自己的本地操作环境，它不是库的一部分，也不包含在push或者merge中。</p>\n<p>如果执行git log命令，可以看到提交历史，这是我的库的一部分：</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/3acf9482aa2dbf8d9bd34d9393a4043e.png-water\" alt=\"\" width=\"479\" height=\"459\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>Project history</em></p>\n<p>但是，git reflog命令显示了一个被我用hard重置丢掉的提交(b1b0ee9-HEAD@{4}).</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/1888e625c55e7a79c6584ee8673cb7a2.png-water\" alt=\"\" width=\"774\" height=\"223\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>Git reflog</em></p>\n<h3 id=\"toc_6\">6. 暂存文件的一部分更改以便进行一次提交</h3>\n<p>通常依据特性来提交是一个好的实践方法，意思是说，每一个提交都只添加一个特性或者修复一个bug。想一下如果你一次修复了两个bug或者添加了两个特性但是都还没有逐个提交该怎么办。这种场景下，你可以将他们一起提交。但是有一个更好的办法：单独暂存这些文件，然后分开提交。</p>\n<p>让我们假设你对一个文件做了多个更改，然后想让这些更改分开提交。这时，我们用带-p的添加命令。</p>\n<pre class=\"language-bash\"><code>git add -p [file_name]</code></pre>\n<p>我们来试试这种用法。我添加了3个新行到file_name，但是我只想让第1行和第3行出现在我的提交里。让我们看看git diff的输出是什么样的。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/4ddc36a5da6a637851846c11fbb70cd9.png-water\" alt=\"\" width=\"384\" height=\"329\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>Changes in repo</em></p>\n<p>然后，我们看看带-p选项的add命令会发生什么。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/bd842ec9ce78690774b986eba3eeb3a8.png-water\" alt=\"\" width=\"447\" height=\"351\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>Running add with -p</em></p>\n<p>看起来Git认为所有的更改都是同一个目的的一部分，所以把他们分组到同一个块里。这时，你可以：</p>\n<ul>\n<li>输入 y 暂存块</li>\n<li>输入 n 不暂存块</li>\n<li>输入 e 手动编辑块</li>\n<li>输入 d 退出或者跳转到下一个文件</li>\n<li>输入 s 分割块</li>\n</ul>\n<p style=\"text-align: center;\">在我们这个例子中，我们想把这个块分割成更小的部分，然后选择其中一些忽略另外一些。</p>\n<figure class=\"image\" style=\"text-align: center;\"><img src=\"https://net.lnmpa.top/editor/2019/09/93db4d63fd7e514248c07289fe18cb73.png-water\" alt=\"Adding all hunks\" width=\"429\" height=\"436\" />\n<figcaption>Caption</figcaption>\n</figure>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>Adding all hunks</em></p>\n<p>如你所见，我们已经逐个添加了第1和第3行，忽略了第2行。你可以看到库的状态并且进行一次提交。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/6c0165da97168b12f272cda37e9c9cd5.png-water\" alt=\"\" width=\"714\" height=\"286\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>Repository after selectively adding a file</em></p>\n<h3 id=\"toc_7\">7. 合并多个提交</h3>\n<p>为了进行核查或者发起一个合并请求（这经常发生在开源项目里），对代码进行了修改提交。但在最后代码被接受之前，你也许会需要修改你的代码。于是你修改代码，但是下一次核查的时候又一次需要进行修改。不知不觉中，你就已经有了好几个提交。理论上你应该用rebase命令把他们合并起来。</p>\n<pre class=\"language-bash\"><code>git rebase -i HEAD~[number_of_commits]</code></pre>\n<p>如果你想合并最后的两次提交，你应该运行下面的命令。</p>\n<pre class=\"language-bash\"><code>git rebase -i HEAD~2</code></pre>\n<p>一旦你运行这个命令，你将进入一个交互式界面，它将询问你想要合并哪些提交。你pick(拣选)最近的提交然后squash(合并)旧的提交。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/2eab17dd3e9230409a52fa5477d874da.png-water\" alt=\"\" width=\"677\" height=\"434\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>Git squash interactive</em></p>\n<p>接着你应该提供一个对新提交的说明。这个过程会重写你的提交历史。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/33d290077a53b25972d2a83323642fea.png-water\" alt=\"Adding a commit message\" width=\"618\" height=\"452\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>Adding a commit message</em></p>\n<h3 id=\"toc_8\">8. 储藏没有提交的更改</h3>\n<p>假设你正在修复一个bug或者添加一个特性，突然你被要求展示一下你的工作成果。你现在的工作还没有完成，不够进行一次提交。这时，git stash命令可以用来急救一下。Stash命令跟踪你所有的更改，然后把他们储藏起来以便以后使用。命令如下-</p>\n<pre class=\"language-bash\"><code>git stash</code></pre>\n<p>可以多次储藏更改，查看储藏列表，你可以运行下面的命令：</p>\n<pre class=\"language-bash\"><code>git stash list</code></pre>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/d4e195ea986dbd3a3b76e22d965b7b07.png-water\" alt=\"Stash list\" width=\"615\" height=\"46\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>Stash list</em></p>\n<p>如果你想取消储藏，覆盖当前的更改，你可以通过下面的命令使用储藏：</p>\n<pre class=\"language-bash\"><code>git stash apply</code></pre>\n<p>在最后的这个截图里，你可以看到每个储藏都有一个标识符，是一个唯一的数字（尽管在这里我们只有一个储藏）。如果你想使用某个储藏，你在apply命令后面加上这个唯一的标识符：</p>\n<pre class=\"language-bash\"><code>git stash apply stash@{2}</code></pre>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/c3a1ab3cd1a607134773bc5b07bc5c40.png-water\" alt=\"\" width=\"731\" height=\"292\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>After un-stashing changes</em></p>\n<h3 id=\"toc_9\">9. 检查丢失的提交</h3>\n<p>尽管reflog是一种检查丢失提交的方法，大型的库里却不太实用。这个时候，应该用fsck（文件系统检查）命令。</p>\n<pre class=\"language-bash\"><code>git fsck --lost-found</code></pre>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/49e17724fc1d37013e4b706cf3ba8c7d.png-water\" alt=\"\" width=\"528\" height=\"210\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>Git fsck results</em></p>\n<p>这里你可以看到一个丢失的提交。你可以通过git show [commit_hash] 查看提交的更改或者通过运行git merge [commit_hash]命令进行恢复。</p>\n<p>git fsck跟reflog命令相比有一个优点。假设你删除了一个远程分支，然后clone了这个库。用fsck命令你可以找到并且恢复这个删除的远程分支。</p>\n<h3 id=\"toc_10\">10. 最佳选择</h3>\n<p>之前我已经存记下了那些最优雅的Git命令。但是目前为止，cherry-pick命令是我最喜欢的Git命令，因为它直白的名字和实用的功能！</p>\n<p>最简单的情况下，cherry-pick从另一个分支里选出单独的一个提交，然后合并到当前分支。如果你正并行工作在两个或者更多的分支上，你也许会发现一个存在于所有分支上的bug。如果你解决了一个分支上的这个bug，你可以拣选这个对应的提交应用到其他分支上，而不会弄乱其他文件或者提交。</p>\n<p>让我们来考虑一个可以使用这个命令的场景。我有两个分支，我想拣选b20fd14: Cleaned junk这个提交到另一个分支上。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/ee15e6b3100d6ce78c6dd813771e3f86.png-water\" alt=\"Before cherry pick\" width=\"676\" height=\"257\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>Before cherry pick</em></p>\n<p>我切换到想要应用这个拣选出来的提交的分支，然后运行下面的命令：</p>\n<pre class=\"language-bash\"><code>git cherry-pick [commit_hash]</code></pre>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/762bc983d61feafb9881217d996a21b1.png-water\" alt=\"After cherry pick\" width=\"665\" height=\"337\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>After cherry pick</em></p>\n<p>尽管这次我们很干净的用了cherry-pick命令，但你应该知道这个命令经常会引起冲突，所以请小心使用。</p>\n<h3 id=\"toc_11\">总结</h3>\n<p>到了这里，我们结束了这个能使你Git能力提升一个级别的列表。Git是最好的版本控制器，它能完成你能想象到的任何事情。所以，经常试着用Git挑战你自己。一不小心你就会学到很多新东西。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<hr />\n<p>via:&nbsp;<a class=\"ext\" href=\"http://www.sitepoint.com/10-tips-git-next-level/\" target=\"_blank\" rel=\"external nofollow noopener\">http://www.sitepoint.com/10-tips-git-next-level/</a></p>\n<p>译者：<a class=\"ext\" href=\"https://github.com/CNprober\" target=\"_blank\" rel=\"external nofollow noopener\">love_daisy_love</a>&nbsp;校对：<a class=\"ext\" href=\"https://github.com/wxy\" target=\"_blank\" rel=\"external nofollow noopener\">wxy</a></p>\n<p>本文由&nbsp;<a class=\"ext\" href=\"https://github.com/LCTT/TranslateProject\" target=\"_blank\" rel=\"external nofollow noopener\">LCTT</a>&nbsp;原创翻译，<a href=\"https://linux.cn/article-3463-1.html\">Linux中国</a>&nbsp;荣誉推出</p>','2019-09-17 12:34:37','2019-09-17 12:34:37'),(24,24,'Linux内核Crash分析','https://linux.cn/article-3475-1.html','每一个进程的生命周期内，其生命周期的范围为几毫秒到几个月。一般都是和内核有交互，例如用户空间程序使用系统调用进入内核空间。这时使用的不再是用户空间的栈空间，使用对应的内核栈空间。对每一个进程来说，Linux内核都会把两个不同的数据结构紧凑的存放在一个单独为进程分配的存储空间中：一个是内核态的进程堆栈，另一个是紧挨进程描述符的数据结构thread_info,叫线程描述符。内核的堆栈大小一般为8KB，也就是8192个字节，占用两个页。在Linux-2.6.32内核中thread_info.h文件中有对内核堆栈的定义','<p>在工作中经常会遇到一些内核crash的情况，本文就是根据内核出现crash后的打印信息，对其进行了分析，使用的内核版本为：Linux2.6.32。</p>\n<p>&nbsp; &nbsp; &nbsp;&nbsp; 每一个进程的生命周期内，其生命周期的范围为几毫秒到几个月。一般都是和内核有交互，例如用户空间程序使用系统调用进入内核空间。这时使用的不再是用户空间的栈空间，使用对应的内核栈空间。对每一个进程来说，Linux内核都会把两个不同的数据结构紧凑的存放在一个单独为进程分配的存储空间中：一个是内核态的进程堆栈，另一个是紧挨进程描述符的数据结构thread_info,叫线程描述符。内核的堆栈大小一般为8KB，也就是8192个字节，占用两个页。在Linux-2.6.32内核中thread_info.h文件中有对内核堆栈的定义：</p>\n<pre class=\"language-bash\"><code>#define THREAD_SIZE               8192</code></pre>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在Linux内核中使用下面的联合结构体表示一个进程的线程描述符和内核栈，在内核中文件include/linux/sched.h。</p>\n<pre class=\"language-bash\"><code>union thread_union {\n  struct thread_info thread_info;\n  unsigned long stack[THREAD_SIZE/sizeof(long)];\n};</code></pre>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 该结构是一个联合体，我们在C语言书上看到过关于union的解释，在在C Programming Language 一书中对于联合体是这么描述的：</p>\n<p>1) 联合体是一个结构；</p>\n<p>2) 它的所有成员相对于基地址的偏移量都为0；</p>\n<p>3) 此结构空间要大到足够容纳最\"宽\"的成员；</p>\n<p>4) 其对齐方式要适合其中所有的成员；</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 通过上面的描述可知，thread_union结构体的大小为8192个字节。也就是stack数组的大小，类型是unsigned long类 型。由于联合体中的成员变量都是占用同一块内存区域，所以，在平时写代码时总有一个概念，对一个联合体的实例只能使用其中一个成员变量，否则会把原先变量 给覆盖掉，这句话如果正确的话，必须要有一个前提假设，成员占用的字节数相同，当成员所占的字节数不同时，只会覆盖相应的字节。对于thread_union联合体，我们是可以同时访问这两个成员，只要能够正确获取到两个成员变量的地址。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在内核中的某一个进程使用了过多的栈空间时，内核栈就会溢出到thread_info部分，这将导致严重的问题（系统重启），例如，递归调用的层次太深；在函数内定义的数据结构太大。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/09/48cc99f3f3b7388cccfc270cea704143.jpg-water\" alt=\"\" width=\"699\" height=\"251\" /></p>\n<p style=\"text-align: center;\">图：进程中thread_info&nbsp;&nbsp;&nbsp; task_struct和内核栈中的关系</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 下面我们看一下thread_info的结构体：</p>\n<pre class=\"language-bash\"><code>struct thread_info {\n  unsigned long           flags;           /* 底层标志，*/\n  int                     preempt_count;   /* 0 =&gt; 可抢占, &lt;0 =&gt; bug */\n  mm_segment_t            addr_limit;      /* 进程地址空间 */\n  struct task_struct      *task;           /*当前进程的task_struct指针 */\n  struct exec_domain      *exec_domain;    /*执行区间 */\n  __u32                   cpu;             /* 当前cpu */\n  __u32                   cpu_domain;      /* cpu domain */\n  struct                  cpu_context_save  cpu_context;    /* cpu context */\n  __u32                   syscall;         /* syscall number */\n  __u8                    used_cp[16];     /* thread used copro */\n  unsigned long           tp_value;\n \n  struct crunch_state     crunchstate;\n \n  union fp_state          fpstate __attribute__((aligned(8)));\n  union vfp_state         vfpstate;\n#ifdef CONFIG_ARM_THUMBEE\n  unsigned long           thumbee_state;       /* ThumbEE Handler Base register */\n#endif\n  struct restart_block     restart_block; /*用于实现信号机制*/\n};</code></pre>\n<p>&nbsp;PS：（1）flag 用于保存各种特定的进程标志，最重要的两个是：TIF_SIGPENDING，如果进程有待处理的信号就置位，TIF_NEED_RESCHED表示进程应该需要调度器选择另一个进程替换本进程执行。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 结合上面的知识，看下当内核打印堆栈信息时，都打印了上面信息。下面的打印信息是工作中遇到的一种情况，打印了内核的堆栈信息，PC指针在dev_get_by_flags中，不能访问的内核虚地址为45685516，内核中一般可访问的地址都是以0xCXXXXXXX开头的地址。</p>\n<pre class=\"language-bash\"><code>Unable to handle kernel paging request at virtual address 45685516\npgd = c65a4000\n[45685516] *pgd=00000000\nInternal error: Oops: 1 [#1]\nlast sysfs file: /sys/devices/form/tpm/cfg_l3/l3_rule_add\nModules linked in: splic mmp(P)\nCPU: 0    Tainted: P            (2.6.32.11 #42)\nPC is at dev_get_by_flags+0xfc/0x140\nLR is at dev_get_by_flags+0xe8/0x140\npc : [&lt;c06bee24&gt;]    lr : [&lt;c06bee10&gt;]    psr: 20000013\nsp : c07e9c28  ip : 00000000  fp : c07e9c64\nr10: c6bcc560  r9 : c646a220  r8 : c66a0000\nr7 : c6a00000  r6 : c0204e56  r5 : 30687461  r4 : 45685516\nr3 : 00000000  r2 : 00000010  r1 : c0204e56  r0 : ffffffff\nFlags: nzCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment kernel\nControl: 0005397f  Table: 065a4000  DAC: 00000017\nProcess swapper (pid: 0, stack limit = 0xc07e8270)\nStack: (0xc07e9c28 to 0xc07ea000)\n9c20:                   c0204e56 c6a00000 45685516 c69ffff0 c69ffff0 c69ffff0\n9c40: c6a00000 30687461 c66a0000 c6a00000 00000007 c64b210c c07e9d24 c07e9c68\n9c60: c071f764 c06bed38 c66a0000 c66a0000 c6a00000 c6a00000 c66a0000 c6a00000\n9c80: c07e9cfc c07e9c90 c03350d4 c0334b2c 00000034 00000006 00000100 c64b2104\n9ca0: 0000c4fb c0243ece c66a0000 c0beed04 c033436c c646a220 c07e9cf4 00000000\n9cc0: c66a0000 00000003 c0bee8e8 c0beed04 c07e9d24 c07e9ce0 c06e4f5c 00004c68\n9ce0: 00000000 faa9fea9 faa9fea9 00000000 00000000 c6bcc560 c0335138 c646a220\n9d00: c66a0000 c64b2104 c085ffbc c66a0000 c0bee8e8 00000000 c07e9d54 c07e9d28\n9d20: c071f9a0 c071ebc0 00000000 c071ebb0 80000000 00000007 c67fb460 c646a220\n9d40: c0bee8c8 00000608 c07e9d94 c07e9d58 c002a100 c071f84c c0029bb8 80000000\n9d60: c07e9d84 c0beee0c c0335138 c66a0000 c646a220 00000000 c4959800 c4959800\n9d80: c67fb460 00000000 c07e9dc4 c07e9d98 c078f0f4 c0029bc8 00000000 c0029bb8\n9da0: 80000000 c07e9dbc c6b8d340 c66a0520 00000000 c646a220 c07e9dec c07e9dc8\n9dc0: c078f450 c078effc 00000000 c67fb460 c6b8d340 00000000 c67fb460 c64b20f2\n9de0: c07e9e24 c07e9df0 c078fb60 c078f130 00000000 c078f120 80000000 c0029a94\n9e00: 00000806 c6b8d340 c0bee818 00000001 00000000 c4959800 c07e9e64 c07e9e28\n9e20: c002a030 c078f804 c64b2070 00000000 c64b2078 ffc45000 c64b20c2 c085c2dc\n9e40: 00000000 c085c2c0 00000000 c0817398 00086c2e c085c2c4 c07e9e9c c07e9e68\n9e60: c06c2684 c0029bc8 00000001 00000040 00000000 c085c2dc c085c2c0 00000001\n9e80: 0000012c 00000040 c085c2d0 c0bee818 c07e9ed4 c07e9ea0 c00284e0 c06c2608\n9ea0: bf00da5c 00086c30 00000000 00000001 c097e7d4 c07e8000 00000100 c08162d8\n9ec0: 00000002 c097e7a0 c07e9f14 c07e9ed8 c00283d0 c0028478 56251311 00023c88\n9ee0: c07e9f0c 00000003 c08187ac 00000018 00000000 01000000 c07ebc70 00023cbc\n9f00: 56251311 00023c88 c07e9f24 c07e9f18 c03391e8 c0028348 c07e9f3c c07e9f28\n9f20: c0028070 c03391b0 ffffffff 0000001f c07e9f94 c07e9f40 c002d4d0 c0028010\n9f40: 00000000 00000001 c07e9f88 60000013 c07e8000 c07ebc78 c0868784 c07ebc70\n9f60: 00023cbc 56251311 00023c88 c07e9f94 c07e9f98 c07e9f88 c025c3e4 c025c3f4\n9f80: 60000013 ffffffff c07e9fb4 c07e9f98 c025c578 c025c3cc 00000000 c0981204\n9fa0: c0025ca0 c0d01140 c07e9fc4 c07e9fb8 c0032094 c025c528 c07e9ff4 c07e9fc8\n9fc0: c0008918 c0032048 c0008388 00000000 00000000 c0025ca0 00000000 00053975\n9fe0: c0868834 c00260a4 00000000 c07e9ff8 00008034 c0008708 00000000 00000000\nBacktrace:\n[&lt;c06bed28&gt;] (dev_get_by_flags+0x0/0x140) from [&lt;c071f764&gt;] (arp_process+0xbb4/0xc74)\n r7:c64b210c r6:00000007 r5:c6a00000 r4:c66a0000</code></pre>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; （1）首先，看看这段堆栈信息是在内核中那个文件中打印出来的，在fault.c文件中，__do_kernel_fault函数，在上面的打印中Unable to handle kernel paging request at virtual address 45685516，该地址是内核空间不可访问的地址。</p>\n<pre class=\"language-bash\"><code>static void __do_kernel_fault(struct mm_struct *mm, unsigned long addr, unsigned int fsr, struct pt_regs *regs)\n{\n  /*\n  * Are we prepared to handle this kernel fault?\n  */\n  if (fixup_exception(regs))\n    return;\n  /*\n  * No handler, we\'ll have to terminate things with extreme prejudice.\n  */\n  bust_spinlocks(1);\n  printk(KERN_ALERT\n    \"Unable to handle kernel %s at virtual address %08lx\\n\",\n    (addr &lt; PAGE_SIZE) ? \"NULL pointer dereference\" :\"paging request\", addr);\n  show_pte(mm, addr);\n  die(\"Oops\", regs, fsr);\n  bust_spinlocks(0);\n  do_exit(SIGKILL);\n}</code></pre>\n<p>&nbsp;（2） 对于下面的两个信息，在函数show_pte中进行了打印，下面的打印涉及到了页全局目录，页表的知识，暂时先不分析，后续补上。</p>\n<pre class=\"language-bash\"><code>pgd = c65a4000\n[45685516] *pgd=00000000\n \nvoid show_pte(struct mm_struct *mm, unsigned long addr)\n{\n  pgd_t *pgd;\n  if (!mm)\n    mm = &amp;init_mm;\n \n  printk(KERN_ALERT \"pgd = %p\\n\", mm-&gt;pgd);\n  pgd = pgd_offset(mm, addr);\n  printk(KERN_ALERT \"[%08lx] *pgd=%08lx\", addr, pgd_val(*pgd));\n&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;\n}</code></pre>\n<p>&nbsp;(3) die函数中调用在die函数中取得thread_info结构体的地址。</p>\n<pre class=\"language-bash\"><code>struct thread_info *thread = current_thread_info();\n \nstatic inline struct thread_info *current_thread_info(void){\n  register unsigned long sp asm (\"sp\");\n  return (struct thread_info *)(sp &amp; ~(THREAD_SIZE - 1));\n}</code></pre>\n<p>&nbsp;Sp: 0xc07e9c28&nbsp;&nbsp;&nbsp; 通过current_thread_info得到 thread_info的地址</p>\n<p>(0xc07e9c28 &amp; 0xffffe000) = 0xC07E8000（thread_info的地址，也就是栈底的地址）</p>\n<p>(4)下面的打印信息在__die函数中打印</p>\n<pre class=\"language-bash\"><code>Internal error: Oops: 1 [#1]\nlast sysfs file: /sys/devices/form/tpm/cfg_l2/l2_rule_add\nModules linked in: splic mmp(P)\nCPU: 0    Tainted: P            (2.6.32.11 #42)\nPC is at dev_get_by_flags+0xfc/0x140\nLR is at dev_get_by_flags+0xe8/0x140\npc : [&lt;c06bee24&gt;]    lr : [&lt;c06bee10&gt;]    psr: 20000013\nsp : c07e9c28  ip : 00000000  fp : c07e9c64\nr10: c6bcc560  r9 : c646a220  r8 : c66a0000\nr7 : c6a00000  r6 : c0204e56  r5 : 30687461  r4 : 30687461\nr3 : 00000000  r2 : 00000010  r1 : c0204e56  r0 : ffffffff\nFlags: nzCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment kernel\nControl: 0005397f  Table: 065a4000  DAC: 00000017\nProcess swapper (pid: 0, stack limit = 0xc07e8270)\nStack: (0xc07e9c28 to 0xc07ea000)</code></pre>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 函数的调用关系：die(\"Oops\", regs, fsr);---&agrave;&nbsp;&nbsp;&nbsp; __die(str, err, thread, regs);</p>\n<p>下面是__die函数的定义：</p>\n<pre class=\"language-bash\"><code>static void __die(const char *str, int err, struct thread_info *thread, struct pt_regs *regs){\n  struct task_struct *tsk = thread-&gt;task;\n  static int die_counter;\n  /*Internal error: Oops: 1 [#1]*/\n  printk(KERN_EMERG \"Internal error: %s: %x [#%d]\" S_PREEMPT S_SMP \"\\n\",\n    str, err, ++die_counter);\n  /*last sysfs file: /sys/devices/form/tpm/cfg_l2/l2_rule_add*/\n  sysfs_printk_last_file();\n  /*内核中加载的模块信息Modules linked in: splic mmp(P) */\n  print_modules();\n  /*打印寄存器信息*/\n  __show_regs(regs);\n  /*Process swapper (pid: 0, stack limit = 0xc07e8270) tsk-&gt;comm  task_struct结构体中的comm表示的是除去路径后的可执行文件名称，这里的swapper为idle进程，进程号为0，创建内核进程init；其中stack limit = 0xc07e8270  指向thread_info的结束地址。*/\n  printk(KERN_EMERG \"Process %.*s (pid: %d, stack limit = 0x%p)\\n\",\n    TASK_COMM_LEN, tsk-&gt;comm, task_pid_nr(tsk), thread + 1);\n  /* dump_mem 函数打印从栈顶到当前sp之间的内容*/\n  if (!user_mode(regs) || in_interrupt()) {\n    dump_mem(KERN_EMERG, \"Stack: \", regs-&gt;ARM_sp, THREAD_SIZE + (unsigned long)task_stack_page(tsk));\n    dump_backtrace(regs, tsk);\n    dump_instr(KERN_EMERG, regs);\n  }\n}</code></pre>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在上面的函数中，主要使用了thread_info,task_struct,sp之间的指向关系。task_struct结构体的成员stack是栈底，也是对应thread_info结构体的地址。堆栈数据是从栈底+8K的地方开始向下存的。SP指向的是当前的栈顶。(unsigned long)task_stack_page(tsk)，</p>\n<p>#define task_stack_page(task)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((task)-&gt;stack) ，该宏根据task_struct得到栈底，也就是thread_info地址。</p>\n<p>#define task_thread_info(task)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((struct thread_info *)(task)-&gt;stack)，该宏根据task_struct得到thread_info指针。</p>\n<p>（5）dump_backtrace函数</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 该函数用于打印函数的调用关系。Fp为帧指针，用于追溯程序的方式，方向跟踪调用函数。该函数主要是fp进行检查，看看能否进行backtrace，如果可以就调用汇编的c_backtrace，在arch/arm/lib/backtrace.S函数中。</p>\n<pre class=\"language-bash\"><code>static void dump_backtrace(struct pt_regs *regs, struct task_struct *tsk)\n{\n  unsigned int fp, mode;\n  int ok = 1;\n \n  printk(\"Backtrace: \");\n  if (!tsk)\n    tsk = current;\n \n  if (regs) {\n    fp = regs-&gt;ARM_fp;\n    mode = processor_mode(regs);\n  } else if (tsk != current) {\n    fp = thread_saved_fp(tsk);\n    mode = 0x10;\n  } else {\n    asm(\"mov %0, fp\" : \"=r\" (fp) : : \"cc\");\n    mode = 0x10;\n  }\n \n  if (!fp) {\n    printk(\"no frame pointer\");\n    ok = 0;\n  } else if (verify_stack(fp)) {\n    printk(\"invalid frame pointer 0x%08x\", fp);\n    ok = 0;\n  } else if (fp &lt; (unsigned long)end_of_stack(tsk))\n    printk(\"frame pointer underflow\");\n    printk(\"\\n\");\n    if (ok)\n      c_backtrace(fp, mode);\n}</code></pre>\n<p>&nbsp;（6）dump_instr</p>\n<p>根据PC指针和指令mode, 打印出当前执行的指令码</p>\n<p>Code: 0a000008 e5944000 e2545000 0a000005 (e4153010)</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/49106ed85621c47b7a075cf94eff570c.jpg-water\" alt=\"\" width=\"413\" height=\"605\" /></p>\n<p>内核中函数的调用关系</p>','2019-09-18 02:31:35','2019-09-18 02:31:35'),(25,25,'最新apache+svn+reviewboard实现在线代码评审','https://linux.cn/article-3502-1.html','注，编译安装的mysql，90%运维会装在/usr/local/mysql 下 如果默认安装在/usr/local/mysql下，等装好ReviewBoard生成站点的时候会选择支持使用的数据库的时候没有识别mysql只有sqlite3，此时，如果你数据库不是sqlite3，继续往下执行自动生成的站点访问将会出现bad reqest 400错误。对于编译安装的mysql，解决办法如下 yum安装的mysql命令将在/usr/local/bin/下，不需要软连。\n\n对于编译安装的mysql，解决办法如下 做相应的软连接','<p>本文重点说reviewboard的安装</p>\n<p>作用，在线代码评审工具。</p>\n<p>---------------------------------------------------------------------------</p>\n<h3>mysql安装</h3>\n<pre class=\"language-bash\"><code>yum -y install gcc gcc-c++ make cmake autoconf automake ncurses* bison* zlib* expat* \nopenssl* apr* neon* \nyum -y install mysql-server </code></pre>\n<p>&nbsp;可以选择yum安装mysql 或者编译安装mysql</p>\n<p>注，编译安装的mysql，90%运维会装在/usr/local/mysql 下 如果默认安装在/usr/local/mysql下，等装好ReviewBoard生成站点的时候会选择支持使用的数据库的时候没有识别mysql只有sqlite3，此时，如果你数据库不是sqlite3，继续往下执行自动生成的站点访问将会出现bad reqest 400错误。对于编译安装的mysql，解决办法如下 yum安装的mysql命令将在/usr/local/bin/下，不需要软连。</p>\n<p>对于编译安装的mysql，解决办法如下 做相应的软连接</p>\n<pre class=\"language-bash\"><code>ln -s /usr/local/mysql/lib/libmysqlclient.so.18 /usr/lib/libmysqlclient.so.18\nln -s /usr/local/mysql/lib/libmysqlclient.so.18 /usr/lib64/libmysqlclient.so.18\nln -s /usr/local/mysql/bin/* /usr/local/bin/</code></pre>\n<p>&nbsp;mysql安装此处不再介绍 编译也好，yum也好，看需求及使用mysql的级别。</p>\n<p>----------------------------------------------------------------------------</p>\n<h3>Apache和SVN</h3>\n<pre class=\"language-bash\"><code>yum -y install httpd httpd-devel  mod_dav_svn  subversion subversion-devel</code></pre>\n<p>&nbsp;apache 安装好之后可直接启动</p>\n<p>svn 的安装于配置，仓库的创建，用户的管理，权限的配置，网上文档一大堆。</p>\n<p>----------------------------------------------------------------------------</p>\n<h3>安装reviewboard</h3>\n<p>reviewboard是由python开发，</p>\n<p>1，使用python-setuptools安装</p>\n<pre class=\"language-bash\"><code>yum -y install python-setuptools\neasy_install -U setuptools,</code></pre>\n<p>&nbsp;2，安装python组件</p>\n<pre class=\"language-bash\"><code>yum -y install python python-devel</code></pre>\n<p>python版本要2.6以上才可以支持reviewboard</p>\n<p>&nbsp;3、 安装patch</p>\n<pre class=\"language-bash\"><code>yum -y install patch </code></pre>\n<p>&nbsp;4、 安装pysvn</p>\n<pre class=\"language-bash\"><code>wget http://pysvn.barrys-emacs.org/source_kits/pysvn-1.7.6.tar.gz\ntar zxvf pysvn-1.7.6.tar.gz\ncd pysvn-1.7.6/Source\npython setup.py backport 验证与python的兼容\npython setup.py configure</code></pre>\n<p>&nbsp;make pysvn的编译安装需要subversion-devel的支持，没有装devel报此处报错，yum安装之后将解决。</p>\n<pre class=\"language-bash\"><code>mkdir /usr/lib64/python2.6/site-packages/pysvn\ncp pysvn/__init__.py /usr/lib64/python2.6/site-packages/pysvn\ncp pysvn/_pysvn*.so /usr/lib64/python2.6/site-packages/pysvn</code></pre>\n<p>&nbsp;5、 安装mod_wsgi</p>\n<pre class=\"language-bash\"><code>yum -y install mod_wsgi</code></pre>\n<p>&nbsp;mod_wsgi 是支持webpy的一个模块</p>\n<p>6、 安装mencache</p>\n<pre class=\"language-bash\"><code>yum -y install memcachedeasy_install python-memcached</code></pre>\n<p>&nbsp;reviewboard需要memcxched的支持，之前没打开11211端口，访问很慢。</p>\n<p>7、 安装Review Board</p>\n<pre class=\"language-bash\"><code>easy_install ReviewBoard</code></pre>\n<p>&nbsp;# 如果安装过程中 Django 1.6.5一直因为网络问题安装失败的话，可以手动下载安装 伟大的天朝已经屏蔽的google，此处提供一个openerdns 42.120.21.30 添加到/etc/resolv.cof 里。成功的几率大大提高，以为此dns可以代理到google，https://code.google.com/p/openerdns/&nbsp;</p>\n<pre class=\"language-bash\"><code>wget https://pypi.python.org/packages/source/D/Django/Django-1.6.5.tar.gz#md5=e4c5b2d35ecb3807317713afa70a0c77\ncd Django-1.6.5\npython setup.py build\npython setup.py install</code></pre>\n<p>&nbsp;# 或者使用pip在线安装</p>\n<pre class=\"language-bash\"><code>pip --default-timeout=2000 install Django==1.6.5</code></pre>\n<p>&nbsp;8、 安装mysql组件</p>\n<pre class=\"language-bash\"><code>easy_install mysql-python</code></pre>\n<p>&nbsp;创建reviewboard站点</p>\n<p>创建reviewboard存放数据的数据库reviewboard并赋予权限和密码</p>\n<pre class=\"language-bash\"><code>mysql&gt; create database reviewboard default charset utf8 collate utf8_general_ci;\nmysql&gt; grant all on reviewboard.* to \'reviewboard\'@\'localhost\' identified by \'reviewboard\';\nmysql&gt; FLUSH PRIVILEGES; </code></pre>\n<p>&nbsp;创建reviewboard站点</p>\n<pre class=\"language-bash\"><code>rb-site install /reviewboard</code></pre>\n<p>&nbsp;rb-site命令是装reviewboard自动生成的</p>\n<p>之后会有一系列类似安装向导的步骤，需要你做出选择，尽量选择默认值吧</p>\n<pre class=\"language-bash\"><code> Domain = rb.XXX.com 自己随意，本地做个hosts绑定就行\n \n     Root Path = 回车\n \n     Database Type = mysql \n \n     Database Name = reviewboard\n \n     Database server = 回车\n \n     Database username = \'reviewboard\'\n \n     Database password = \'reviewboard\'\n \n     Memcache Server = 回车\n \n      Username [admin]: admin\n \n     E-Mail Address = 邮箱自己填</code></pre>\n<p>&nbsp; ok之后需要修改下列文件的属主属组</p>\n<pre class=\"language-bash\"><code>[root@localhost bin]# chown -R apache /reviewboard/htdocs/media/uploaded\n[root@localhost bin]# chown -R apache /reviewboard/htdocs/media/ext\n[root@localhost bin]# chown -R apache /reviewboard/htdocs/static/ext\n[root@localhost bin]# chown -R apache /reviewboard/data/\ncp /reviewboard/conf/apache-wsgi.conf  到/etc/httpd/conf.d/  </code></pre>\n<p>&nbsp;apache为yum安装，编译安装</p>\n<p>&nbsp;自己定位目录。80端口被占用，我使用了8081 修改了下端口，使用80端口将不用任何修改。</p>\n<p>重启apache，http://http://rb.xxx.com/ 就可以访问。</p>\n<p class=\"article_img\"><img src=\"https://net.lnmpa.top/thumbnail/2019/09/9bfbe9f71f0a55066a5257fd79b52e1f.png-water\" alt=\"\" width=\"1218\" height=\"598\" /></p>\n<p>如果出现400错误，就是在创建reviewboard站点出现错误，站点没有生成好，之前就是没有显示mysql选择了sqlite3，也ok了，访问就是显示400错误，以为是apache-wsgi.conf中</p>\n<pre class=\"language-bash\"><code>WSGIPassAuthorization On\n WSGIScriptAlias \"/\" \"/reviewboard/htdocs/reviewboard.wsgi/\"</code></pre>\n<p>&nbsp;这两行的问题，写了个html，试验了虚拟主机，注释这两行就ok，打开就400， 查了半天的mode_wsgi,还是400，最终又重新检查一遍，支持了mysql，终于解决。</p>\n<p>500错误解决有可能是数据库的问题，重启数据库（慎重）或者drop&nbsp;reviewboard库重新创建，并重新生成reviewboard站点。</p>','2019-09-18 02:41:41','2019-09-18 02:41:41'),(26,26,'东半球最先进的debug技巧','https://linux.cn/article-3558-1.html','不论是什么行业里，能让人最兴奋的事情通常都是解决新奇的、高难度问题带来的刺激。在我的工作中，经常会遇到很多bug，乍一看，它们都是不可能的。不是不可能解决，而是完全不可能出现。就好象最前沿的科技揭示了一个新的奇怪的逻辑现象，以至于人的大脑完全无法理解。\n\n当然，这里我总结的这些bug都是很独特的，如果你想说是否能有某种最先进的系统性的方法能将这些bug归类，统一解决，那是愚蠢的，就好象一个人无法认识到自己在犯错而避免过错一样。不管怎样，下面的这些debug原则对我是十分有效的，而且我相信，对大多数程序员也都是有效的。','<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/09/35a3d1e6ccd69b577be8daad4c669c6c.jpg-water\" alt=\"\" width=\"1000\" height=\"750\" /></p>\n<p>不论是什么行业里，能让人最兴奋的事情通常都是解决新奇的、高难度问题带来的刺激。在我的工作中，经常会遇到很多bug，乍一看，它们都是不可能的。不是不可能解决，而是完全不可能出现。就好象最前沿的科技揭示了一个新的奇怪的逻辑现象，以至于人的大脑完全无法理解。</p>\n<p>当然，这里我总结的这些bug都是很独特的，如果你想说是否能有某种最先进的系统性的方法能将这些bug归类，统一解决，那是愚蠢的，就好象一个人无法认识到自己在犯错而避免过错一样。不管怎样，下面的这些debug原则对我是十分有效的，而且我相信，对大多数程序员也都是有效的。</p>\n<ul>\n<li>你改错了文件</li>\n<li>你改对了文件，但却是在别人的机器上</li>\n<li>你改对了文件，但忘了保存</li>\n<li>你该对了文件，但忘了重新编译</li>\n<li>你认为你把那个东西开启了，但实际上你把它关闭了</li>\n<li>你认为你把那个东西关闭了，但实际上你把它开启了</li>\n<li>会议中，你应该用心听。</li>\n<li>你运行了错误的版本</li>\n<li>你运行了正确的版本，但却是在别人的机器上</li>\n<li>你改正了问题，但忘了提交</li>\n<li>你改正了问题，也提交了，但忘了push到版本库中</li>\n<li>你改正了问题，也提交了，也push了。然而，很多用户的工作都依赖于之前有问题的版本，于是你必须回滚。</li>\n</ul>\n<p>我非常虔诚的向大家奉送这些debug原则，任何一次debug都不可能只使用其中的一个方法解决。我真挚的希望大家通过对这些debug原则的思考能获得意想不到的收获。</p>','2019-09-18 03:04:50','2019-09-18 03:04:50'),(27,27,'面向对象分析与设计—四色原型模式（彩色建模、领域无关模型）','https://linux.cn/article-3603-1.html','至今我都清楚的记得我第一次被面试官问起什么叫”建模“技术时的情景，那是好 几年前的事情了，当时是胸有成竹的去面试一个有关系统分析、设计的.NET高级软件工程师岗位。面试官几乎没问我有关.NET方面的任何技术实现，他就简 单的问了问：“你如何把握你所分析出来的系统的正确性？”，我当时有点小激动，觉得这个问题应该很简单嘛，都是概念而已，让他直接点问，结果他来一句： “你懂建模吗？，能给我解释一下建模的作用吗？“，接着他出了一个小例子，让我对这个例子进行建模，要考虑到各种扩展性、业务稳定性的关键点，要边建模边 说出为什么要这么建模，要说出思路。他最后重点强调了一下：“创建出来的模型是不允许跟任何具体的代码、工具有关联的”。','<h2>1.背景介绍</h2>\n<p>至今我都清楚的记得我第一次被面试官问起什么叫&rdquo;建模&ldquo;技术时的情景，那是好 几年前的事情了，当时是胸有成竹的去面试一个有关系统分析、设计的.NET高级软件工程师岗位。面试官几乎没问我有关.NET方面的任何技术实现，他就简 单的问了问：&ldquo;你如何把握你所分析出来的系统的正确性？&rdquo;，我当时有点小激动，觉得这个问题应该很简单嘛，都是概念而已，让他直接点问，结果他来一句： &ldquo;你懂建模吗？，能给我解释一下建模的作用吗？&ldquo;，接着他出了一个小例子，让我对这个例子进行建模，要考虑到各种扩展性、业务稳定性的关键点，要边建模边 说出为什么要这么建模，要说出思路。他最后重点强调了一下：&ldquo;创建出来的模型是不允许跟任何具体的代码、工具有关联的&rdquo;。</p>\n<blockquote>\n<p>在我现在看来，他的意思也就是说创建出来的UML类图模型是领域无关模型（领域通用模型），可以用任何一种编程技术去实现他，作为建模者不需要考虑这些实现细节，考虑的越多越容易分散你对真实业务的等价建模，容易犯技术人员的通病（用技术的思维来考虑业务）。</p>\n</blockquote>\n<p>我当时心想这个容易啊，不就是用UML搞点图出来做做秀嘛，体现出分析、设计 的高端嘛，其他还能有啥作用；其实我当时之所以这么想是因为我对UML、建模也尝试过学习、理解和运用，结果我发现这就是一个作秀的工具罢了，对这个东西 很不屑，甚至对软件工程中的&ldquo;建模&rdquo;领域有一种抵触心理。</p>\n<p>我当时随口说了一些我学习UML建模时的心得，心想这个也就是最终答案了，因为它确实就是这个作用（&rdquo;作秀&ldquo;），然后我通过代码驱动建模，倒着推导出UML的类图，结果和我意料的差不多；基本上都覆盖了这个小例子的几大方面，反正面试官不知道我是如何得出这个UML类图的，只有天知道，我是通过先构建代码模型然后反方向推到出类图模型的，嘴上说的跟心理想的完全是相反的。</p>\n<p>在我感觉非常良好的等着面试官接着问下一个问题的时候，情况出现了。面试官说 我漏掉了东西，说我没有充分考虑到业务场景，没有将业务概念中的关键概念划分清楚，甚至疏忽了很重小的领域实体属性，按照我这个模型图开发出来的软件是不 能够满足现在的业务要求的。我当时就蒙了，啥叫关键概念，哪个概念不是关键概念啊，又有哪里不能用了，心理有点委屈，一时不理解，觉得面试官在为难我。</p>\n<blockquote>\n<p>其实我现在能明白当时面试官说的是什么意思，他是指我未能清晰的表达出各个类 的职责，看上去每个类扮演的角色都是一样的，无非就是属性、方法这些类元素，我未能捕获到核心领域概念，未能站在领域考虑建模，而是站在代码的层面上来从 低往上看的，很多东西是看不清楚的，说白了，开发人员拿到这个类图能否明白自己将要面对的领域，如果能明白，此时类图模型是健康的，如果不明白那就是有问 题的，因为模型图不是给自己看的，而是给整个团队交流共享的。</p>\n</blockquote>\n<p>后来我自己调整了一下心情，就算面试失败我也要有总结才行，面试本来就是一个被虐的过程。（&ldquo;佛曰：此时正是修行时&rdquo;，就当是锻炼好了。）</p>\n<p>我虚心的向面试官请教我这个模型图哪里有问题，他指出了有可能我这辈子都无法 看见的分析盲点，他说这个问题是程序员用技术思维来分析建模的通病。为什么他能看见这些盲点，而我不能，我很想知道这其中的精髓，我当时就要求降薪到这里 来学习，面试官不降薪愿意让我过来，他也是一个对技术有追求的人吧。但是后来我有特殊事情未能去贵公司就职，此后我一直遗憾，这个建模精髓我有可能一辈子 都搞不懂了。</p>\n<blockquote>\n<p>现在我能明白，其实如果用代码级别的分析思维来辅助你建模就一定会有盲点，因 为代码级别的&ldquo;设计模式&rdquo;，&ldquo;设计原则&rdquo;并非建模时的&ldquo;分析模式&rdquo;，这是两个不同的问题域，也就是说彼此用在不同的业务领域的，不能够一概而论，如果交叉 使用就会误导你目前的重心，你会往里面添油加醋。</p>\n</blockquote>\n<p>&ldquo;建模&rdquo;这个非常抽象且神圣的词是多么的霸气，貌似是已经触及软件工程的最高境界了；崇拜，自卑；搞软件开发也有几年了，居然连建模都不懂；那一夜我彻底失眠了，从那以后我在技术上充满了无助感，为什么？因为我已经清楚自己要想在软件领域有一定的成果，必须学会对真实世界建模，从那开始&rdquo;建模&ldquo;一词在我脑子的已经和UML关系不大了。</p>\n<p>之后我在软件分析、设计的海洋里苦苦寻找这个曾经在我面前就像流星一样划过的&rdquo;建模金钥匙&ldquo;，有了它我就可以去一个神圣的世界。辗转反侧几年过去了，在前不久我终于知道&ldquo;建模的金钥匙&rdquo;是什么了，这类东西在网络上很少见，写的很少，下面我们来详细了解它。</p>\n<h2>2.问自己，UML对你来说有意义吗？它帮助过你对系统的分析、建模吗？</h2>\n<p>我想学过软件开发的人都多多少少了解UML，简单讲它就是一个用来建模的语言，你可以纯粹的把它理解成是一个画图工具，定义了一些元素，用来表达不同的概念。这里我们关心的是UML类图，也就是用来进行面向对象结构建模用的，通过各种不同的图形来表达抽象的对象结构。</p>\n<p>图1：简单的订单类图</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/09/2696226434e46af98bd84e5d62c61a2a.png-water\" alt=\"\" width=\"928\" height=\"470\" /></p>\n<p>上图是一个很简单的&ldquo;订单&rdquo;与&ldquo;产品&rdquo;相关的类图，我们都能懂这里面的意思， 因为我们对这块的业务很了解；知道在什么地方应该有什么，比如Order中的计算商品总价的算法，有相关业务背景的人都知道这里是会存在的极大逻辑变化的 地方，所以我们需要通过接口来隔离这块逻辑。</p>\n<blockquote>\n<p>我们之所以能够画出这张类图跟UML这个语言本身其实没关系，重要的是你对相 关的业务非常之了解，在你脑子里可以不使用UML来建模，你可以用任何一个草图来建模，也就是说UML并不等于建模，这个要清楚的认识。那我们使用UML 有何用？它并没有帮助我们来分析系统；没错，UML从某个角度讲它没有直接帮助我们对系统尽心分析建模，帮助我们分析建模的是那些业务知识，懂业务的人可 以不使用UML来建模，随便用一种图形表示法来说明业务概念即可。其实UML只不过是一个通用的模型表达语言而已，是用来帮助我们交流模型用的，并非是建 模的思想和方法。</p>\n</blockquote>\n<p>既然UML不能够帮助我们分析系统，那我们如何才能准确的建模出我们不是很熟 悉的领域呢？我们必须承认，领域专家如果懂技术肯定是建模的最适合人选，但是现实并非这样，需要我们技术人员去熟悉领域然后创建模型，但是这中间难免会漏 掉重要的业务概念，因为毕竟从真实的业务到最终的模型是有一个过程的，而最让我们无助的是在这个过程中没有任何可行的指导思想可以借鉴的，只有通过经验来 把握最终的质量。</p>\n<p>总是通过经验来建模不符合软件行业的发展方法，显然不行，这种建模技术难道不可以传递吗？答案是可以传递的，说明这个可以传递的技术正是本文的目的。我们继续往下看。</p>\n<h2>3.一直以来其实我们被一个缝隙隔开了，使我们对OOAD遥不可及</h2>\n<p>上节中其实已经抛出建模的核心问题域了，只不过不是很明显；我们用本节来重点突出这个长久以来一直困扰我们建模者的问题域，以引起我们对它的重视，因为它也是软件工程中的一个重要的研究领域。</p>\n<p>如本节标题所说，其实我们被一个建模时所产生的一个缝隙隔开了，而这个缝隙很长一段时间内没有人关注过，也没有引起相关重视，所以导致我们的建模技术很难提升。</p>\n<p>建模是一个过程，这个过程大概是这样子的，需要我们将真实的业务场景准确的用某种建模语言表达出来，换句话说用什么建模语言表达出来很容易，重点是如何得出这个模型，而得出这个模型的过程就是我们这里所说的建模缝隙。</p>\n<p>图2：</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/445d1c84c2d38e44e8f9d2723c020c71.png-water\" alt=\"\" width=\"1014\" height=\"425\" /></p>\n<p>从&ldquo;业务概念&rdquo;到&ldquo;类模型&rdquo;中间夹着一个&ldquo;建模过程&rdquo;，这个地方其实一直以来 就是分析建模的鸿沟，这个空白的地方一直没有成熟的经验可以学习。在我们对当前分析的业务不是很了解的时候如何正确的建出对应的类模型，表层的领域概念我 们可以根据自己的经验去够发现它，但是这毕竟是无法传递的知识。很多OOAD的书籍甚至包括很多软件工程中的经典书籍都未给出这里的答案，如果用一句准确 的技术术语来形容这个过程的话，其实就是缺少一套建模分析模式，缺少一个可以让我们不管针对什么样的业务进行分析时都是一套不变的指导模式。我 想这个问题对我们建模者来说肯定是共同的问题，我们需要解决它。只有这样我们才不会遇见自己所不熟悉的业务领域时而束手无策，当然你可以说你也一样可以进 行OOA，但是你一定会漏掉什么的，这是分析盲点，是没有正确指导思想的必然结果。正如上图中的&rdquo;下订单&ldquo;和&rdquo;退货&ldquo;两个核心的领域模型未能在右边的&rdquo;类 模型&ldquo;中建模出来，大部分开发人员的通病就是无法识别出潜在的领域概念，认为&rdquo;表层&ldquo; 的领域概念就是类模型中的&rdquo;实体&ldquo;，其实这样我们到最后就回到了表驱动的开发过程当中去，因为你只有通过E-R模型来思考时才能发现这种平面的结构，但是 这又和正确的软件开发访问论背道而驰了。</p>\n<h2>4.四色原型模式填补这个历史缝隙，让我们真的看见OOAD的希望</h2>\n<p>本节我们将讨论一个分析模式，它存在有一段时间了，值得我们高兴的是它就是专 门用来解决上述小节中阐述的&ldquo;分析&rdquo;鸿沟的，通过这套模式我们几乎可以分析任何一个业务领域，再也不用怕由于自己对该领域不熟悉而漏掉了重要的领域模型， 而导致代码混乱、难以重构的最大问题就是丢失重要的领域概念，让各个对象的职责未能正确的在自己的空间中。</p>\n<p>这个分析模式就是&rdquo;四色原型&ldquo;模式，根据名字我们就可以大概猜出它是基于四个概念来分析我们的业务概念，下面我们来了解一下哪四个概念：</p>\n<p>1.实体：也可以叫做物品，表示一个参与者，比如：客户、商品。</p>\n<p>2.角色：实体、时刻时段的角色，如：订单的配送类型，用户的等级角色。</p>\n<p>3.描述：用来对实体、时刻时段的公共属性进行描述，比如：客户实体的地址描述，这部分信息是可以通用的。</p>\n<p>4.时刻时段：实体在某个时间段内的参与事件，如：订单，某个客户在某个时间段内购买了某个商品。此概念就是用来跟踪实体发生的所有需要跟踪的事件。</p>\n<p>当我们使用四色原型模式去分析业务概念时就很难丢失领域概念，下面我们依然以上面的业务领域为例使用四色原型模式进行分析。</p>\n<p>图3：</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/176f5efef4f9629367559613929a6b42.png-water\" alt=\"\" width=\"756\" height=\"491\" /></p>\n<p>基本上我们可以使用四色原型模式去直接套某个业务领域，我们可以根据模式的思 想来推断领域模型是否需要四色中的一种。这样我们基本上不会漏掉重要的业务概念。通过将&ldquo;四色原型&rdquo;模式与&ldquo;RUP\"制品中的&ldquo;业务词汇表&rdquo;、\"补充性规 格说明&ldquo;集合可以完成美妙的OOAD敏捷过程。使用四色原型模式来验收RUP过程制品中的业务词汇表，可以判断出自己是否遗漏了重要的业务分支。</p>\n<p>可以说四色原型模式是通往OOAD之门的金钥匙，有了它我才相信我们现在分析的系统是OO的。</p>\n<p>模型是让人去阅读理解的，上图中我们很难看出哪个是&rdquo;实体&ldquo;哪个是&rdquo;角色&ldquo;哪个是&rdquo;时刻时段&ldquo;和&rdquo;描述&ldquo;，所以大师们借鉴了其他领域的彩色思想来创建软件模型，这样我们就够能一眼的看出模型的具体意思，带来强大的视觉冲击力，下节我们详细的来看看彩色建模。</p>\n<h2>5.在四色原型上运用彩色建模增强视觉冲击力</h2>\n<p>为了能够突出模型的视觉效果，在四色原型上运用不同的颜色来增加模型的视觉冲击力。使用彩色模型能够激发人类天生的视觉敏感性，让人一目了然的知道整体的模型是个什么结构。</p>\n<p>图4：</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/0f3f6b15ce0667a39f717d545df9c805.png-water\" alt=\"\" width=\"772\" height=\"491\" /></p>\n<p>使用绿色来表示实体（参与者），使用黄色表示角色，使用灰色表示描述，使用桃红色表示时刻时段。当然这里的颜色不是很准确，由于我对颜色分的不是很清楚，所以未能调出最合适的颜色，但是差不多也就行了。</p>\n<p>这样当我们面对一个大型的UML类图模型时就可以一眼识别出每个模型所代表的概念它的职责也就清晰明了了。</p>\n<h2>6.通过四色原型模式建模出领域无关模型</h2>\n<p>建模时我们是不需要考虑该模型将要被什么技术落地，也就是说该模型是领域（技 术、工具、平台）无关的，可以使用任何技术来实现它。通过四色原型模式构建出来的模型图更具有可塑性，概念非常的清晰，所有的模型都是概念明确的，不存在 人为的设计在里面，对于任何一个建模者来说这是非常宝贵的建模技术。如果没有四色原型模式的背景，每个建模者都根据自己的经验来假设出很多主观的模型出 来，其实这部分模型是很难让别人理解的，因为每个人的理解角度不同，得出的模型自然也就差别很大，所以建模时使用四色原型模式是一个比较通用的模式，得出 的最后模型也是一个通用的且团队交流也是通用的。</p>\n<p>技术无关是领域无关模型的一个面，领域无关也有另外一层含义，当我们有了四色原型模式时你是否发现你具有了征服所有业务领域的秘诀，就好比E-R模型一样，一个可以用无边际的抽象的模式，这个模式由四色基本的原型组成，而这个四个原型也是领域无关模型。</p>\n<h2>7.结束语：建模时你可以不考虑具体实现，但是建模者要懂技术实现</h2>\n<p>尽管建模高手会告诉我们建模时不要去考虑最后具体用什么技术去实现它，其实跟 你说这个话的人要么就是精通某个技术的高手，要么就是一个理论主义者，只知道画图而不知道如何具体落地领域模型的分析员，前者其实他已经做到心中有数了， 为什么这么说，因为不懂技术实现的人来建模时是无法创建出能用的模型的，因为概念毕竟是概念，一旦落地到代码上、架构上一切都变了，并不是那么的简单直接 落地的，需要考虑到读写、业务流、职责等等问题，这里面是有很强的技术问题在里面的。</p>\n<p>好了文章到此结束，希望本文能对那些对OOAD、UML、建模有兴趣的朋友起到一个抛砖引玉的作用，对本文的内容想进一步学习的可以参考《彩色建模》一书，这本书是OOAD大师[Peter coad]所著，谢谢大家。</p>','2019-09-18 03:08:33','2019-09-18 03:08:33'),(28,28,'十大编程算法助程序员走上大神之路','https://linux.cn/article-3613-1.html','快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要Ο(n log n)次比较。在最坏状况下则需要Ο(n2)次比较，但这种状况并不常见。事实上，快速排序通常明显比其他Ο(n log n) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。\n\n快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。\n\n算法步骤：','<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/09/4d992dc4b38579c32bd1e99038b105d7.jpg-water\" alt=\"\" width=\"1000\" height=\"563\" /></p>\n<h3>算法一：快速排序算法</h3>\n<p>快速排序是由东尼&middot;霍尔所发展的一种排序算法。在平均状况下，排序&nbsp;n&nbsp;个项目要&Omicron;(n&nbsp;log&nbsp;n)次比较。在最坏状况下则需要&Omicron;(n2)次比较，但这种状况并不常见。事实上，快速排序通常明显比其他&Omicron;(n&nbsp;log&nbsp;n)&nbsp;算法更快，因为它的内部循环（inner&nbsp;loop）可以在大部分的架构上很有效率地被实现出来。</p>\n<p>快速排序使用分治法（Divide&nbsp;and&nbsp;conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。</p>\n<p>算法步骤：</p>\n<p>1&nbsp;从数列中挑出一个元素，称为&nbsp;&ldquo;基准&rdquo;（pivot），</p>\n<p>2&nbsp;重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</p>\n<p>3&nbsp;递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</p>\n<p>递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会退出，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p>\n<p class=\"article_img\"><img class=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/67d35fa596327e4af0767041f0127909.gif\" alt=\"算法演示\" width=\"280\" height=\"214\" data-original=\"https://img.linux.net.cn/data/attachment/album/201408/14/111843it3v8za8j7j511i5.gif\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>算法演示</em></p>\n<h3>算法二：堆排序算法</h3>\n<p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p>\n<p>堆排序的平均时间复杂度为&Omicron;(nlogn)&nbsp;。</p>\n<p>算法步骤：</p>\n<p>创建一个堆H[0..n-1]</p>\n<p>把堆首（最大值）和堆尾互换</p>\n<p>3.&nbsp;把堆的尺寸缩小1，并调用shift_down(0),目的是把新的数组顶端数据调整到相应位置</p>\n<p>4.&nbsp;重复步骤2，直到堆的尺寸为1</p>\n<p class=\"article_img\"><img class=\"alignnone size-full wp-image-707 lazy \" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/84376c0dd49d4c6c2fd6d8d9b101b2ae.gif\" alt=\"算法演示\" width=\"280\" height=\"214\" data-original=\"https://img.linux.net.cn/data/attachment/album/201408/14/111843fgpzrrp8j10d3l4n.gif\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>算法演示</em></p>\n<h3>算法三：归并排序</h3>\n<p>归并排序（Merge&nbsp;sort，台湾译作：合并排序）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide&nbsp;and&nbsp;Conquer）的一个非常典型的应用。</p>\n<p>算法步骤：</p>\n<p>1.&nbsp;申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</p>\n<p>2.&nbsp;设定两个指针，最初位置分别为两个已经排序序列的起始位置</p>\n<p>3.&nbsp;比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</p>\n<p>4.&nbsp;重复步骤3直到某一指针达到序列尾</p>\n<p>5.&nbsp;将另一序列剩下的所有元素直接复制到合并序列尾</p>\n<p class=\"article_img\"><img class=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/710ef46ca7f308b0bfea404dca768d82.gif\" alt=\"算法演示\" width=\"280\" height=\"237\" data-original=\"https://img.linux.net.cn/data/attachment/album/201408/14/111844d0vl920tj3nvm320.gif\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>算法演示</em></p>\n<h3>算法四：二分查找算法</h3>\n<p>二分查找算法是一种在有序数组中查找某一特定元素的搜索算法。搜素过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜&nbsp;素过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组&nbsp;为空，则代表找不到。这种搜索算法每一次比较都使搜索范围缩小一半。折半搜索每次把搜索区域减少一半，时间复杂度为&Omicron;(logn)&nbsp;。</p>\n<h3>算法五：BFPRT(线性查找算法)</h3>\n<p>BFPRT算法解决的问题十分经典，即从某n个元素的序列中选出第k大（第k小）的元素，通过巧妙的分&nbsp;析，BFPRT可以保证在最坏情况下仍为线性时间复杂度。该算法的思想与快速排序思想相似，当然，为使得算法在最坏情况下，依然能达到o(n)的时间复杂&nbsp;度，五位算法作者做了精妙的处理。</p>\n<p>算法步骤：</p>\n<p>1.&nbsp;将n个元素每5个一组，分成n/5(上界)组。</p>\n<p>2.&nbsp;取出每一组的中位数，任意排序方法，比如插入排序。</p>\n<p>3.&nbsp;递归的调用selection算法查找上一步中所有中位数的中位数，设为x，偶数个中位数的情况下设定为选取中间小的一个。</p>\n<p>4.&nbsp;用x来分割数组，设小于等于x的个数为k，大于x的个数即为n-k。</p>\n<p>5.&nbsp;若i==k，返回x；若i&lt;k，在小于x的元素中递归查找第i小的元素；若i&gt;k，在大于x的元素中递归查找第i-k小的元素。</p>\n<p>终止条件：n=1时，返回的即是i小元素。</p>\n<h3>算法六：DFS（深度优先搜索）</h3>\n<p>深度优先搜索算法（Depth-First-Search），是搜索算法的一种。它沿着树的深度遍历树的节点，尽可能深的搜索树的分&nbsp;支。当节点v的所有边都己被探寻过，搜索将回溯到发现节点v的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发&nbsp;现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止。DFS属于盲目搜索。</p>\n<p>深度优先搜索是图论中的经典算法，利用深度优先搜索算法可以产生目标图的相应拓扑排序表，利用拓扑排序表可以方便的解决很多相关的图论问题，如最大路径问题等等。一般用堆数据结构来辅助实现DFS算法。</p>\n<p>深度优先遍历图算法步骤：</p>\n<p>1.&nbsp;访问顶点v；</p>\n<p>2.&nbsp;依次从v的未被访问的邻接点出发，对图进行深度优先遍历；直至图中和v有路径相通的顶点都被访问；</p>\n<p>3.&nbsp;若此时图中尚有顶点未被访问，则从一个未被访问的顶点出发，重新进行深度优先遍历，直到图中所有顶点均被访问过为止。</p>\n<p>上述描述可能比较抽象，举个实例：</p>\n<p>DFS&nbsp;在访问图中某一起始顶点&nbsp;v&nbsp;后，由&nbsp;v&nbsp;出发，访问它的任一邻接顶点&nbsp;w1；再从&nbsp;w1&nbsp;出发，访问与&nbsp;w1邻&nbsp;接但还没有访问过的顶点&nbsp;w2；然后再从&nbsp;w2&nbsp;出发，进行类似的访问，&hellip;&nbsp;如此进行下去，直至到达所有的邻接顶点都被访问过的顶点&nbsp;u&nbsp;为止。</p>\n<p>接着，退回一步，退到前一次刚访问过的顶点，看是否还有其它没有被访问的邻接顶点。如果有，则访问此顶点，之后再从此顶点出发，进行与前述类似的访问；如果没有，就再退回一步进行搜索。重复上述过程，直到连通图中所有顶点都被访问过为止。</p>\n<h3>算法七：BFS(广度优先搜索)</h3>\n<p>广度优先搜索算法（Breadth-First-Search），是一种图形搜索算法。简单的说，BFS是从根节点开始，沿着树(图)的宽度遍历树(图)的节点。如果所有节点均被访问，则算法中止。BFS同样属于盲目搜索。一般用队列数据结构来辅助实现BFS算法。</p>\n<p>算法步骤：</p>\n<p>1.&nbsp;首先将根节点放入队列中。</p>\n<p>2.&nbsp;从队列中取出第一个节点，并检验它是否为目标。</p>\n<p>如果找到目标，则结束搜寻并回传结果。</p>\n<p>否则将它所有尚未检验过的直接子节点加入队列中。</p>\n<p>3.&nbsp;若队列为空，表示整张图都检查过了&mdash;&mdash;亦即图中没有欲搜寻的目标。结束搜寻并回传&ldquo;找不到目标&rdquo;。</p>\n<p>4.&nbsp;重复步骤2。</p>\n<p class=\"article_img\"><img class=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/9a9645692e28f00a4797cf16045d9751.gif\" alt=\"算法演示\" width=\"187\" height=\"175\" data-original=\"https://img.linux.net.cn/data/attachment/album/201408/14/111844maellactexdhxt1h.gif\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>算法演示</em></p>\n<h3>算法八：Dijkstra算法</h3>\n<p>戴克斯特拉算法（Dijkstra&rsquo;s&nbsp;algorithm）是由荷兰计算机科学家艾兹赫尔&middot;戴克斯特拉提出。迪科斯彻算法使用了广度优先搜索解决非负权有向图的单源最短路径问题，算法最终得到一个最短路径树。该算法常用于路由算法或者作为其他图算法的一个子模块。</p>\n<p>该算法的输入包含了一个有权重的有向图&nbsp;G，以及G中的一个来源顶点&nbsp;S。我们以&nbsp;V&nbsp;表示&nbsp;G&nbsp;中所有顶点的集合。每一个图中的边，都是两个顶点所形成的有序元素对。(u,&nbsp;v)&nbsp;表示从顶点&nbsp;u&nbsp;到&nbsp;v&nbsp;有路径相连。我们以&nbsp;E&nbsp;表示G中所有边的集合，而边的权重则由权重函数&nbsp;w:&nbsp;E&nbsp;&rarr;&nbsp;[0,&nbsp;&infin;]&nbsp;定义。因此，w(u,&nbsp;v)&nbsp;就是从顶点&nbsp;u&nbsp;到顶点&nbsp;v&nbsp;的非负权重（weight）。边的权重可以想像成两个顶点之间的距离。任两点间路径的权重，就是该路径上所有边的权重总和。已知有&nbsp;V&nbsp;中有顶点&nbsp;s&nbsp;及&nbsp;t，Dijkstra&nbsp;算法可以找到&nbsp;s&nbsp;到&nbsp;t的最低权重路径(例如，最短路径)。这个算法也可以在一个图中，找到从一个顶点&nbsp;s&nbsp;到任何其他顶点的最短路径。对于不含负权的有向图，Dijkstra算法是目前已知的最快的单源最短路径算法。</p>\n<p>算法步骤：</p>\n<p>1.&nbsp;初始时令&nbsp;S={V0},T={其余顶点}，T中顶点对应的距离值</p>\n<p>若存在&lt;v0,vi&gt;，d(V0,Vi)为&lt;v0,vi&gt;弧上的权值</p>\n<p>若不存在&lt;v0,vi&gt;，d(V0,Vi)为&infin;</p>\n<p>2.&nbsp;从T中选取一个其距离值为最小的顶点W且不在S中，加入S</p>\n<p>3.&nbsp;对其余T中顶点的距离值进行修改：若加进W作中间顶点，从V0到Vi的距离值缩短，则修改此距离值</p>\n<p>重复上述步骤2、3，直到S中包含所有顶点，即W=Vi为止</p>\n<p class=\"article_img\"><img class=\"lazy\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/6c497300b73cc93b3ffca13c37f41ba8.gif-water\" alt=\"算法演示\" width=\"283\" height=\"222\" data-original=\"https://img.linux.net.cn/data/attachment/album/201408/14/111845fkkdg9ndv1n24uje.gif\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>算法演示</em></p>\n<h3>算法九：动态规划算法</h3>\n<p>动态规划（Dynamic&nbsp;programming）是一种在数学、计算机科学和经济学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。&nbsp;动态规划常常适用于有重叠子问题和最优子结构性质的问题，动态规划方法所耗时间往往远少于朴素解法。</p>\n<p>动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再合并子问题的解以得出原问题的解。&nbsp;通常许多&nbsp;子问题非常相似，为此动态规划法试图仅仅解决每个子问题一次，从而减少计算量：&nbsp;一旦某个给定子问题的解已经算出，则将其记忆化存储，以便下次需要同一个&nbsp;子问题解之时直接查表。&nbsp;这种做法在重复子问题的数目关于输入的规模呈指数增长时特别有用。</p>\n<p>关于动态规划最经典的问题当属背包问题。</p>\n<p>算法步骤：</p>\n<p>1.&nbsp;最优子结构性质。如果问题的最优解所包含的子问题的解也是最优的，我们就称该问题具有最优子结构性质（即满足最优化原理）。最优子结构性质为动态规划算法解决问题提供了重要线索。</p>\n<p>2.&nbsp;子问题重叠性质。子问题重叠性质是指在用递归算法自顶向下对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。&nbsp;动态规划算法正是利用了这种子问题的重叠性质，对每一个子问题只计算一次，然后将其计算结果保存在一个表格中，当再次需要计算已经计算过的子问题时，只是&nbsp;在表格中简单地查看一下结果，从而获得较高的效率。</p>\n<h3>算法十：朴素贝叶斯分类算法</h3>\n<p>朴素贝叶斯分类算法是一种基于贝叶斯定理的简单概率分类算法。贝叶斯分类的基础是概率推理，就是在各种条件的存在不确定，仅知其出现概率的情况下，&nbsp;如何完成推理和决策任务。概率推理是与确定性推理相对应的。而朴素贝叶斯分类器是基于独立假设的，即假设样本每个特征与其他特征都不相关。</p>\n<p>朴素贝叶斯分类器依靠精确的自然概率模型，在有监督学习的样本集中能获取得非常好的分类效果。在许多实际应用中，朴素贝叶斯模型参数估计使用最大似然估计方法，换言之朴素贝叶斯模型能工作并没有用到贝叶斯概率或者任何贝叶斯模型。</p>','2019-09-18 03:14:58','2019-09-18 03:14:58'),(29,29,'有关云架构建设和选型的思考','https://linux.cn/article-3672-1.html','计算机云经过多年的发展，由一开始的概念，慢慢发展成熟并能够推向市场，提供多种多样的服务，市场空间非常之大。\n\n在云的发展过程中，亚马逊经过多年的深耕积累，发展成为了云行业的标杆企业，甚至可以说是建立了云解决方案的标准。之后，Google、IBM、思 科、Oracle、HP、Intel、华为等IT巨头先后参与进来，在软件和硬件方面提供专门的面向企业的解决方案，纷纷打着云计算、大数据、智能等概念 来吸引客户，拓展市场。\n\n另外一方面，基于大数据、存储、云服务等，市场上也先后出现一些创新企业，如Dropbox、Rackspace，国内的七牛、青云、UnitedStack等。\n\n当前的IT世界有一个常见的现象，就是只要某一个领域有一套成熟的商业软件，就同时也会有一套开源的解决方案，如Windows之于 Linux，Google的MapReduce、GFS、大表之于Hadoop等。在云领域也存在相应的开源解决方案，目前最为著名的有 Openstack和Cloudstack。开源行业的领导者RedHat此前\n\n在企业操作系统的市场已经做的很好，RHEL的各个版本在企业级系统市场有相当高的市场份额。现在的RedHat特别重视云的发展，并将云操作系统作为未来10年的发展战略重点，在最近两年先后收购了Gluster以及Ceph等存储企业，以壮大自己在云领域的影响力。','<p>最近在负责公司内部私有云的建设，一直在思考怎么搞云计算，怎么才能够把云架构设计得好一些。本文尽量全面的列出了云架构建设和选型的考量因素。</p>\n<p>我们主要从五个层面逐步评估云架构的建设和选型，分别是：</p>\n<ol>\n<li>行业生态</li>\n<li>企业需求</li>\n<li>云计算的能力</li>\n<li>潜在的挑战</li>\n<li>如何建设</li>\n</ol>\n<h3>一、行业生态</h3>\n<p>计算机云经过多年的发展，由一开始的概念，慢慢发展成熟并能够推向市场，提供多种多样的服务，市场空间非常之大。</p>\n<p>在云的发展过程中，亚马逊经过多年的深耕积累，发展成为了云行业的标杆企业，甚至可以说是建立了云解决方案的标准。之后，Google、IBM、思 科、Oracle、HP、Intel、华为等IT巨头先后参与进来，在软件和硬件方面提供专门的面向企业的解决方案，纷纷打着云计算、大数据、智能等概念 来吸引客户，拓展市场。</p>\n<p>另外一方面，基于大数据、存储、云服务等，市场上也先后出现一些创新企业，如Dropbox、Rackspace，国内的七牛、青云、UnitedStack等。</p>\n<p>当前的IT世界有一个常见的现象，就是只要某一个领域有一套成熟的商业软件，就同时也会有一套开源的解决方案，如Windows之于 Linux，Google的MapReduce、GFS、大表之于Hadoop等。在云领域也存在相应的开源解决方案，目前最为著名的有 Openstack和Cloudstack。开源行业的领导者RedHat此前</p>\n<p>在企业操作系统的市场已经做的很好，RHEL的各个版本在企业级系统市场有相当高的市场份额。现在的RedHat特别重视云的发展，并将云操作系统作为未来10年的发展战略重点，在最近两年先后收购了Gluster以及Ceph等存储企业，以壮大自己在云领域的影响力。</p>\n<p>随着云领域的发展，市场上也逐渐形成了面向企业提供硬件和软件产品的提供商、面向企业提供服务的提供商、面向市场初创企业提供基础服务的提供商、面向个人提供业务服务的提供商等一系列行业生态。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/09/927729b7a6043e2cd84beb9a7ed3d781.jpg-water\" alt=\"\" width=\"776\" height=\"566\" /></p>\n<h3>二、企业需求</h3>\n<p>需求是什么，也就是what people need这个问题。我们所说的people，即人或者公司实体，该对象的划分并不单纯，可粗浅的从三个角度来进行分类：</p>\n<p>从企业角度看：</p>\n<p>1）小型企业</p>\n<p>小型企业的技术储备不多，人员缺乏，没有独立的IT部门，但是在构建自己的IT系统过程中需要购置各种产品和服务，包括服务器、网络、CDN等等，而要完成这样的工作，需要投入大量的人力和财力。通过购买云服务可以更加方便快捷，简单的完成系统的搭建。</p>\n<p>2）中型企业</p>\n<p>中型企业有一定的规模，需要在信息化、管理方面有所注重，一般内部都设立IT部门，但是和小型企业一样，IT部门大多数都是为了解决自身需求，很难能够有一个完整的解决方案。这样在服务器、网络、CDN、企业管理软件等等的需求还是比较大的。</p>\n<p>3）大型企业</p>\n<p>大型企业人数规模在万人以上，特别是高新企业，都有一个实力不错的IT支撑部门，通过部门就可以完善对企业内部信息化建设。</p>\n<p>从企业性质范围来看：</p>\n<p>1）传统行业企业</p>\n<p>传统行业大多数是以服务业、制造业、生产性企业为主，在IT信息化方面相对比较落后，属于重资产行业。</p>\n<p>2）互联网企业</p>\n<p>互联网行业是基于IT作为解决方案的</p>\n<p>3）IT服务企业</p>\n<p>以销售软件、硬件、以及技术咨询服务为主的企业。</p>\n<p>针对市场中存在的企业、个体等的需求特点，市场上一般对软件服务进行如下分类：</p>\n<ol>\n<li>提供软件的服务，解决企业内部信息化问题，如ERP系统、进销存管理系统、人力资源管理系统、行政系统、财务系统等等。（SaaS）</li>\n<li>提供平台服务，解决行业共性问题，将SaaS迁移到云端，提供平台类的服务。如淘宝的开放平台、Facebook的开放平台、基于Salesforce的销售系统、云笔记、云盘等。（PaaS）</li>\n<li>提供基础设施服务。基础设施包括软件和硬件方面的，包括存储、虚拟机、网络、防火墙、缓存、负载均衡、数据库等等。（IaaS）</li>\n</ol>\n<p>从企业内部人员角色来看：</p>\n<p>企业内部，尤其是互联网企业内部，一般将角色分为如下几类：</p>\n<ol>\n<li>开发</li>\n<li>测试</li>\n<li>运维</li>\n<li>DBA</li>\n<li>产品</li>\n<li>项目管理人员</li>\n<li>客服</li>\n<li>业务人员（销售、市场、BD、人力资源、行政等等）</li>\n</ol>\n<p>不同的角色对于软件服务的需求也是不同的，下图大致描绘了互联网行业各个角色对云平台的需求：</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/223a909fb0a15233f79ae5515f03c2b9.jpg-water\" alt=\"\" width=\"900\" height=\"527\" /></p>\n<h3>三、云计算的能力</h3>\n<p>云计算能够解决什么，也就是what cloud offer这个问题。目前的云计算在应用中主要提供了以下八个能力：</p>\n<ol>\n<li>封装：将计算能力和软件放在云端，可以减少重复建设，将通用的服务封装起来，达到重用，减少资源的浪费，提高生产效率，并提供成熟的解决方案。 在云端，云提供商可以建立软件的标准，提供发布包的方式，用户可以通过软件包的方式进行购买使用，譬如目前开源领域的Docker。</li>\n<li>安全：云计算将数据和存储，软件逻辑都集中于云端，更能方便的统一构建安全体系，通过Iptables实现网络过滤，并在服务端做安全组件实现安全策略，并能够通过海量集群应对DDOS攻击等。</li>\n<li>灵活：云计算提供灵活的软件和服务端架构，用户不再需要自己构建应用运行环境，对资源的使用能够按需购买，并能够升级，并自由组合。举例来说：用户可以选用不同的存储方式（mysql、oracle，文件系统，kv等等）</li>\n<li>性能：通过集群的能力和云端的集成能够提高集群的性能处理，通过专业的云解决提供商，在云端的性能扩展更加方便，技术上更加专业。譬如服务端可以在用户毫不察觉的情况下完成添加机器、存储扩容等操作。</li>\n<li>伸缩能力：在存储和计算能力方面提供弹性的资源管理，能够按需使用，在使用过程中，可以通过动态的添加和减少物理资源，来提高响应能力或节约成本。</li>\n<li>运维：云计算在IaaS角度来看，重要的是运维，能够将运维更加集中化管理，并完全智能化，大大降低人力成本</li>\n<li>充分利用物理资源：通过云建设，能够将物理资源进行虚拟化处理，屏蔽物理硬件底层，并能够完成物理资源软化进行逻辑管理和分配调度</li>\n<li>大数据：大数据保存于云端，能够提供数据分析和智能处理</li>\n</ol>\n<p>当然，云计算还有很多很多好处，给我们带来很多想像空间和IT技术的革命。</p>\n<h3>公有云与私有云</h3>\n<p>行业内将云分为&ldquo;公有云&rdquo;和&ldquo;私有云&rdquo;。在我们之前的需求分析过程中，大致了解了云的需求，&ldquo;公有云&rdquo;和&ldquo;私有云&rdquo;的差别最大的是需求的差异，因为需求的差异，导致了技术方案和产品决策的差异。</p>\n<p>公有云需求上由于用户多种多样，导致需求存在不一样，特别需要更多的定制化，譬如：</p>\n<ol>\n<li>存储个性化\n<p>云存储方面大概分为块存储和对象存储，块存储适合于vm运行环境，对象存储提供了KV的访问方式提供了海量扩展存储文件的能力，用户可以根据自己 的需求选择不同的存储方式，选用不同的容量。在存储物理介质方面来说，因为存在不同的物理介质，对性能和安全的要求，可以采用传统的SATA硬盘，或者 SSD存储等。</p>\n</li>\n<li>内存使用\n<p>内存方面，需要提供动态扩展内存的方式，用户能够自由扩展</p>\n</li>\n<li>网络的定制化\n<p>公有云用户需要能够构建自己的内部网络，并能够自动组网</p>\n</li>\n<li>数据库使用\n<p>公有云的用户分属不同的公司团体，各自的技术差异存在，因而有不同的数据库类型，譬如mysql，sqlserver，oracle等等。并能够定义存储大小，内存运行大小等等。并提供数据备份、恢复、高可用服务等</p>\n</li>\n<li>缓存使用\n<p>公有云的用户可以选择不同的缓存方式，譬如增加CDN，采用不同的KV缓存方式并选择容量。</p>\n</li>\n<li>安全问题\n<p>公有云对于云的安全和私有云差别较大，私有云大多数在安全问题上不需要公有云那么严格，大多数是内部系统之间的交互</p>\n</li>\n</ol>\n<p>以上仅限于IaaS层面的考虑，当然对于公有云来说还有很多细化的个性化需求，例如：数据分析，业务对接服务等等。</p>\n<h3>四、潜在的挑战</h3>\n<p>计算机自从诞生以来，一直按照冯.诺伊曼的体系发展在硬件的基础上的操作系统，也分为网络协议体系的实现、内存管理、文件管理体系等等。大致的抽象图如下：</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/da8fe2a7991824409a6d1e7c68e39f20.jpg-water\" alt=\"\" width=\"913\" height=\"607\" /></p>\n<p>要建设云，有几个重要的问题需要解决：</p>\n<ol>\n<li>管理问题\n<p>云计算的实施首先要解决运维的问题，在云环境下后端是大规模数量的物理节点的集群，对于同时维护数以千计算的计算节点，以及部署结构的复杂，需求 的变化，光靠增加人力也难以解决复杂的问题。从而需要构建高效的计算资源管理系统，能够灵活简单的管理运系统，并能够及时的发现问题。</p>\n</li>\n<li>计费问题(公有云)\n<p>对于公有云而言，因为是面向公众的，必然产生费用的问题，常用的收费方式多种多样，也因为产品的不同而计费方式不同，譬如：网络、存储、cpu、数据库容量等等</p>\n</li>\n<li>资源隔离问题\n<p>云计算运行在云端，是通过虚拟化体系建立的，虚拟化是建立在硬件之上，多个虚拟化资源同时运行于同一节点（host）中，存在着资源的共享争用问题，</p>\n<p>这样就存在着资源使用的公平性问题，导致同一Host上的资源使用相互影响。为了使得彼此资源使用相互独立，我们要建立相应的隔离机制。资源的隔离包括：存储、内存、cpu、数据库、网络等，其中网络是最难控制的。</p>\n</li>\n<li>安全问题\n<p>在云端的应用和基于客户端的安全，面临的环境不一样，客户端方面大多数是病毒问题引起的，而在云端，也存在一些服务器攻击的问题，以及数据相互独立相互影响的问题，以及一些服务端编程的安全问题等。</p>\n</li>\n<li>性能问题\n<p>对于云来说，需要保证云端的性能问题，包括CPU处理性能，IO处理能力，资源的就近访问，资源数据同步的速度，还需要解决系统底层的性能问题，包括文件处理Cache，存储介质的优化，采用SSD等，或者采用SATA+SSD的混合方式节约资源和降低成本。</p>\n</li>\n<li>存储问题\n<p>对于云来说，由于云端是将客户端的数据和运算转移到云端，必须要有足够的存储能力以及足够稳定的存储系统，保证用户数据的安全，对于存储来说，有 提供VM虚拟机运行环境的block device（块存储），以及提供KV方式的对象访问存储，这些都需要保证数据复制、数据读写访问的性能和数据永久可用的能力</p>\n</li>\n<li>网络问题\n<p>对于公有云以及私有云的一些应用场景，需要能够提供网络的逻辑隔离（SDN）或物理隔离，以及对网络的访问灵活问题。构建虚拟化网络，由于物理条 件的限制，我们不得不从L2-L4层进行处理，我们常用的方式 是：bridge，vlan，gre，sdn（openflow，opendaylight），以及一些厂家的产品等等。</p>\n</li>\n<li>高可用问题\n<p>高可用问题是在分布式系统中必须要处理的问题，正因为集群的问题，我们必须要从多方面考虑解决的问题，包括保证云管理系统的高可用性，存储介质的高可用性，网络的高可用性，虚拟机高可用问题等等。</p>\n</li>\n<li>提高资源利用率问题\n<p>对于物理资源的虚拟化，我们有很多种解决方法，KVM、Vmware、xen、Hyperv、LXC等等，在HVM的方式下，对于VM本身的启动 需要占用大量的内存、cpu和存储资源，导致系统内存和cpu使用有一定的浪费，基于LXC的解决方案因为是机基于Host OS进程，通过namespace的方式进行隔离的，是一种轻量级的实现，能够在资源初始化，资源利用率方面能够最大化，对于各个应用场景来说，我们可以 选用合适的解决方案。</p>\n</li>\n</ol>\n<h3>五、如何建设</h3>\n<p>58同城经过多年的发展，探索了一条适合自身发展的技术架构体系。随着业务和技术的发展，团队规模不断壮大，在技术和管理上面临越来越多的挑战。在 项目需求管理，开发效率、代码管理和质量建设，测试，线上发布，运维管理等方面需要有一套完整的解决方案，来提升公司的协作能力和整体能效。</p>\n<p>58同城目前所有的应用在线上都是跑在物理机器上，采用物理机的方式，一方面会导致服务器资源得不到充分和合理的使用，譬如：有些物理机器cpu使 用长期在10%以下，有些内存使用剩余很多；另外一方面，由于互联网的特点，存在着时段内的访问高峰问题，需要解决资源使用的伸缩问题；基于以上问题，架 构部对现有的技术体系进行梳理和分析，采用资源虚拟化的方式进行私有云的建设，并在这基础上，完善公司整体技术体系，包括：开发、测试、上线、运维等一系 列自动化和智能化方面的建设。</p>\n<p>私有云的目标</p>\n<ol>\n<li>提高物理资源的利用率</li>\n<li>一套云管理系统，降低运维的复杂度，提高运维工作效率</li>\n<li>构建灵活的开发、测试集成环境</li>\n<li>提供海量的存储体系</li>\n<li>建立完善的监控体系</li>\n<li>建立基础应用环境、方便测试</li>\n<li>统一架构</li>\n<li>智能资源调度</li>\n</ol>\n<p>实施方案：OpenStack</p>\n<p>对于云计算来说，也存在着多种解决方案，如CloudStack和OpenStack等。在两种方案的比较之后，我们最终选择了OpenStack的解决方案。主要是出于以下几点原因：</p>\n<ol>\n<li>OpenStack的社区成熟度：OpenStack经过几年的发展，社区已经越来越成熟，很多大公司都参与进来帮助完善，红帽公司未来十年也将OpenStack作为发展的战略重点。</li>\n<li>架构设计的选择：OpenStack采用了Python语言编写，并且设计上采用组件化的方式，各个组件独立发展，并相互解耦</li>\n<li>OpenStack提供了更加完整成熟的方案，能够满足多样的需求，同时已经有不少公司采用，已经经过生产上的验证</li>\n<li>文档问题：OpenStack文档化做的不错，网上能够找到多种多样的问题处理办法</li>\n<li>人员招聘问题，经过多年的发展和市场的培育，了解OpenStack的人越来越多，对于开发维护的人才建设和招聘相对成熟一些。</li>\n<li>发展比较迅速</li>\n</ol>\n<p>下图是我们大致的架构规划</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/editor/2019/09/ce1189c1b197a2ac93d6d8d505d968e1.jpg-water\" alt=\"\" width=\"861\" height=\"791\" /></p>\n<p>文章观点仅一家之言，欢迎大家一起交流探讨。我计划在下一篇文章《58同城私有云建设实践》中详细介绍我们私有云建设的思路和过程，中间遇到的问题，希望跟大家一起探讨。</p>','2019-09-18 03:19:34','2019-09-18 03:19:34'),(30,30,'前置逗号之争','https://linux.cn/article-3693-1.html','其实在很多开源软件中前置逗号是经常使用的，它是Haskell语言默认的代码风格。\n\nNode.JS的前负责人isaacs（现npmjs.org负责人，参见：下一阶段的NodeJS) 写过一篇文章，讨论将逗号写在前面的优缺点。讨论中尽管很多人无法适应comma-first。但其中有一条优点无法回避，逗号前移可以很容易发现语法错误。\n\n下段代码的d变量名后面少了一个逗号，这是我们经常犯的一个错误，在一般代码风格中，这个错误是非常不容易被发现的：','<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/09/98e174a90bc67258f795228ecb8a0f0b.jpg-water\" alt=\"\" width=\"500\" height=\"250\" /></p>\n<p>个人认为<a class=\"ext\" href=\"https://github.com/airbnb/\" target=\"_blank\" rel=\"external nofollow noopener\">Airbnb</a>的javascript代码规范是写的比较好的, 不过其中有一章关于逗号Commas的使用是这样写的：<br /><br />前置逗号（Leading commas）：不要使用</p>\n<pre class=\"language-javascript\"><code>// bad\nvar once\n  , upon\n  , aTime;\n \n// good\nvar once,\n    upon,\n    aTime;\n \n// bad\nvar hero = {\n    firstName: \'Bob\'\n  , lastName: \'Parr\'\n  , heroName: \'Mr. Incredible\'\n  , superPower: \'strength\'\n};\n \n// good\nvar hero = {\n  firstName: \'Bob\',\n  lastName: \'Parr\',\n  heroName: \'Mr. Incredible\',\n  superPower: \'strength\'\n};</code></pre>\n<p>其实在很多开源软件中前置逗号是经常使用的，它是Haskell语言默认的代码风格。</p>\n<p>Node.JS的前负责人isaacs（现npmjs.org负责人，参见：<a class=\"ext\" href=\"http://ourjs.com/detail/52d749f6ed5c27720300000d\" target=\"_blank\" rel=\"external nofollow noopener\">下一阶段的NodeJS</a>) 写过<a class=\"ext\" href=\"https://gist.github.com/isaacs/357981\" target=\"_blank\" rel=\"external nofollow noopener\">一篇文章</a>，讨论将逗号写在前面的优缺点。讨论中尽管很多人无法适应comma-first。但其中有一条优点无法回避，逗号前移可以很容易发现语法错误。</p>\n<p>下段代码的d变量名后面少了一个逗号，这是我们经常犯的一个错误，在一般代码风格中，这个错误是非常不容易被发现的：</p>\n<pre class=\"language-javascript\"><code>// error in standard style\nvar a = \"ape\",\n    b = \"bat\",\n    c = \"cat\",\n    d = \"dog\"\n    e = \"elf\",\n    f = \"fly\",\n    g = \"gnu\",\n    h = \"hat\",\n    i = \"ibu\";</code></pre>\n<p>但在前置代码规范中，一眼就可以看得出来：&nbsp;</p>\n<pre class=\"language-javascript\"><code>// error in comma-first style\nvar a = \"ape\"\n  , b = \"bat\"\n  , c = \"cat\"\n  , d = \"dog\"\n  e = \"elf\"\n  , f = \"fly\"\n  , g = \"gnu\"\n  , h = \"hat\"\n  , i = \"ibu\"\n  ;</code></pre>\n<p>前置逗号与\".\"的连续型写法或者叫做链式写法(可能还有\"+\")是保持一致的，如：</p>\n<pre class=\"language-javascript\"><code>jQuery\n  .ajax(\'//home/url\')\n  .done(function() {\n  })\n  .error(function() {\n  })\n  .always(function() {\n  })</code></pre>\n<p>前置逗号在最后新增删除变量时只需要影响一行。而无需删除或添加原来最后一个变量的结束符号。并且前置写法，2个空格的tab即可将变量对齐，2个space可使代码更紧凑。传统写法，需要4个空格的tab才能使变量对齐。</p>\n<pre class=\"language-javascript\"><code>var a = \"ape\"\n  , b = \"bat\"\n  , c = \"cat\"\n  , d = \"dog\"\n  , e = \"add new line\"  //只影响的一行（添加或删除）\n  ;\n \nvar a = \"ape\",\n    b = \"bat\",\n    c = \"cat\",\n    d = \"dog\",\n    e = \"add new line\"; //删除此行时需要将前一行d的最后一个逗号同时删除，此时会影响两行；新加时同时删除原有的分号，并换成逗号。此时即易发生输入错误。</code></pre>\n<p>另外在Twitter的bootstrap框架中，每个变量都使用var来声明，不用连续声明的方式。而且默认不用分号结束的：</p>\n<p>这种格式的代码看上去也比较优美，同时避免了关于逗号的争论：</p>\n<pre class=\"language-javascript\"><code>var a = \"ape\"\nvar b = \"bat\"\nvar c = \"cat\"</code></pre>\n<p>其实省略分号也是可以借鉴的，所以本文认为比较好的逗号格式应该是这样的：</p>\n<pre class=\"language-javascript\"><code>var one\n  , two\n  , three\n \nvar prop = {\n    a: \'a\'\n  , b: \'b\'\n  , c: \'c\'\n  , d: \'d\'\n}</code></pre>\n<h3>负作用</h3>\n<p>其实省略分号也有负用，在与闭包结合时会有一些问题，如下段代码：</p>\n<pre class=\"language-javascript\"><code>var a = 1\n \n(function() {\n  console.log(a)\n})()\n \n// TypeError: number is not a function</code></pre>\n<p>&nbsp;一个错误抛出了，在JS解释执行时，很可能将之合成了1行。</p>\n<pre class=\"language-javascript\"><code>var a = 1 (function() { console.log(a) })()</code></pre>\n<p>错误就产生了，所以很多开源框架都会在闭包前置或后置分号，以避免前人无意或故意遗漏分号从而造成错误，正确的写法应该是：</p>\n<pre class=\"language-javascript\"><code>var a = 1\n \n;(function() {\n  console.log(a)\n})()</code></pre>\n<p>不使用分号的bootstrap框架也是这么干的，不过bootstrap框架使用了看上去更加高级的+号分隔闭包并后置分号，不过这一套不适合代码与闭包混合使用的场景，还是不要学比较好。</p>\n<pre class=\"language-javascript\"><code>var a = 1\n \n+ function() {\n  console.log(a)\n} ();\n \n//a 的值会变成 NaN</code></pre>','2019-09-18 03:25:13','2019-09-18 03:25:13'),(31,31,'如何让你的JavaScript代码更加语义化','https://linux.cn/article-3697-1.html','语义化这个词在 HTML 中用的比较多，即根据内容的结构化选择合适的标签。其作用不容小觑：\n\n赋予标签含义，让代码结构更加清晰，虽然我们可以在标签上添加 class 来标识，但这种通过属性来表示本体的形式会显得不够直接，而且在一定程度上也有冗余。\n优化搜索引擎（SEO），结构良好的网页对搜索引擎的亲和力是很高的，百度和 google 也给出了很多网页结构化的建议（规范），方便他们抓取网页。\n利于设备解析，如盲人阅读器对页面的分析，目前淘宝很多网页都是支持盲人阅读的，这种体验上的优化得利于网页的良好结构和语义化表达。\n便于开发者维护，在参加工作之前，很多程序员都是单人开发模式，单人开发无所谓代码结构，自己看得懂就差不多了，一旦走向工作岗位，会发现，以前的鄙习有点让自己捉襟见肘了。\nW3C Group 工作组在 web 规范上持续贡献，他们的目标也是期望整个互联网的发展态势稳定统一起来。不扯远了，回到本文需要阐述的重点：如何语义化 JavaScript 代码？','<p class=\"p1\">语义化这个词在 HTML 中用的比较多，即根据内容的结构化选择合适的标签。其作用不容小觑：</p>\n<ul class=\"ul1\">\n<li class=\"li3\">赋予标签含义，让代码结构更加清晰，虽然我们可以在标签上添加 class 来标识，但这种通过属性来表示本体的形式会显得不够直接，而且在一定程度上也有冗余。</li>\n<li class=\"li3\">优化搜索引擎（SEO），结构良好的网页对搜索引擎的亲和力是很高的，百度和 google 也给出了很多网页结构化的建议（规范），方便他们抓取网页。</li>\n<li class=\"li3\">利于设备解析，如盲人阅读器对页面的分析，目前淘宝很多网页都是支持盲人阅读的，这种体验上的优化得利于网页的良好结构和语义化表达。</li>\n<li class=\"li3\">便于开发者维护，在参加工作之前，很多程序员都是单人开发模式，单人开发无所谓代码结构，自己看得懂就差不多了，一旦走向工作岗位，会发现，以前的鄙习有点让自己捉襟见肘了。</li>\n</ul>\n<p class=\"p2\">W3C Group 工作组在 web 规范上持续贡献，他们的目标也是期望整个互联网的发展态势稳定统一起来。不扯远了，回到本文需要阐述的重点：如何语义化 JavaScript 代码？</p>\n<p class=\"p2 article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/09/762e70d82c4508de1ead5bbae51f9844.png-water\" alt=\"\" width=\"512\" height=\"512\" /></p>\n<h3 id=\"p-1\" class=\"p4\"><strong>一、先看看那些不易读懂的 JavaScript 代码</strong></h3>\n<p class=\"p2\"><strong>1. 判断</strong></p>\n<pre class=\"language-javascript\"><code>// 数据类型判断\nif(Object.prototype.toString.call(str) === &ldquo;[object String]&rdquo;){\n    // doSomething();\n}；\n \n// 文件类型判断\nif(/.*\\.css(?=\\?|$)/.test(&ldquo;/path/to/main.css&rdquo;)){\n    // doSomething();\n}</code></pre>\n<p class=\"p2\"><strong>2. 清空一个队列</strong></p>\n<pre class=\"language-javascript\"><code>var Queue = [\"test1\", \"test2\", \"test3\"];\n// 常见方式\nQueue.length = 0;\nQueue = []; </code></pre>\n<p class=\"p2\"><strong>3. 注册一个变量</strong></p>\n<pre class=\"language-javascript\"><code>// 注册\nvar repos = {};\n \nrepos[&ldquo;a&rdquo;] = {\n   name: &ldquo;a&rdquo;,\n   content: {}\n};\n \nrepos[&ldquo;b&rdquo;] = {\n   name: &ldquo;b&rdquo;,\n   content: {}\n};</code></pre>\n<p class=\"p2\">上面几个例子倒不至于看不懂，程序都特别简单，第一个例子中，我们通过 Object 原型链上的 toString 方法来判断一个变量是否为 string 类型，以及使用正则来判断一个文件是不是 css 文件。代码写起来比较轻松，倘若我们同时需要判断多个对象是否为多个类型中的一种呢？再比如我们需要在一串代码中提取 require 依赖关系呢，是否应该思考下如何组织自己的代码？</p>\n<p class=\"p2\">在第二个例子中，将数组的长度设置为 0，或者使用空数组来重置这个变量，都是十分常见的方式，但目前的场景是清空一个队列，我们是否可以使用更加语义化的形式来呈现？比如我们只需要清空该队列的前五个和后三个 item 呢？</p>\n<p class=\"p2\">第三个例子中，变量的注册，把一堆注册放在一起，上面的形式确实也是一目了然，如果 a b c d 等都是分隔穿插在几百行代码之间呢？突然来个 repos[\"x\"] 这样是否显得有些不太直观。</p>\n<p class=\"p2\">为了说明本文所倡导的思想，上面的几个解释都有些含糊和牵强，请往下看。</p>\n<h3 id=\"p-2\" class=\"p4\"><strong>二、提高代码语义性</strong></h3>\n<p class=\"p2\">针对上述三个案例，用更加语义化的方式来呈现代码：</p>\n<p class=\"p2\"><strong>1. 语义化变量</strong></p>\n<pre class=\"language-javascript\"><code>// 类型判断\nfunction isType(type){\n    return function(o){\n        return Object.prototype.toString.call(o) === \'[object \' + type + \']\';\n    }\n}\n \nvar isString = isType(&ldquo;String&rdquo;);\nvar isObject = isType(\"Object\");\nvar isArray = isType(\"Array\");\n \nisString(\"I\'m Barret Lee.\");\nisArray([1,2,3])；\nisObject({});</code></pre>\n<p class=\"p2\">我觉得不需要太多的解释，对比</p>\n<pre class=\"language-javascript\"><code>if(Object.prototype.toString.call(str) === &ldquo;[object String]&rdquo;){\n    // code here...\n}</code></pre>\n<p>显得清新多了吧。</p>\n<pre class=\"language-javascript\"><code>// 提取常量\nvar isCss = /.*\\.css(?=\\?|$)/;\nisCss.test(&ldquo;/path/to/main.css&rdquo;);</code></pre>\n<p class=\"p2\">不管 isCss 这个正则代码有多长，当我们看到 isCss 这个单词就可以顾名思义。很多人写正则都不会将正则单独提取出来使用某个有意义的变量去存储，加注释还好，要是不加注释，后续开发者就只能硬着头皮看懂正则去理解代码的含义。</p>\n<p class=\"p2\">这样的处理，实际上是增加了代码量，不过从工程角度去审视，有助于提高开发效率以及代码的组织性。</p>\n<p class=\"p2\"><strong>2. 语义化行为</strong></p>\n<pre class=\"language-javascript\"><code>var Queue = [\"test1\", \"test2\", \"test3\"];\nQueue.splice(0, Queue.length);</code></pre>\n<p class=\"p2\">上面代码具有很强的语义性，从索引为 0 的地方开始，直到队列最后，删除 Queue 中所有的 item。这种写法的扩展性也更好：</p>\n<pre class=\"language-javascript\"><code>Queue.splice(2, 4); // 删除从索引为 2，往后的 4 个元素</code></pre>\n<p class=\"p2\">这只是个小例子，有些行为是需要很多代码组合处理的，如果没有很好的组合同一行为的代码，整个结构就显得十分涣散，不利于阅读。</p>\n<pre class=\"language-javascript\"><code>// 注册\nvar repos = [];\n \nfunction register(o){\n   repos[o.name] = o;\n}\n \nregister({\n  name: &ldquo;a&rdquo;,\n  content: {}\n});</code></pre>\n<p class=\"p2\">对比我们之前</p>\n<pre class=\"language-javascript\"><code>repos[&ldquo;a&rdquo;] = {\n   name: &ldquo;a&rdquo;,\n   content: {}\n};</code></pre>\n<p class=\"p5\">语义化程度是不是有所提高~</p>\n<h3 id=\"p-3\" class=\"p4\"><strong>三、小结</strong></h3>\n<p class=\"p2\">代码的优化，需要考虑的维度很多。但是代码的优化并不是减少代码量，有的时候我们需要增加代码来提高代码的可阅读性。</p>\n<ul class=\"ul1\">\n<li class=\"li3\">正确标记变量</li>\n<li class=\"li3\">封装某个动作</li>\n<li class=\"li3\">注意函数的写法</li>\n<li class=\"li3\">不容易理解的东西，加注释</li>\n</ul>\n<p class=\"p2\">本文为抛砖引玉，希望可以触发你对代码优化的敏感度的思考，写出一手别人竖拇指的代码~</p>','2019-09-18 03:31:04','2019-09-18 03:31:04'),(32,32,'CSS编写指导规范和建议','https://linux.cn/article-3711-1.html','在参与规模庞大、历时漫长且参与人数众多的项目时，所有开发者遵守如下规则极为重要：\n\n保持 CSS 易于维护\n保持代码清晰易懂\n保持 CSS 的可拓展性\n为了实现这一目标，我们要采用诸多方法。','<p>在参与规模庞大、历时漫长且参与人数众多的项目时，所有开发者遵守如下规则极为重要：</p>\n<ul class=\"task-list\">\n<li>保持 CSS 易于维护</li>\n<li>保持代码清晰易懂</li>\n<li>保持 CSS 的可拓展性</li>\n</ul>\n<p>为了实现这一目标，我们要采用诸多方法。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/09/66a2dee33cfd9d2d83253e33162b767c.jpg-water\" alt=\"\" width=\"700\" height=\"260\" /></p>\n<p>本文档第一部分将探讨语法、格式以及分析 CSS 结构；第二部分将围绕方法论、思维框架以及编写与规划 CSS 的看法。</p>\n<hr />\n<h2>CSS 文档分析</h2>\n<p>无论编写什么文档，我们都应当维持统一的风格，包括统一的注释、统一的语法与统一的命名规范。</p>\n<h3>总则</h3>\n<p>将行宽控制在 80 字节以下。渐变（gradient）相关的语法以及注释中的 URL 等可以算作例外，毕竟这部分我们也无能为力。</p>\n<p>我倾向于用 4 个空格而非 Tab 缩进，并且将声明拆分成多行。</p>\n<h3>单一文件与多文件</h3>\n<p>有人喜欢在一份文件文件中编写所有的内容，而我在迁移至 Sass 之后开始将样式拆分成多个小文件。这都是很好的做法。无论你选择哪种，下文的规则都将适用，而且如果你遵守这些规则的话你也不会遇到什么问题。这两种写法的区别仅仅在于目录以及区块标题：</p>\n<h3>目录</h3>\n<p>在 CSS 的开头，我会维护一份目录，就像这样：</p>\n<pre class=\"language-scss\"><code>/*------------------------------------*\\\n    $CONTENTS\n\\*------------------------------------*/\n/**\n * CONTENTS............You&rsquo;re reading it!\n * RESET...............Set our reset defaults\n * FONT-FACE...........Import brand font files\n */</code></pre>\n<p>这份目录可以告诉其他开发者这个文件中具体含有哪些内容。这份目录中的每一项都与其对应的区块标题相同。</p>\n<p>如果你在维护一份单文件 CSS，对应的区块将也在同一文件中。如果你是在编写一组小文件，那么目录中的每一项应当对应相应的 @include 语句。</p>\n<h3>区块标题</h3>\n<p>目录应当对应区块的标题。如下：</p>\n<pre class=\"language-scss\"><code>/*------------------------------------*\\\n    $RESET\n\\*------------------------------------*/</code></pre>\n<p>区块标题前缀&nbsp;$&nbsp;可以让我们使用 [Cmd|Ctrl]+F 命令查找标题名时将搜索范围限制在区块标题中。</p>\n<p>如果你在维护一份大文件，那么在区块之间空 5 行，如下：</p>\n<pre class=\"language-scss\"><code>/*------------------------------------*\\\n    $RESET\n\\*------------------------------------*/\n[Our\nreset\nstyles]\n \n \n \n \n \n/*------------------------------------*\\\n    $FONT-FACE\n\\*------------------------------------*/</code></pre>\n<p>在大文件中快速翻动时这些大块的空档有助于区分区块。</p>\n<p>如果你在维护多份以 include 连接的 CSS 的话，在每份文件头加上标题即可，不必这样空行。</p>\n<h2>代码顺序</h2>\n<p>尽量按照特定顺序编写规则，这将确保你充分发挥 CSS 中第一个&nbsp;<em>C</em>&nbsp;的意义：cascade，层叠。</p>\n<p>一份规划良好的 CSS 应当按照如下排列：</p>\n<ol class=\"task-list\">\n<li>Reset&nbsp;万物之根源</li>\n<li>元素类型&nbsp;没有 class 的&nbsp;h1、ul&nbsp;等</li>\n<li>对象以及抽象内容&nbsp;最一般、最基础的设计模式</li>\n<li>子元素&nbsp;由对象延伸出来的所有拓展及其子元素</li>\n<li>修补&nbsp;针对异常状态</li>\n</ol>\n<p>如此一来，当你依次编写 CSS 时，每个区块都可以自动继承在它之前区块的属性。这样就可以减少代码相互抵消的部分，减少某些特殊的问题，组成更理想的 CSS 结构。</p>\n<p>关于这方面的更多信息，强烈推荐 Jonathan Snook 的&nbsp;<a class=\"ext\" href=\"http://smacss.com/\" target=\"_blank\" rel=\"external nofollow noopener\">SMACSS</a>。</p>\n<h2>CSS 样式集分析</h2>\n<pre class=\"language-scss\"><code>[selector]{\n    [property]:[value];\n    [&lt;- Declaration -&gt;]\n}\n \n[选择器]{\n    [属性]:[值];\n    [&lt;- 声明 -&gt;]\n}</code></pre>\n<p>编写 CSS 样式时，我习惯遵守这些规则：</p>\n<ul class=\"task-list\">\n<li>class 名称以连字符（-）连接，除了下文提到的 BEM 命名法；</li>\n<li>缩进 4 空格；</li>\n<li>声明拆分成多行；</li>\n<li>声明以相关性顺序排列，而非字母顺序；</li>\n<li>有前缀的声明适当缩进，从而对齐其值；</li>\n<li>缩进样式集从而反映 DOM；</li>\n<li>保留最后一条声明结尾的分号。</li>\n</ul>\n<p>例如：</p>\n<pre class=\"language-scss\"><code>.widget{\n    padding:10px;\n    border:1px solid #BADA55;\n    background-color:#C0FFEE;\n    -webkit-border-radius:4px;\n       -moz-border-radius:4px;\n            border-radius:4px;\n}\n    .widget-heading{\n        font-size:1.5rem;\n        line-height:1;\n        font-weight:bold;\n        color:#BADA55;\n        margin-right:-10px;\n        margin-left: -10px;\n        padding:0.25em;\n    }</code></pre>\n<p>我们可以发现，.widget-heading&nbsp;是&nbsp;.widget&nbsp;的子元素，因为前者的样式集比后者多缩进了一级。这样通过缩进就可以让开发者在阅读代码时快速获取这样的重要信息。</p>\n<p>我们还可以发现&nbsp;.widget-heading&nbsp;的声明是根据其相关性排列的：.widget-heading&nbsp;是行间元素，所以我们先添加字体相关的样式声明，接下来是其它的。</p>\n<p>以下是一个没有拆分成多行的例子：</p>\n<pre class=\"language-scss\"><code>.t10    { width:10% }\n.t20    { width:20% }\n.t25    { width:25% }       /* 1/4 */\n.t30    { width:30% }\n.t33    { width:33.333% }   /* 1/3 */\n.t40    { width:40% }\n.t50    { width:50% }       /* 1/2 */\n.t60    { width:60% }\n.t66    { width:66.666% }   /* 2/3 */\n.t70    { width:70% }\n.t75    { width:75% }       /* 3/4*/\n.t80    { width:80% }\n.t90    { width:90% }</code></pre>\n<p>在这个例子（来自<a class=\"ext\" href=\"https://github.com/csswizardry/inuit.css/blob/master/inuit.css/partials/base/_tables.scss#L88\" target=\"_blank\" rel=\"external nofollow noopener\">inuit.css&rsquo;s table grid system</a>）中，将 CSS 放在一行内可以使得代码更紧凑。</p>\n<h2>命名规范</h2>\n<p>一般情况下我都是以连字符（-）连接 class 的名字（例如&nbsp;.foo-bar&nbsp;而非.foo_bar&nbsp;或&nbsp;.fooBar），不过在某些特定的时候我会用 BEM（Block, Element, Modifier）命名法。</p>\n<p>BEM 命名法可以使得选择器更规范，更清晰，更具语义。</p>\n<p>该命名法按照如下格式：</p>\n<pre class=\"language-scss\"><code>.block{}\n.block__element{}\n.block--modifier{}</code></pre>\n<p>其中：</p>\n<ul class=\"task-list\">\n<li>.block&nbsp;代表某个基本的抽象元素；</li>\n<li>.block__element&nbsp;代表构成&nbsp;.block&nbsp;的一个子元素；</li>\n<li>.block--modifier&nbsp;代表&nbsp;.block&nbsp;的某个不同状态或版本。</li>\n</ul>\n<p>打个比方：</p>\n<pre class=\"language-scss\"><code>.person{}\n.person--woman{}\n    .person__hand{}\n    .person__hand--left{}\n    .person__hand--right{}</code></pre>\n<p>这个例子中我们描述的基本元素是一个人，然后这个人可能是一个女人。我们还知道人拥有手，这些是人体的一部分，而手也有不同的状态，如同左手与右手。</p>\n<p>这样我们就可以根据亲元素来划定选择器的命名空间并传达该选择器的职能，例如根据这个选择器是一个子元素（__）还是其亲元素的不同状态（--）。</p>\n<p>由此，.page-wrapper&nbsp;是一个独立的选择器。这是一个符合规范的命名，因为它不是其它元素的子元素或其它状态；然而&nbsp;.widget-heading&nbsp;则与其它对象有关联，它应当是&nbsp;.widget&nbsp;的子元素，所以我们应当将其重命名为.widget__heading。</p>\n<p>BEM 命名法虽然不太好看，而且相当冗长，但是它使得我们可以通过名称快速获知元素的功能和元素之间的关系。与此同时，BEM 语法中的重复部分非常有利于 gzip 的压缩算法。</p>\n<p>无论你是否使用 BEM 命名法，你都应当确保 class 命名得当，力保一字不多、一字不少；将元素命名抽象化以提高复用性（例如&nbsp;.ui-list，.media）。子元素的命名则要尽量精准（例如&nbsp;.user-avatar-link）。不用担心 class 名的数量或长度，因为写得好的代码 gzip 也能有效压缩。</p>\n<h3>HTML 中的 class</h3>\n<p>为了确保易读性，在 HTML 标记中用两个空格隔开 class 名，例如：</p>\n<pre class=\"language-markup\"><code>&lt;div class=\"foo--bar  bar__baz\"&gt;</code></pre>\n<p>增加的空格应当可以使得在使用多个 class 时更易阅读与定位。</p>\n<h3>JavaScript 钩子</h3>\n<p>切勿将标记 CSS 样式的 class 用作 JavaScript 钩子。把 JS 行为与样式混在一起将无法对其分别处理。</p>\n<p>如果你要把 JS 和某些标记绑定起来的话，写一个 JS 专用的 class。简单地说就是划定一个前缀&nbsp;.js-&nbsp;的命名空间，例如&nbsp;.js-toggle，.js-drag-and-drop。这意味着我们可以通过 class 同时绑定 JS 和 CSS 而不会因为冲突而引发麻烦。</p>\n<pre class=\"language-markup\"><code>&lt;th class=\"is-sortable  js-is-sortable\"&gt;\n&lt;/th&gt;</code></pre>\n<p>上面的这个标记有两个 class，你可以用其中一个来给这个可排序的表格栏添加样式，用另一个添加排序功能。</p>\n<h3>I18n</h3>\n<p>虽然我（该 CSS Guideline 文档原作者 Harry Roberts）是个英国人，而且我一向拼写&nbsp;<em>colour</em>&nbsp;而非&nbsp;<em>color</em>，但是为了追求统一，我认为在 CSS 中用美式拼法更佳。CSS 以及其它多数语言都是以美式拼法编写，所以如果在&nbsp;.colour-picker{}&nbsp;中写&nbsp;color:red&nbsp;就缺乏统一性。我以前主张同时用两种拼法，例如：</p>\n<pre class=\"language-scss\"><code>.color-picker,\n.colour-picker{\n}</code></pre>\n<p>但是我最近参与了一份规模庞大的 Sass 项目，这个项目中有许多的颜色变量（例如&nbsp;$brand-color，$highlight-color&nbsp;等等），每个变量要维护两种拼法实在辛苦，要查找并替换时也需要两倍的工作量。</p>\n<p>所以为了统一，把所有的 class 与变量都以你参与的项目的惯用拼法命名即可。</p>\n<h2>注释</h2>\n<p>我使用行宽不超过 80 字节的文档块风格注释：</p>\n<pre class=\"language-sass\"><code>/**\n * This is a docBlock style comment\n * \n * This is a longer description of the comment, describing the code in more\n * detail. We limit these lines to a maximum of 80 characters in length.\n * \n * We can have markup in the comments, and are encouraged to do so:\n * \n   &lt;div class=foo&gt;\n       &lt;p&gt;Lorem&lt;/p&gt;\n   &lt;/div&gt;\n * \n * We do not prefix lines of code with an asterisk as to do so would inhibit\n * copy and paste.\n */\n \n \n/**\n * 这是一个文档块（DocBlock）风格的注释。\n *\n * 这里开始是描述更详细、篇幅更长的注释正文。当然，我们要把行宽控制在 80 字节以内。\n *\n * 我们可以在注释中嵌入 HTML 标记，而且这也是个不错的办法：\n *\n    &lt;div class=foo&gt;\n        &lt;p&gt;Lorem&lt;/p&gt;\n    &lt;/div&gt;\n *\n * 如果是注释内嵌的标记的话，在它前面不加星号，以免被复制进去。\n */</code></pre>\n<p>在注释中应当尽量详细描述代码，因为对你来说清晰易懂的内容对其他人可能并非如此。每写一部分代码就要专门写注释以详解。</p>\n<h3>注释的拓展用法</h3>\n<p>注释有许多很高级的用法，例如：</p>\n<ul class=\"task-list\">\n<li>准修饰选择器（Quasi-qualified selectors）</li>\n<li>代码标签</li>\n<li>继承标记</li>\n</ul>\n<h4>准修饰选择器（Quasi-qualified selectors）</h4>\n<p>你应当避免过分修饰选择器，例如如果你能写&nbsp;.nav{}&nbsp;就尽量不要写ul.nav{}。过分修饰选择器将影响性能，影响 class 复用性，增加选择器私有度。这些都是你应当竭力避免的。</p>\n<p>不过有时你可能希望告诉其他开发者 class 的使用范围。以&nbsp;.product-page为例，这个 class 看起来像是一个根容器，可能是&nbsp;html&nbsp;或者&nbsp;body&nbsp;元素，但是仅凭&nbsp;.product-page&nbsp;则无法判断。</p>\n<p>我们可以在选择器前加上准修饰（即将前面的类型选择器注释掉）来描述我们规划的 class 作用范围：</p>\n<pre class=\"language-markup\"><code>/*html*/.product-page{}</code></pre>\n<p>这样我们就能准确获知该 class 的作用范围而不会影响复用性。</p>\n<p>其它例子如：</p>\n<pre class=\"language-markup\"><code>/*ol*/.breadcrumb{}\n/*p*/.intro{}\n/*ul*/.image-thumbs{}</code></pre>\n<p>这样我们就能在不影响代码私有度的前提下获知 class 作用范围。</p>\n<h4>代码标签</h4>\n<p>如果你写了一组新样式的话，可以在它上面加上标签，例如：</p>\n<pre class=\"language-markup\"><code>/**\n * ^navigation ^lists\n */\n.nav{}\n \n/**\n * ^grids ^lists ^tables\n */\n.matrix{}</code></pre>\n<p>这些标签可以使得其他开发者快速找到相关代码。如果一个开发者需要查找和列表相关的部分，他只要搜索&nbsp;^lists&nbsp;就能快速定位到&nbsp;.nav，.matrix&nbsp;以及其它相关部分。</p>\n<h4>继承标记</h4>\n<p>将面向对象的思路用于 CSS 编写的话，你经常能找到两部分 CSS 密切相关（其一为基础，其一为拓展）却分列两处。我们可以用继承标记来在原元素和继承元素之间建立紧密联系。这些在注释中的写法如下：</p>\n<p>在元素的基本样式中：</p>\n<pre class=\"language-scss\"><code>/**\n * Extend `.foo` in theme.css\n */\n .foo{}</code></pre>\n<p>在元素的拓展样式中：</p>\n<pre class=\"language-scss\"><code>/**\n * Extends `.foo` in base.css\n */\n .bar{}</code></pre>\n<p>这样一来我们就能在两块相隔很远的代码间建立紧密联系。</p>\n<h2>编写 CSS</h2>\n<p>之前的章节主要探讨如何规划 CSS，这些都是易于量化的规则。本章将探讨更理论化的东西，也将探讨我们的态度与方法。</p>\n<h2>编写新组件</h2>\n<p>编写新组件时，要在着手处理 CSS&nbsp;之前写好 HTML 部分。这可以令你准确判断哪些 CSS 属性可以继承，避免重复浪费。</p>\n<p>先写标记的话，你就可以关注数据、内容与语义，在这之后再添加需要的 class 和 CSS 样式。</p>\n<h2>面向对象 CSS</h2>\n<p>我以面向对象 CSS 的方式写代码。我把组件分成结构（对象）与外观（拓展）。正如以下分析（注意此处并非示例）：</p>\n<pre class=\"language-scss\"><code>.room{}\n \n.room--kitchen{}\n.room--bedroom{}\n.room--bathroom{}</code></pre>\n<p>我们在屋子里有许多房间，它们都有共同的部分：地板、天花板、墙壁和门。这些共享的部分我们可以放到一个抽象的&nbsp;.room{}&nbsp;class 中。不过我们还有其它与众不同的房间：一个厨房可能有地砖，卧室可能有地毯，洗手间可能没有窗户但是卧室会有，每个房间的墙壁颜色也许也会不一样。面向对 象 CSS 的思路使得我们把相同部分抽象出来组成结构部分，然后用更具体的 class 来拓展这些特征并添加特殊的处理方法。</p>\n<p>所以比起编写大量各自不同的模块，应当努力找出这些模块中重复的设计模式并将其抽象出来，写成一个可以复用的 class，将其用作基础然后编写其它拓展模块的特殊情形。</p>\n<p>当你要编写一个新组件时，将其拆分成结构和外观。编写结构部分时用最通用 class 以保证复用性，编写外观时用更具体的 class 来添加设计方法。</p>\n<h2>布局</h2>\n<p>所有组件都不要声明宽度，而由其亲元素或格栅系统来决定。</p>\n<p>坚决不要声明高度。高度应当仅仅用于尺寸已经固定的东西，例如图片和 CSS Sprite。在&nbsp;p，ul，div&nbsp;等元素上不应当声明高度。如果需要的话可以使用更加灵活的&nbsp;line-height。</p>\n<p>格栅系统应当当作书架来理解。是它们容纳内容，而不是把它们本身当成内容装起来，正如你先搭起书架再把东西放进去。比起声明它们的尺寸，把格栅系统和元素的其它属性分来开处理更有助于布局，也使得我们的前端工作更高效。</p>\n<p>你在格栅系统上不应当添加任何样式，它们仅仅是为布局而用。在格栅系统内部再添加样式。在格栅系统中任何情况下都不要添加盒模型相关属性。</p>\n<h2>UI 尺寸</h2>\n<p>我用很多方法设定 UI 尺寸，包括百分比，px，em，rem&nbsp;以及干脆什么都不用。</p>\n<p>理想情况下，格栅系统应当用百分比设定。如上所述，因为我用格栅系统来固定栏宽和页宽，所以我可以不用理会元素的尺寸。</p>\n<p>我用 rem 定义字号，并且辅以 px 以兼容旧浏览器。这可以兼具 em 和 px 的优势。下面是一个非常漂亮的 Sass Mixin，假设你在别处声明了基本字号（base-font-size）的话，用它就可以生成 rem 以及兼容旧浏览器的 px。</p>\n<pre class=\"language-scss\"><code>@mixin font-size($font-size){\n    font-size:$font-size +px;\n    font-size:$font-size / $base-font-size +rem;\n}</code></pre>\n<p>我只在已经固定尺寸的元素上使用 px，包括图片以及尺寸已经用 px 固定的 CSS Sprite。</p>\n<h3>字号</h3>\n<p>我会定义一些与格栅系统原理类似的 class 来声明字号。这些 class 可以用于双重标题分级，关于这点请阅读&nbsp;<a class=\"ext\" href=\"http://csswizardry.com/2012/02/pragmatic-practical-font-sizing-in-css\" target=\"_blank\" rel=\"external nofollow noopener\">Pragmatic, practical font-sizing in CSS</a>。</p>\n<h2>简写</h2>\n<p>CSS 简写应当谨慎使用。</p>\n<p>编写像&nbsp;background: red;&nbsp;这样的属性的确很省事，但是你这么写的意思其实是同时声明&nbsp;background-image: none; background-position: top left; background-repeat: repeat; background-color: red;。虽然大多数时候这样不会出什么问题，但是哪怕只出一次问题就值得考虑要不要放弃简写了。这里应当改为&nbsp;background-color: red;。</p>\n<p>类似的，像&nbsp;margin: 0;&nbsp;这样的声明的确简洁清爽，但是还是应当尽量写清楚。如果你只是想修改底边边距，就要具体一些，写成&nbsp;margin-bottom: 0;。</p>\n<p>与此同时你需要声明的属性也要写清楚，不要因为简写而波及其它属性。例如如果你只想改掉底部的&nbsp;margin，那就不要用会把其它边距也清零的&nbsp;margin: 0。</p>\n<p>简写虽然好，但也很容易滥用。</p>\n<h2>ID</h2>\n<p>在我们开始处理选择器之前，牢记这句话：</p>\n<p>在 CSS 里坚决不要用 ID。</p>\n<p>在 HTML 里 ID 可以用于 JS 以及锚点定位，但是在 CSS 里只要用 class，一个 ID 也不要用。</p>\n<p>Class 的优势在于复用性，而且私有度也并不高。在项目中私有度非常容易导致问题，所以将其降低就尤为重要。ID 的私有度是 class 的&nbsp;255&nbsp;倍，所以在 CSS 中坚决不要使用。</p>\n<h2>选择器</h2>\n<p>务必保持选择器简短高效。</p>\n<p>通过页面元素位置而定位的选择器并不理想。例如&nbsp;.sidebar h3 span{}&nbsp;这样的选择器就是定位过于依赖相对位置，如果把 span 移到 h3 和 sidebar 外面时就很难保持其样式。</p>\n<p>结构复杂的选择器将会影响性能。选择器结构越复杂（如&nbsp;.sidebar h3 span为三层，.content ul p a&nbsp;是四层），浏览器的开销就越大。</p>\n<p>尽量使得样式不依赖于其定位，尽量保持选择器简洁清晰。</p>\n<p>作为一个整体，选择器应当尽量简短（例如只有一层结构），但是 class 名则不应当过于简略，例如&nbsp;.user-avatar&nbsp;就远比&nbsp;.usr-avt&nbsp;好。</p>\n<p>牢记：class 无所谓是否语义化；应当关注它们是否合理。不要强调 class 名要符合语义，而要注重使用合理且不会过时的名称。</p>\n<h3>过度修饰的选择器</h3>\n<p>由前文所述，过度修饰的选择器并不理想。</p>\n<p>过度修饰的选择器是指像&nbsp;div.promo&nbsp;这样的。很可能你只用&nbsp;.promo&nbsp;也能得到相同的效果。当然你可能偶尔会需要用元素类型来修饰 class（例如你写了一个&nbsp;.error&nbsp;而且想让它在不同的元素类型中显示效果不一样，例如&nbsp;.error { color: red; }&nbsp;div.error { padding: 14px; }），但是大多数时候还是应当尽量避免。</p>\n<p>再举一个修饰过度的选择器例子，ul.nav li a{}。如前文所说，我们马上就可以删掉&nbsp;ul&nbsp;因为我们知道&nbsp;.nav&nbsp;是个列表，然后我们就可以发现&nbsp;a&nbsp;一定在&nbsp;li&nbsp;中，所以我们就能将这个选择器改写成&nbsp;.nav a{}。</p>\n<h3>选择器性能</h3>\n<p>虽然浏览器性能日渐提升，渲染 CSS 速度越来越快，但是你还是应当关注效率。使用简短、没有嵌套的选择器，不使用全局选择器（* {}）作为核心选择器，避免使用日渐复杂的 CSS3 新选择器可以避免这样的问题。</p>\n<p>译注，核心选择器：浏览器解析选择器为从右向左的顺序，最右端的元素是样式生效的元素，是为核心选择器。</p>\n<h2>使用 CSS 选择器的目的</h2>\n<p>比起努力运用选择器定位到某元素，更好的办法是给你想要添加样式的元素直接添加一个 class。我们以&nbsp;.header ul {}&nbsp;这样一个选择器为例。</p>\n<p>假定这个&nbsp;ul&nbsp;就是这个网站的全站导航，它位于 header 中，而且目前为止是 header 中唯一的&nbsp;ul&nbsp;元素。.header ul{}&nbsp;的确可以生效，但是这样并不是好方法，它很容易过时，而且非常晦涩。如果我们在 header 中再添加一个&nbsp;ul&nbsp;的话，它就会套用我们给这个导航部分写的样式，哪怕我们设想的不是这个效果。这意味着我们要么要重构许多代码，要么给后面的&nbsp;ul&nbsp;新写许多样式来抵消之前的影响。</p>\n<p>你的选择器必须符合你要给这个元素添加样式的原因。思考一下，「我定位到这个元素，是因为它是&nbsp;.header&nbsp;下的&nbsp;ul，还是因为它是我的网站导航？」这将决定你应当如何使用选择器。</p>\n<p>确保你的核心选择器不是类型选择器，也不是高级对象或抽象选择器。例如你在我们的 CSS 中肯定找不到诸如&nbsp;.sidebar ul {}&nbsp;或者&nbsp;.footer .media {}&nbsp;这样的选择器。</p>\n<p>表达清晰：直接找到你要添加样式的元素，而非其亲元素。不要想当然地认为 HTML 不会改变。用 CSS 直接命中你需要的元素，而非投机取巧。</p>\n<p>完整内容请参考我的文章&nbsp;<a class=\"ext\" href=\"http://csswizardry.com/2012/07/shoot-to-kill-css-selector-intent/\" target=\"_blank\" rel=\"external nofollow noopener\">Shoot to kill; CSS selector intent</a></p>\n<h2>!important</h2>\n<p>只在起辅助作用的 class 上用&nbsp;!important。用&nbsp;!important&nbsp;提升优先级也可以，例如如果你要让某条规则一直生效的话，可以用&nbsp;.error { color:red!important; }。</p>\n<p>避免主动使用&nbsp;!important。例如 CSS 写得很复杂时不要用它来取巧，要好好整理并重构之前的部分，保持选择器简短并且避免用 ID 将效果拔群。</p>\n<h2>魔数与绝对定位</h2>\n<p>魔数（Magic Number）是指那些「凑巧有效果」的数字，使用魔数非常不好，因为它们只是治标不治本而且缺乏拓展性。</p>\n<p>例如使用&nbsp;.dropdown-nav li:hover ul { top: 37px; }&nbsp;把下拉菜单移动下来远非良策，因为这里的 37px 就是个魔数。37px 会生效的原因是因为这时.dropbox-nav&nbsp;碰巧高 37px 而已。</p>\n<p>这时你应该用&nbsp;.dropdown-nav li:hover ul { top: 100%; }，也即无论.dropbox-down&nbsp;多高，这个下拉菜单都会往下移动 100%。</p>\n<p>每当你要在代码中放入数字的时候，请三思而行。如果你能用一个关键字（例如&nbsp;top: 100%&nbsp;意即「从上面拉到最下面」）替换之，或者有更好的解决方法的话，就尽量避免直接出现数字。</p>\n<p>你在 CSS 中留下的每一个数字，都是你许下而不愿遵守的承诺。</p>\n<h2>条件判断</h2>\n<p>专门为 IE 写的样式基本上都是可以避免的，唯一需要为 IE 专门处理的是为了处理 IE 不支持的内容（例如 PNG）。</p>\n<p>简而言之，如果你重构 CSS 的话，所有的布局和盒模型都不用额外兼容 IE。也就是说你基本上不用&nbsp;&lt;!--[if IE 7]&gt; element{ margin-left:-9px; } &lt; ![endif]--&gt;&nbsp;或者类似的兼容 IE 的写法。</p>\n<h2>Debugging</h2>\n<p>如果你要解决 CSS 问题的话，先把旧代码拿掉再写新的。如果旧的 CSS 中有问题的话，写新代码是解决不了的。</p>\n<p>把 CSS 代码和 HTML 部分删掉，直到没有 BUG 为止，然后你就知道问题出在哪里了。</p>\n<p>有时候写上一个&nbsp;overflow: hidden&nbsp;或者其它能把问题藏起来的代码的确效果立竿见影，但是 overflow 方面可能根本就没问题。所以要治本，而不是单纯治标。</p>\n<h2>CSS 预处理器</h2>\n<p>我用 Sass。使用时应当灵活运用。用 Sass 可以令你的 CSS 更强大，但是不要嵌套得太复杂。在 Vanilla CSS 中，只在必要的地方用嵌套即可，例如：</p>\n<pre class=\"language-scss\"><code>.header{}\n.header .site-nav{}\n.header .site-nav li{}\n.header .site-nav li a{}</code></pre>\n<p>这样的写法在普通 CSS 里完全用不到。以下为不好的&nbsp;Sass 写法：</p>\n<pre class=\"language-scss\"><code>.header{\n    .site-nav{\n        li{\n            a{}\n        }\n    }\n}</code></pre>\n<p>如果你用 Sass 的话，尽量这么写：</p>\n<pre class=\"language-scss\"><code>.header{}\n.site-nav{\n    li{}\n    a{}\n}</code></pre>','2019-09-18 07:22:38','2019-09-18 07:22:38'),(33,33,'把你的树莓派打造成一个NAS','https://linux.cn/article-1745-1.html','你有闲置的移动硬盘和树莓派吗？你可以用这些来打造一个廉价而且低能耗的NAS。最后的效果肯定比不上售价500美刀的NAS，比如Synology DiskStation出品的那些。但可以搭建出一个低能耗的网络存储平台——而且特别适用于已经厌倦了国家安全局的数据监控的那些人，你可以把数据藏在这个“小阁楼”里。','<p class=\"article_img\">你有闲置的移动硬盘和树莓派吗？你可以用这些来打造一个廉价而且低能耗的NAS。最后的效果肯定比不上售价500美刀的NAS，比如Synology DiskStation出品的那些。但可以搭建出一个低能耗的网络存储平台&mdash;&mdash;而且特别适用于已经厌倦了国家安全局的数据监控的那些人，你可以把数据藏在这个&ldquo;小阁楼&rdquo;里。<br /><img class=\"aligncenter size-full wp-image-2773\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201308/06/2003487lb1l9bgtl71gya1.jpg\" alt=\"featured-pi-nas\" width=\"300\" height=\"300\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>featured-pi-nas</em></p>\n<p class=\"article_img\">你需要一个树莓派，和一两个闲置着的移动硬盘。体积较小的2.5硬盘可以由USB接口直接供电，但是我们需要一个带有供电功能的USB分线器，因为树莓派的USB接口提供的电是不足以给移动硬盘供电的。除此之外你也可以用thumbdrive，甚至是一张SD卡。事实上我现在在用的就是一个USB口的移动硬盘和一个thumbdrive搭建的，操作流程都是一样的。<br /><img class=\"aligncenter size-full wp-image-2772\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201308/06/200350nz9n6oinf1i3m9ts.jpg\" alt=\"ubs-drives\" width=\"590\" height=\"384\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>ubs-drives</em></p>\n<p>只用一个硬盘，也可以搭建分享文件的网络存储器，但是用两个硬盘，就可以设置数据备份，以防有一个硬盘坏掉。</p>\n<h2>准备硬盘</h2>\n<p>最初的步骤是在台式机上格式化硬盘。这是为了方便，如果出了问题，我们可以把硬盘从NAS上拔下来，还可以在一台PC上读上面的数据。</p>\n<p>可以在树莓派上格式化，但是会花上几个小时，从台式机上格式化会快很多。现在就去做吧。</p>\n<p>设置SSH，开启root用户，首先为root用户设置密码：</p>\n<pre class=\"language-bash\"><code>sudo -i\npasswd root</code></pre>\n<p>(输入你的密码)</p>\n<p class=\"article_img\">然后在命令行下面运行raspi-config脚本，可以用sudo命令，也可以注销当前用户，然后以root用户的身份登陆。在高级选项菜单中，开启SSH。<br /><img class=\"aligncenter size-full wp-image-2771\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201308/06/200351915y6lkxb81lb9ex.jpg\" alt=\"advanced-options\" width=\"562\" height=\"338\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>advanced-options</em></p>\n<p>重启后，你应该可以从联网的另一台机器登陆（如果在windows上，可以使用Putty）：<br />SSH root@[IP地址]</p>\n<p>登陆之后，搞清楚插上去的硬盘在/dev下面的编号是什么。下文假设使用两个硬盘，创建数据备份。输入</p>\n<pre class=\"language-bash\"><code>fdisk -l</code></pre>\n<p class=\"article_img\">会显示出已经挂载的存储设备。你应该看到类似于这样的画面：<br /><img class=\"aligncenter size-full wp-image-2770\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201308/06/200353cpxwfwdeeefe1dee.jpg\" alt=\"fdsik\" width=\"553\" height=\"431\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>fdsik</em></p>\n<p>/dev/mmc是树莓派系统的分区，mmc指的是SD卡。/dev/sda1和/dev/sdb1和SD卡没有关系，这些是你插上去的USB硬盘（本意是SCSI驱动器，但是现在用来指任何SATA口的或其他存储器）</p>\n<p>安装ntfs-3g模块，于是我们就能读写NTFS格式的硬盘了。<br />apt-get install ntfs-3g</p>\n<p>然后创建一个目录，以这个目录作为挂载点挂载硬盘。为简单起见，下文用1和2来指代。</p>\n<pre class=\"language-bash\"><code>mkdir /media/1\nmkdir /media/2\nmount -t auto /dev/sda1 /media/1\nmount -t auto /dev/sdb1 /media/2\nmkdir /media/1/shares\nmkdir /media/2/shares</code></pre>\n<h2>Samba</h2>\n<p>下一步我们来设置Samba。Samba是Windows使用的网络文件共享协议（事实上最新的OSX Mavericks也支持）</p>\n<pre class=\"language-bash\"><code>apt-get install samba\napt-get install samba-common-bin\ncp /etc/samba/smb.conf /etc/samba/smb.conf.bak\nnano /etc/samba/smb.conf</code></pre>\n<p>如果你不熟悉这类配置文件，行首的＃表示这一行是注释，于是这一行的配置也就不会生效。要开启一项功能，可以自己添加一行，也可以把某一行前面的注释符号去掉，让它生效。</p>\n<p>我们先来启动用户安全；按下CTRL-W然后输入&rdquo;security&rdquo;，来找到相关的选项。去掉这一行前面的注释符号：<br />security = user</p>\n<p>然后，移动到文本末尾（或者按住CTRL V直到移动到了末尾），添加网络共享，数目取决于你自己的需求。使用这种格式：</p>\n<pre class=\"language-bash\"><code>[test] comment = Test share\npath = /media/1/shares\nvalid users = @users\nforce group = users\ncreate mask = 0660\ndirectory mask = 0771\nread only = no</code></pre>\n<p>只有第一块硬盘的配置&mdash;&mdash;之后我们将用第二块硬盘和第一块同步，以进行备份。</p>\n<p class=\"article_img\">完成编辑之后，按下CTRL X然后按y来退出。<br /><img class=\"aligncenter size-full wp-image-2769\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201308/06/2003553tpq366d6m1zt6ot.jpg\" alt=\"samba-config\" width=\"567\" height=\"509\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>samba-config</em></p>\n<p>然后用下面的命令重启Samba。</p>\n<pre class=\"language-bash\"><code>service samba restart</code></pre>\n<p>现在给你的树莓派添加一个用户，假设你不想用同一个用户来访问（下文的&rdquo;jamie&rdquo;是用户名）</p>\n<pre class=\"language-bash\"><code>useradd jamie -m -G users</code></pre>\n<p>输入下面的命令给新用户设置密码，完成后确认。</p>\n<pre class=\"language-bash\"><code>passwd jamie</code></pre>\n<p>然后我们把这个用户加入到Samba中。你需要两次确认你的密码。</p>\n<pre class=\"language-bash\"><code>smbpasswd -a jamie</code></pre>\n<p class=\"article_img\">然后就去测试网络存储功能吧，应该可以在其他机器上看到了（Windows或Mac），而且你应该可以往上面写入文件。<br /><img class=\"aligncenter size-full wp-image-2768\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201308/06/200357vrstccresc2lkrp2.jpg\" alt=\"file-on-nas\" width=\"590\" height=\"432\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>file-on-nas</em></p>\n<p>现在还剩一个问题，你重启树莓派，驱动器的挂载就会失效。为了解决这个问题，我们需要安装autofs。</p>\n<pre class=\"language-bash\"><code>apt-get install autofs\nnano /etc/auto.master</code></pre>\n<p><br />在+auto.master下面加入一行：</p>\n<pre class=\"language-bash\"><code>/media/ /etc/auto.ext-usb &ndash;timeout=10,defaults,user,exec,uid=1000</code></pre>\n<p>现在就可以安全重启，不会破坏配置了。</p>\n<h2>数据备份</h2>\n<p>如果你安装了两个硬盘，我们现在就可以用一个脚本来同步数据，如果一块硬盘坏了，还有一份备份的。我们用rsync来做备份。</p>\n<pre class=\"language-bash\"><code>apt-get install rsync\ncrontab -e</code></pre>\n<p>linux下面的crontab是用来自动运行某个任务的一个软件。我曾经在《<a class=\"external ext\" href=\"http://www.makeuseof.com/tag/automate-wordpress-backup-simple-shell-scripting-cron/\" target=\"_blank\" rel=\"external nofollow noopener\">自动备份你的网站</a>》中简要提到过。加上这一行：</p>\n<pre class=\"language-bash\"><code>30 5 * * * rsync -av &ndash;delete /media/1/shares /media/2/shares/</code></pre>\n<p>数字的格式是这样子的：<br />分钟｜小时｜一个月中哪一天｜月份｜一个星期中哪一天</p>\n<p>所以我们加进去的那一行，rsync命令会在每天的早晨5点30分运行（＊通配符表示&ldquo;所有&rdquo;，所以会在&ldquo;每个月的每一天&rdquo;运行）</p>\n<p>如果你想立刻进行一次备份，只要粘贴这个rsync的命令：</p>\n<pre class=\"language-bash\"><code>rsync -av &ndash;delete /media/1/shares /media/2/shares/</code></pre>\n<p>取决于共享文件夹里放的东西，耗费的时间可能只要几秒钟，也可能会长一些，在完成之后会给你一个报告。rsync最棒的地方在于它会记录哪些文件更新了，哪些文件添加近来或是应该被删除。你可以再试一遍那个命令，应该立刻就会完成的，因为rsync知道没有文件发生了变动。</p>\n<p>教程到这里就结束了&mdash;&mdash;现在你搭建起了自己的NAS，虽然细节上有待改进，但是现在就可以用起来了。虽然没有市面上出售的NAS那些华丽的特性，但是它也能漂亮地完成任务，而且耗电会少很多。</p>\n<p>有问题请在评论区提出，我会尽力帮忙的，但是请确定你在使用最新的树莓派系统镜像。</p>\n<p>&nbsp;</p>\n<hr />\n<p>原文链接：&nbsp;<a class=\"external ext\" href=\"http://www.makeuseof.com/tag/turn-your-raspberry-pi-into-a-nas-box/\" target=\"_blank\" rel=\"external nofollow noopener\">James Bruce</a>&nbsp;翻译：&nbsp;<a class=\"external ext\" href=\"http://www.geekfan.net/\" target=\"_blank\" rel=\"external nofollow noopener\">极客范&nbsp;</a>-&nbsp;<a class=\"external ext\" href=\"http://www.geekfan.net/author/kongchuijin/\" target=\"_blank\" rel=\"external nofollow noopener\">孔垂瑾</a><br /><br />译文链接：&nbsp;<a class=\"external ext\" href=\"http://www.geekfan.net/2767/\" target=\"_blank\" rel=\"external nofollow noopener\">http://www.geekfan.net/2767/</a></p>','2019-09-18 07:33:52','2019-09-18 07:33:52'),(34,34,'教你用树莓派打造一个家庭影院','https://linux.cn/article-1746-1.html','在四周的时间里，我用各种各样的方式折腾树莓派，例如用来浏览网页，用来跑日常的一些计算任务，以及折腾网络设置（以太网和USB无线网）。但是折腾树莓派是不是会有个穷尽？还是说我会一直对折腾它感兴趣，把它一直放在架子上，想出当一个有用的点子的时候就打开它？\n\n在MakeUseOf我们已经一同探究了树莓派各式各样的用法，但是还有一种非常流行的用法，就是利用树莓派做一个流媒体或家庭影院系统。\n\n当我在写这篇文章的时候，传统的报刊杂志正在说，仅售22英镑的智能电视即将来临，树莓派当然可以把普通的纯平LCD或等离子电视变成智能电视，感谢有人移植XBMC这个流行的软件，为我们带来了Raspbmc。','<p>在四周的时间里，我用各种各样的方式折腾树莓派，例如用来浏览网页，用来跑日常的一些计算任务，以及折腾网络设置（以太网和USB无线网）。但是折腾树莓派是不是会有个穷尽？还是说我会一直对折腾它感兴趣，把它一直放在架子上，想出当一个有用的点子的时候就打开它？</p>\n<p>在MakeUseOf我们已经一同探究了树莓派各式各样的用法，但是还有一种非常流行的用法，就是利用树莓派做一个流媒体或家庭影院系统。</p>\n<p>当我在写这篇文章的时候，传统的报刊杂志正在说，仅售22英镑的智能电视即将来临，树莓派当然可以把普通的纯平LCD或等离子电视变成智能电视，感谢有人移植XBMC这个流行的软件，为我们带来了Raspbmc。</p>\n<h2>准备Raspbmc</h2>\n<p>你应该已经遵照<a class=\"external ext\" href=\"http://www.makeuseof.com/tag/started-raspberry-pi/\" target=\"_blank\" rel=\"external nofollow noopener\">之前的一篇文章</a>，为树莓派安装好了Debian，而且已经能正常运行了。</p>\n<p>为了安装Raspbmc，需要准备几件东西。第一件是一张新的SD卡&mdash;&mdash;之前的那张要用在普通环境下；SD卡事实上就是树莓派的硬盘，所以如果过度写入，就只能重新刷镜像才能修复了，大概就等同于重装系统。没必要用一张新的SD卡，但是推荐用新的。一张microSD再加上一个SD卡套也是可以的。</p>\n<p class=\"article_img\">无论你选择哪种方案，卡都要先格式化，于是在进行下一步前，把卡插到读卡器中，连接到你的PC上。<br /><img class=\"aligncenter size-full wp-image-2852\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201308/06/200606rts7i45qqieyytwq.png\" alt=\"muo-raspbmc2\" width=\"480\" height=\"475\" /><br />然后，下载<a class=\"external ext\" href=\"http://download.raspbmc.com/downloads/bin/installers/raspbmc-win32.zip\" target=\"_blank\" rel=\"external nofollow noopener\">Raspbmc安装器</a>。下载完成后，解压缩并运行installer.exe文件。</p>\n<p class=\"article_img_desc\"><em>muo-raspbmc2</em></p>\n<p class=\"article_img\">你的SD卡应该会在安装窗口中显示出来，选中SD卡那一项前面的小方格，然后点击安装，软件就会把Raspbmc安装到SD卡上面。当&ldquo;恭喜&rdquo;信息出现的时候，就可以把卡拔下来，插到你的树莓派上面去了。<br /><img class=\"aligncenter size-full wp-image-2851\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201308/06/200607i8wqkp5g6z9pgixx.png\" alt=\"muo-raspbmc1\" width=\"414\" height=\"204\" /></p>\n<p class=\"article_img_desc\"><em>muo-raspbmc1</em></p>\n<h2>设置Raspbmc</h2>\n<p class=\"article_img\">把安装有Raspbmc的SD装到树莓派里，打开设备，确保设备和外网是连通的，因为在安装过程中，还有一部分数据要从网上下载，所以说连网是必须的。<br /><img class=\"aligncenter size-full wp-image-2850\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201308/06/200609wanw8ncj3nhphcqn.jpg\" alt=\"muo-raspbmc3\" width=\"563\" height=\"181\" /><br />在此过程中你什么都不用做&mdash;&mdash;除非网络连接断开了，网线传输出错了或者SD卡坏了&mdash;&mdash;所以现在可以坐下来，在等待的时候喝杯咖啡（Raspbmc的安装说明上就是这么说的！）。</p>\n<p class=\"article_img_desc\"><em>muo-raspbmc3</em></p>\n<h2>你可以用树莓派上的XBMC干什么</h2>\n<p class=\"article_img\">Raspbmc是流行的媒体中心软件XBMC移植到树莓派上的产物。所以用户界面喝功能大体上是相同的。<br /><img class=\"aligncenter size-full wp-image-2849\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201308/06/200613akkczbcq6k5j326q.jpg\" alt=\"muo-raspbmc4\" width=\"555\" height=\"339\" /><br />图片，视频以及音乐都有各自的菜单，有小软件可以收到三个地方的天气情况。媒体源需要手动添加，可以用插件管理器安装插件，有很多插件可供选择。<br /><img class=\"aligncenter size-full wp-image-2848\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201308/06/200615vd0arhr66hs8aeoi.jpg\" alt=\"muo-raspbmc5\" width=\"512\" height=\"321\" /><br />XBMC/Raspbmc最好的地方是使用简单，而且界面清爽，视觉效果也不错。</p>\n<p class=\"article_img_desc\"><em>muo-raspbmc4</em></p>\n<p>更多Raspbmc的使用说明，请前往<a class=\"external ext\" href=\"http://wiki.xbmc.org/\" target=\"_blank\" rel=\"external nofollow noopener\">XBMC wiki</a>。</p>\n<h2>改进Raspbmc</h2>\n<p>在树莓派上搭建这种媒体中心是相对简单的事情，不用再去进一步折腾，就可以连接一个媒体，享受你的（不那么繁重的）劳动成果。</p>\n<p>但是这个系统并不完美，它不支持某些文件的编码格式。MPEG-2和VC-1的解码器必须花钱买。幸运的是这些解码器相对来说不贵，可以在<a class=\"external ext\" href=\"http://www.raspberrypi.org/archives/1839\" target=\"_blank\" rel=\"external nofollow noopener\">树莓派的网站</a>找到。</p>\n<p>就算不去做这些改进，你的树莓派也已经是一个便携式家庭影院了。</p>\n<p>&nbsp;</p>\n<hr />\n<p>原文链接：&nbsp;<a class=\"external ext\" href=\"http://www.makeuseof.com/tag/raspberry-pi-home-theater-system/\" target=\"_blank\" rel=\"external nofollow noopener\">Christian Cawley</a>&nbsp;翻译：&nbsp;<a class=\"external ext\" href=\"http://www.geekfan.net/\" target=\"_blank\" rel=\"external nofollow noopener\">极客范&nbsp;</a>-&nbsp;<a class=\"external ext\" href=\"http://www.geekfan.net/author/kongchuijin/\" target=\"_blank\" rel=\"external nofollow noopener\">孔垂瑾</a><br /><br />译文链接：&nbsp;<a class=\"external ext\" href=\"http://www.geekfan.net/2847/\" target=\"_blank\" rel=\"external nofollow noopener\">http://www.geekfan.net/2847/</a></p>','2019-09-18 07:44:00','2019-09-18 07:44:00'),(35,35,'新OpenSUSE的树莓派镜像','https://linux.cn/article-1980-1.html','大家好！请注意，所有的openSUSE的fans们都应该读读这篇重要的文章。你有树莓派吗？你想试试openSUSE吗？你对树莓派和openSUSE很狂热吗？想不想看看它们在一起？真让人激动，ARM版的openSUSE针对树莓派平台发布了一个新的基于ARM v6的安装镜像。这个新的openSUSE镜像是内核3.6版本，带有轻量级的X11/icewm(ice 窗口管理器)，压缩后仅有82MB。\n\n不用谢我，应该谢Bernhard Wiedeman。如此酷的penSUSE镜像是他使用一个openSUSE的替代镜像自动构建的。还有，你知道它最有趣的地方是什么？Bernhard Wiedeman在一个早上只用3个小时就创建建立了它，真强啊!','<p class=\"p1 article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/09/9b482e2487f94b120e45d557c3fdfa4b.png-water\" alt=\"\" width=\"640\" height=\"193\" /></p>\n<p class=\"p1\">大家好！请注意，所有的openSUSE的fans们都应该读读这篇重要的文章。你有树莓派吗？你想试试openSUSE吗？你对树莓派和openSUSE很狂热吗？想不想看看它们在一起？真让人激动，ARM版的openSUSE针对树莓派平台发布了一个新的基于ARM v6的<a class=\"external ext\" href=\"http://www.zq1.de/~bernhard/linux/opensuse/raspberrypi-opensuse-20130907.img.xz\" target=\"_blank\" rel=\"external nofollow noopener\"><span class=\"s1\">安装镜像</span></a>。这个新的openSUSE镜像是内核3.6版本，带有轻量级的X11/icewm(ice 窗口管理器)，压缩后仅有82MB。</p>\n<p class=\"p1\">不用谢我，应该谢Bernhard Wiedeman。如此酷的penSUSE镜像是他使用一个openSUSE的替代镜像自动构建的。还有，你知道它最有趣的地方是什么？Bernhard Wiedeman在一个早上只用3个小时就创建建立了它，真强啊!</p>\n<p class=\"p1\">如果你对这个Bernhard用来构建基于ARM v6的树莓派镜像写的自动化脚本感兴趣，你可以在<a class=\"external ext\" href=\"https://build.opensuse.org/package/show/devel:ARM:Factory:Contrib:RaspberryPi/altimagebuild\" target=\"_blank\" rel=\"external nofollow noopener\"><span class=\"s1\">这里</span></a>找到。这个脚本让每个人都有机会简单的构建自己的镜像，然后分享给全世界其它的openSUSE极客们。Bernhard Wiedeman为我们写了一篇在3分钟内从头构建一个镜像的博客。是的，3分钟！并且每件事都做的尽善尽美。Bernhard Wiedeman的树莓派在55秒内启动成功。你的呢？多少时间完成启动？你能在评论中分享给我们吗？我们会非常开心的听到来自其它用户的体验。</p>\n<p class=\"p1\">当然，没有什么事情是完美的，剩余的尚未解决的问题还在解决中.下面已经列出了这些剩余的问题。</p>\n<ul class=\"ul1\">\n<li class=\"li2\">安装文件key初始化不可靠</li>\n<li class=\"li2\">构建脚本没有出错处理</li>\n</ul>\n<p class=\"p1\">这个新的image相对于之前的image有什么优势?</p>\n<ul class=\"ul1\">\n<li class=\"li2\">很容的改变镜像大小，因为root分区放到了最后</li>\n<li class=\"li2\">压缩后镜像文件非常小</li>\n<li class=\"li2\">可重复构建镜像，因此更容易定制</li>\n<li class=\"li2\">ARM v6带有浮点计算支持，因此更快</li>\n<li class=\"li2\">有超过5200个来自openSUSE:Factory:ARM的成功构建的包</li>\n<li class=\"li2\">举个例子，你可以使用zypper安装xauth twm xorg-x11-server xinit这些包来建立一个轻量级的图形环境， 之后使用startx启动它。</li>\n</ul>\n<p class=\"p1 article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201309/19/121839fdkkv7hkh8khd7xb.gif\" alt=\"\" /></p>\n<p class=\"p1\">好了伙计们，这可不是PiSUSE去娱乐的时间，我的意思是快去试试在你的树莓派上安装openSUSE，不要喝太多的啤酒。openSUSE的伙计们快乐！</p>\n<p class=\"p3\"><span class=\"s2\">Source:&nbsp;<a class=\"external ext\" href=\"https://lizards.opensuse.org/2013/09/07/new-raspberry-pi-image/\" target=\"_blank\" rel=\"external nofollow noopener\"><span class=\"s1\">openSUSE Lizards</span></a></span></p>\n<p class=\"p3\">&nbsp;</p>\n<p class=\"p3\">&nbsp;</p>\n<hr />\n<p class=\"p3\"><span class=\"s2\">via:&nbsp;<a class=\"external ext\" href=\"http://www.unixmen.com/new-opensuse-raspberry-pi-image/\" target=\"_blank\" rel=\"external nofollow noopener\"><span class=\"s1\">http://www.unixmen.com/new-opensuse-raspberry-pi-image/</span></a></span></p>\n<p class=\"p1\">本文由&nbsp;<a class=\"external ext\" href=\"https://github.com/LCTT/TranslateProject\" target=\"_blank\" rel=\"external nofollow noopener\"><span class=\"s1\">LCTT</span></a>&nbsp;原创翻译，<a href=\"https://linux.cn/article-1980-1.html\"><span class=\"s1\">Linux中国</span></a>&nbsp;荣誉推出</p>\n<p class=\"p4\"><span class=\"s2\">译者：<a href=\"http://linux.cn/space/flsf01\"><span class=\"s1\">flsf01</span></a>&nbsp;校对：<a href=\"http://linux.cn/space/wxy\"><span class=\"s1\">wxy</span></a></span></p>','2019-09-18 07:47:03','2019-09-18 07:47:03'),(36,36,'树莓派（Raspberry Pi）：完美的家用服务器','https://linux.cn/article-2228-1.html','自从树莓派发布后，所有在互联网上的网站为此激动人心的设备提供了很多有趣和具有挑战性的使用方法。虽然这些想法都很棒，但树莓派( RPi )最明显却又是最不吸引人的用处是：创建你的完美家用服务器。\n\n如果你有几个不同的电脑需要同步和自动化备份，RPi可以做到。如果你想通过家中的任意屏幕来访问你的音乐和视频，RPi也能实现。也许你有一个或两个打印机，你想要简单与大家共享，树莓派在硬件和时间上用最小投资就能满足你的这些需求。','<p>自从树莓派发布后，所有在互联网上的网站为此激动人心的设备提供了很多有趣和具有挑战性的使用方法。虽然这些想法都很棒，但树莓派(&nbsp;<strong>RPi</strong>&nbsp;)最明显却又是最不吸引人的用处是：创建你的完美家用服务器。</p>\n<p>如果你有几个不同的电脑需要同步和自动化备份，RPi可以做到。如果你想通过家中的任意屏幕来访问你的音乐和视频，RPi也能实现。也许你有一个或两个打印机，你想要简单与大家共享，树莓派在硬件和时间上用最小投资就能满足你的这些需求。</p>\n<h3>树莓派的好处</h3>\n<p>低成本：35美元（约合242元RMB），B型的RPi接近一台完整的电脑，512M内存，100Mb以太网，SD卡插槽，2个USB接口，音频输出和HDMI或RCA视频输出。我知道HDMI电缆就比树莓派贵。</p>\n<p>能源效率：硬件成本只是服务器费用的一部分，因为你需要考虑能源成本去不断运行设备。家用服务器所需要的服务不会占用太多CPU，大部分时间它都处于空闲状态，等待发挥功效。RPi\'s超低功率组件非常适合这个工作负载，这有助于降低你的电费消耗。我的一个B型的RPi加上外部硬盘消耗总共只有8瓦，然而用老式速龙代替的机器在闲置时消耗54瓦。假设10美分每千瓦一小时，这使得一个RPi每年的电费在7美元。一个基于速龙的机器是47美元。在不到一年的时间里，RPI基本上能够收回成本。</p>\n<p>低噪音：因为RPi没有风扇和移动部件，在你最终配置中的唯一能生成噪音或明显热量的组件就是硬盘。如果你担心噪音，像<a class=\"external ext\" href=\"http://www.silentpcreview.com/\" target=\"_blank\" rel=\"external nofollow noopener\">Silent PC Review</a>发烧友网站经常在他们的评论中涉及到噪声基准。我的体会是现代驱动器足够安静，要比其他的设备安静的多（如媒体中心，游戏机或其他电脑）。如果你家里没有为布线提供更多的灵活性选择，RPi的小尺寸、少量发热和低噪音也许让你走过它旁边都很难发现。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201311/07/230232hzveaaihvovvbbl8.jpg\" alt=\"\" /></p>\n<p style=\"text-align: center;\">图1,一个简洁高效的家用服务器</p>\n<p>新机会：一个不怎么实际的好处是-简单快乐的尝试新事物！对我来说，这是我第一次真正工作在基于Debian的发行版，很可能也是许多Linux爱好者们第一次有机会尝试一个基于ARM的体系结构。</p>\n<h3>布置硬件</h3>\n<p>对于一个家庭服务器来说，你将需要一个中等容量的SD闪存卡作为本地存储。它可以使用一个USB引导，但那会占用两个宝贵的USB插槽之一。闪存卡不需要很大容量，但是速度越快越好。我选择了一个名牌SD卡，8GB容量和CLASS 10的速度等级。对于备份和存储多媒体文件，一个有USB连接插槽的硬盘驱动器是必须的。我选择一个1.5TB的硬盘和一个Calvary EN-CAHDD-D 2-bay USB 2.0硬盘连接基座。这个连接基座有个功能，在RAID-0模式中连接两个硬盘，总有一天会有用的。最后，RPi不带电源线，但可以用大多数智能手机充电器所用的5v微型USB。看看RPi是否挑剔电源，我为电源已换了三个不同的微型USB手机充电器。我在这周内尝试了每一个，在任何一个上都没有问题。</p>\n<h3>安装操作系统</h3>\n<p>安装RPi操作系统包括了许多方面的大量细节，但这里有一些家用特定服务器的安装提示，大致按需要的顺序讲述。</p>\n<p>1）直接通过<a class=\"external ext\" href=\"http://www.raspberrypi.org/downloads\" target=\"_blank\" rel=\"external nofollow noopener\">http://www.raspberrypi.org/downloads</a>获取Raspbian \"Wheezy\"安装镜像，并复制到SD卡，用网站上已列出的步骤。</p>\n<p>2）第一次引导RPi时，连接一个键盘、鼠标和显示器。在引导RPi之前别忘打开显示器，可以检测到正确的HDMI或混合输出端口。</p>\n<p>3）RPi有一个很好的\"raspi-config\"屏幕，在第一次启动时你会看到。对于家庭服务器来说，以下选择将会有用：</p>\n<ul>\n<li>expand_rootfs：调整默认2GB OS镜像的大小，来填满闪存卡剩余的内存。</li>\n<li>change_pass：修改默认密码\"raspberry\"，但是，越安全的密码越好。</li>\n<li>设置你的地点和时区。</li>\n<li>memory_split：给GPIU服务分配最少的内存（16M）尽可能为其他服务留下更多内存。</li>\n<li>SSH：别忘开启SSH服务。</li>\n<li>boot_behaviour：关闭&ldquo;启动至桌面（boot to desktop）&rdquo;（再次为你的其他服务节省内存）。</li>\n</ul>\n<p>完成后，你将在出现 pi@raspberrypi 提示符下。安装脚本可以在任何时间通过 sudo raspi-config 重新运行。</p>\n<p>还有一些其他配置，然后操作系统就可以用了。</p>\n<p>1）一个静态IP让一切变得更容易，切换eth0的网络设置：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; sudo nano -w /etc/network/interfaces  </code></pre>\n<p>更改eth0的那行 iface eth0 inet dhcp ，如下所示（根据你的家庭网络设置修改）：</p>\n<pre class=\"language-bash\"><code>======/etc/network/interfaces======\n...\niface eth0 inet static\naddress 192.168.1.10\nnetmask 255.255.255.0\ngateway 192.168.1.1\n...\n======/etc/network/interfaces======</code></pre>\n<p>2）创建本地用户并加入到users组和sudo组：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; sudo adduser YOURUSERIDHERE\n&gt;&gt; sudo usermod -a -G users YOURUSERIDHERE\n&gt;&gt; sudo usermod -a -G sudo YOURUSERIDHERE</code></pre>\n<p>3）更新系统确保所有的库是最新最好的：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; sudo apt-get update; sudo apt-get upgrade</code></pre>\n<p>4）好了，准备重新启动吧！先关闭PI：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; sudo /sbin/shutdown -h now</code></pre>\n<p>一旦关闭（注意RPi电路板上的绿色LED状态指示灯，可以知道什么时候完成关闭了），拔下显示器，键盘，鼠标和电源线。插入USB端口上的硬盘，然后插回电源重启RPi。</p>\n<p>5）一旦RPi开启（这些绿色LED指示灯用来描述状态），你可以从远程网络上从任何其他机器ssh到RPi并完成所有的配置（更改以下命令里的IP为你的静态IP）：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; ssh YOURUSERIDHERE@192.168.1.10</code></pre>\n<p>祝贺你，有了一个可以工作的树莓派！</p>\n<h3>外设</h3>\n<p>第一件事是要连接外设。用dmesg来寻找你的存储设备，会发现&mdash;&mdash;几乎可以肯定是/dev/sda。我喜欢使用自动挂载去挂载移动存储设备，这样更灵活，因为在启动时这些设备也许没有或者没准备好：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; sudo apt-get install autofs\n&gt;&gt; sudo nano -w /etc/auto.master \n======/etc/auto.master======\n...\n/misc /etc/auto.misc\n...\n======/etc/auto.master======\n\n&gt;&gt; sudo nano -w /etc/auto.misc\n</code></pre>\n<pre><br />注意，我的外部存储设备是ext4格式，如果需要话可以在下面更改：</pre>\n<pre class=\"language-bash\"><code>======/etc/auto.misc======\n...\nstorage -fstype=ext4:/dev/sda1\n...\n======/etc/auto.misc======\n&gt;&gt; sudo /etc/init.d/autofs restart \n&gt;&gt; ls -lat /misc/storage </code></pre>\n<p>可选的，创建一个符号链接的短路径：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; ln -s /misc/storage /storage</code></pre>\n<h3>备份仓库</h3>\n<p>在任何家庭服务器功能列表里面最重要的是提供坚如磐石的备份。对于RPi来说，这很简单而优美，在Linux中有丰富的网络共享选项：Samba/CIFS用于Windows机器，NFS用于基于UNIX的设备，并且甚至SFTP可以用于更多新的备份客户端，如deja-dup。由于RPi只有100MB以太网接口和USB上的存储设备，它没有非常快的传送速度。不过在另一方面，好的备份客户端是在后台自动运行的，所以你不会注意略微缓慢的传输速度。</p>\n<p>我的家庭网络包括一台Windows 7电脑。对于它，我通过Samba在RPi\'s外部USB存储设备上导出一个备份目录。因为备份程序在Windows7基础版上不支持网络设备作为备份目标，我使用<a class=\"external ext\" href=\"http://www.2brightsparks.com/freeware/freeware-hub.html\" target=\"_blank\" rel=\"external nofollow noopener\">SyncBack Free</a>去设置使其自动化，每日备份。</p>\n<p>配置Samba是容易的。</p>\n<p>1）安装samba和common-bin库（具有smbpasswd效用）</p>\n<pre class=\"language-bash\"><code>&gt;&gt; sudo apt-get install samba samba-common-bin</code></pre>\n<p>2）使用 smbpasswd 让你的本地ID能访问：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; sudo smbpasswd -a YOURUSERIDHERE</code></pre>\n<p>3）编辑samba配置文件：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; sudo nano -w /etc/samba/smb.conf</code></pre>\n<p>4）更改 workgroup = WORKGROUP 行以匹配你的Windows工作组名称。</p>\n<p>5）注释掉或删除[homes]和[printers]共享。(打印机共享稍后将通过直接CUPS访问来完成。)</p>\n<p>6）为Windows备份路径增加一个条目。这是我的示例，放置在该文件的底部：</p>\n<pre class=\"language-bash\"><code>======/etc/samba/smb.conf======\n...\n[win7pc] \ncomment=Backup for windows PC\npath=/storage/win7pc \nwriteable=Yes \ncreate mask=0777 \ndirectory mask=0777 \nbrowsable=Yes \npublic=Yes \nvalid users=YOURUSERIDHERE\n...\n======/etc/samba/smb.conf======</code></pre>\n<p>7）重启Samba使你的编辑生效：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; sudo /etc/init.d/samba restart</code></pre>\n<p>8）从Windows机器文件资源管理器通过映射一个网络设备测试连通。</p>\n<p>对Linux设备来说，设置和使用deja-dup非常简单。它被默认安装在我的Fedora 18和Ubuntu 12.10上。包的名称是&ldquo;deja-dup&rdquo;，程序名简单的称为&ldquo;Backup（备份）&rdquo;。虽然RPi很容易支持NFS导出，我发现使用deja-dup的SSH选项更容易，更方便，在RPi上它不需要额外服务的支持。指定一个deja-dup加密密码是一个好主意，除非你不在意一旦丢失了存储器，别人就可以拿走全部数据：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; sudo mkdir /storage/linuxlaptop\n&gt;&gt; sudo chown -R YOURUSERIDHERE:YOURUSERIDHERE /storage/linuxlaptop</code></pre>\n<p>从linux客户端启动备份程序，选择&ldquo;SSH&rdquo;作为备份位置，输入RPi的IP地址和你创建的存储位置。首次备份会很慢，但是以后的运行将只发送增量变化，速度更快。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201311/07/230234bj4j0qu874t0ui0z.png\" alt=\"\" /></p>\n<p style=\"text-align: center;\">图2,Deja-dup客户端设置</p>\n<h3>多媒体服务器：DLNA</h3>\n<p>现在每个人的文件都已安全备份。让我们继续看些有趣的！一个DLNA服务器可以让你集中存储你的电影、音乐和图片。通过这个中心库，家中每一个屏幕的DLNA客户端都可以轻松重放此内容。</p>\n<p>至少，这是一个宣称。事实是这样的，DNLA规格并不太确定一些重要的事情，如支持哪些格式或编码。每个客户端通常对于支持什么格式和服务器功能都有略微不同的想法。很多高功率的服务器也许能转码本地内容到移动设备支持的格式，但是在RPi上是不可能的，在即时转码上经常扰乱其他功能，如暂停，快进和倒带。一般情况下，高功率设备如PS3、Xbox和WD TV设备支持大多数格式，而无需任何转码。低端设备如智能TVs或Blu-ray播放器只支持更有限的编码列表。</p>\n<p>对于RPi来说，最好的办法是支持你的主要的DLNA设备的标准编码，然后测试你的其他DLNA客户端。如果没有完美播放，在下一节的提示也许有帮助。在我的情况下，我的PlayStation 3充当DLNA客户端，PS3能够流畅播放经Handbrake制作后的.m4v文件。</p>\n<p>对于RPi的DLNA服务器来说，Minidlna是个很好的选择。它已经在Raspbian发行版中，易于设置和使用最小服务资源运行：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; sudo apt-get install minidlna\n&gt;&gt; sudo nano  -w /etc/minidlna.conf</code></pre>\n<p>这是我/etc/minidlna.conf文件的相关部分：</p>\n<pre class=\"language-bash\"><code>...\n# I found keeping video + audio in different paths helpful\nmedia_dir=V,/storage/dlna/video \nmedia_dir=A,/storage/dlna/music \n...\npresentation_url=http://192.168.1.10:8200/\n... \nfriendly_name=MyRPi\n...\n# Since I add new media infrequently, turning off \n# inotify keeps minidlna for polling for \n# content changes. It\'s simple enough to run \n# sudo /etc/init.d/minidlna force-reload\n# when new content is added.\ninotify=no</code></pre>\n<p>一旦完成编辑，重启minidlna以加载新配置：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; sudo /etc/init.d/minidlna force-reload</code></pre>\n<p>Minidlna能够为你的设备支持的电影提供电影海报缩略图（像PS3）。这让我能够更方便地在几十个电影文件中滚屏查找我想要的那个电影。我发现每个电影一个目录是最兼容的文件布局，只包含影片文件和缩略图，图像命名为&ldquo;Cover.jpg&rdquo;。使用像\"MovieName.m4v\"和\"MovieName.jpg\"的格式在PS3上工作的很好，但它不太适合VLC（除非你能让VLC uPNP插件首先查找服务器的话）。</p>\n<p>通过PS3，你可以通过转到在XMB栏上的\"Video\"测试连通性。当视频列表向下翻页时，你以前设置的\"friendly_name\"应该是可见的，测试确保Minidlna是通过浏览器转到<a class=\"external ext\" href=\"http://192.168.1.10:8200/%E3%80%82\" target=\"_blank\" rel=\"external nofollow noopener\">http://192.168.1.10:8200/。</a></p>\n<h3>非DLNA设备的多媒体</h3>\n<p>当你让DNLA与你的一些设备一起工作时，你可能会发现有些设备并不适合它，所以多媒体计划B是个好主意。Nginx网站服务器有一个MP4插件尝试在旧式的HTTP连接上改善流媒体传输，但是浏览器回放的性能差别很大，在一部电影里快进也一直不工作。看起来多媒体共享或非 DLNA 设备的最低共同特性是使用传统Samba共享的访客只读访问。</p>\n<p>这是/etc/samba/smb.conf的部分示例：</p>\n<pre class=\"language-bash\"><code>[dlna] \npath=/storage/dlna \nread only=yes \nbrowsable=yes \npublic=yes </code></pre>\n<p>定义了共享设置后重启Samba（ sudo /etc/init.d/samba restart ），你可以开始测试你的客户端。</p>\n<p>我用一个混合的编码m4v视频文件测试了以下客户端：</p>\n<ul>\n<li>\n<p>Android 4.0.4手机：\"ES File Explorer\"与\"ES Media Player\"（播放器附带安装）。</p>\n</li>\n<li>\n<p>Android 4.1.2平板电脑：\"ES File Explorer\"与\"ES Media Player\"（播放器附带安装）。</p>\n</li>\n<li>\n<p>Linux设备：自动挂载：//192.168.1.10/dlna，然后使用VLC或MPlayer。</p>\n</li>\n<li>\n<p>Windows：挂载//192.168.1.10:/dlna，然后使用VLC。</p>\n</li>\n</ul>\n<p>所有设备都能几乎立即开始播放和快进没有延迟的情况。</p>\n<h3>打印服务器</h3>\n<p>RPi运行CUPS相当不错，所以它容易共享一个较旧的没有本地网络接口的打印机。</p>\n<p>安装你的打印机所需的CUPS和任何软件包。我需要hplip-cups，因为我有一个HP喷墨打印机：</p>\n<pre class=\"language-bash\"><code>&gt;&gt;  sudo apt-get install cups hplip-cups</code></pre>\n<p>更新&ldquo;Listen&rdquo;行和增加 Allow @LOCAL 到位置指令，如下所示（你可以使用其他机器在你的LAN上去管理CUPS）：</p>\n<pre class=\"language-bash\"><code>======/etc/cups/cupsd.conf======\n#Listen localhost:631  #Comment this out\nListen 192.168.1.10:631 #Add this line\n...\n \n  Order allow,deny \n  Allow @LOCAL \n \n\n# Restrict access to the admin pages... \n \n  Order allow,deny \n  Allow @LOCAL \n \n\n# Restrict access to configuration files... \n  \n  AuthType Default \n  Require user @SYSTEM \n  Order allow,deny \n  Allow @LOCAL \n \n======/etc/cups/cupsd.conf======</code></pre>\n<p>添加你的本地ID到lpadmin组就能管理CUPS：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; sudo usermod -a -G lpadmin  YOURUSERIDHERE</code></pre>\n<p>重启CUPS：</p>\n<pre class=\"language-bash\"><code>&gt;&gt; sudo /etc/init.d/cups restart</code></pre>\n<p>然后转到<a class=\"external ext\" href=\"http://192.168.1.10:631/%E5%B9%B6%E7%82%B9%E5%87%BB\" target=\"_blank\" rel=\"external nofollow noopener\">http://192.168.1.10:631/并点击</a>&nbsp;\"Adding Printers and Classes\"去设置你的打印机。我的打印机是自动发现的USB设备，所以，我只需点击&ldquo;share&rdquo;就可以。同样访问<a class=\"external ext\" href=\"https://192.168.1.10:631/admin%EF%BC%8C%E7%A1%AE%E4%BF%9D%E6%A3%80%E6%9F%A5%E2%80%9CShare\" target=\"_blank\" rel=\"external nofollow noopener\">https://192.168.1.10:631/admin，确保检查&ldquo;Share</a>&nbsp;printers connected to this system（共享连接至这个系统的打印机）&rdquo;。</p>\n<p>完成后，你可以用通常的方式设置你的客户端。当我输入主机名，我的Linux客户端就能够自动发现打印机，并选择正确的驱动程序。在我的Windows7的机器上，一旦我选择&ldquo;Network Printer（网络打印机）&rdquo;，我必须点击&ldquo;The printer that I want isn\'t listed（我想要的打印机未列出）&rdquo;，选择&ldquo;Select a shared printer by name（通过名称选择共享的打印机）&rdquo;，然后从CUPS网络接口输入URL：<a class=\"external ext\" href=\"http://192.168.1.10:631/printers/HP_J4500%E3%80%82\" target=\"_blank\" rel=\"external nofollow noopener\">http://192.168.1.10:631/printers/HP_J4500。</a></p>\n<h3>结论</h3>\n<p>用最少的额外的硬件和配置，树莓派是高效、简洁的家用服务器。它能够花最小的硬件费用来为你的家庭环境带来由Linux提供的广泛企业服务。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<hr />\n<p>via:&nbsp;<a class=\"external ext\" href=\"http://www.linuxjournal.com/content/raspberry-pi-perfect-home-server\" target=\"_blank\" rel=\"external nofollow noopener\">http://www.linuxjournal.com/content/raspberry-pi-perfect-home-server</a></p>\n<p>本文由&nbsp;<a class=\"external ext\" href=\"https://github.com/LCTT/TranslateProject\" target=\"_blank\" rel=\"external nofollow noopener\">LCTT</a>&nbsp;原创翻译，<a href=\"https://linux.cn/article-2228-1.html\">Linux中国</a>&nbsp;荣誉推出</p>\n<p>译者：<a class=\"external ext\" href=\"https://github.com/vito-L\" target=\"_blank\" rel=\"external nofollow noopener\">Vito</a>&nbsp;校对：<a class=\"external ext\" href=\"https://github.com/carolinewuyan\" target=\"_blank\" rel=\"external nofollow noopener\">Caroline</a></p>','2019-09-18 07:52:51','2019-09-18 07:52:51'),(37,37,'树莓派使用实例之：2 Pi R','https://linux.cn/article-2587-1.html','很多人都对树莓派的硬件 hack 功能（译注：就是用户可以自己发挥想像力，把树莓派设计成自己想要的机器）感兴趣，而我看中的一点是树莓派的低耗电功能，我可以用它来代替现在在用的 Linux 服务器。在以前的文章中我已经介绍过如何用树莓派代替这些服务器来管理我的啤酒冰箱，以及我在澳大利亚托管的一台树莓派。托管树莓派之后，我开始思考我正在使用的服务器的单点故障问题，并且考虑着手解决它。当你看到文章标题里的“2 Pi R”，你也许会想到圆周长计算公式（C = 2PiR，Pi 为圆周率，R 为半径），但在本文中，“R”的意思是“冗余（redundancy）”。当然，一块树莓派并不能实现冗余，至少需要两块。下面我将介绍如何用两块树莓派实现冗余。','<p>很多人都对树莓派的硬件 hack 功能（译注：就是用户可以自己发挥想像力，把树莓派设计成自己想要的机器）感兴趣，而我看中的一点是树莓派的低耗电功能，我可以用它来代替现在在用的 Linux 服务器。在以前的文章中我已经介绍过如何用树莓派代替这些服务器来管理我的啤酒冰箱，以及我在澳大利亚托管的一台树莓派。托管树莓派之后，我开始思考我正在使用的服务器的单点故障问题，并且考虑着手解决它。当你看到文章标题里的&ldquo;2 Pi R&rdquo;，你也许会想到圆周长计算公式（C = 2<em>Pi</em>R，Pi 为圆周率，R 为半径），但在本文中，&ldquo;R&rdquo;的意思是&ldquo;冗余（redundancy）&rdquo;。当然，一块树莓派并不能实现冗余，至少需要两块。下面我将介绍如何用两块树莓派实现冗余。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201402/21/1029369hipkkq85r9qi6p5.jpg\" alt=\"\" width=\"640\" height=\"360\" /></p>\n<p>本文将建立一个底层框架，为俩树莓派实现冗余提供基础服务，首先我要用 GlusterFS 建立一个集群网络文件系统。在之后的文章中，我还会介绍如何利用共享存储来建立其他冗余服务。注意，虽然本文使用的是树莓派，但下面的配置操作同样适用于其他硬件。</p>\n<h3>配置俩树莓派</h3>\n<p>首先从树莓派官网下载最新的 Linux 发行版，并安装到两块 SD 卡中。将树莓派接到电视机上，然后按照文档提示选择内核镜像并启动系统，确认一下 SSH 服务有没有启动（默认情况下 SSH 应该是开机启动的）。你可以使用 raspi-config 命令来增加根分区空间，以便能充分利用 SD 卡的容量。确认系统正常工作、SSH 正常启动后，我可以过程访问它了。我将树莓派与电视机断开，并连到交换机上，重启系统，没有显示界面。</p>\n<p>默认情况下，Raspbian 会通过 DHCP 获取自己的网络信息，但是在设置冗余服务时，我们希望树莓派每次开机都使用同一个 IP 地址。在我的环境中，我设置了我的 DHCP 服务器，它会在树莓派启动时为它们分配固定的 IP 地址。而你可以编辑 /etc/network/interfaces 文件：</p>\n<pre class=\"language-bash\"><code>iface eth0 inet dhcp</code></pre>\n<p>修改成：</p>\n<pre class=\"language-bash\"><code>auto eth0\niface eth0 inet static\n  address 192.168.0.121\n  netmask 255.255.255.0\n  gateway 192.168.0.1</code></pre>\n<p>当然，要将上面的参数修改成你自己的参数，确保每个树莓派使用不同的 IP 地址。我把两个树莓派的主机名都改了，便于在（通过 SSH）登录的时候区分它们。怎么改主机名呢？以 root 权限编辑 /etc/hostname 文件。最后重启系统，确认树莓派使用了正确的网络配置和主机名。</p>\n<h3>配置 GlusterFS 服务器</h3>\n<p>GlusterFS 是一个用户态的集群文件系统，我选择它，是因为它配置共享网络文件系统很方便。首先选一个树莓派作为主设备（master）。在主设备上你需要做一些初始化操作，完成后，它们会自动执行故障转移。下面是我架设的环境：</p>\n<pre class=\"language-bash\"><code>Master hostname: pi1\nMaster IP: 192.168.0.121\nMaster brick path: /srv/gv0\nSecondary hostname: pi2\nSecondary IP: 192.168.0.122\nSecondary brick path: /srv/gv0</code></pre>\n<p>在开始之前，登入这两个树莓派，然后安装 glusterfs-server 软件包：</p>\n<pre class=\"language-bash\"><code>$ sudo apt-get install glusterfs-server</code></pre>\n<p>GlusterFS 将数据保存在一些被称为&ldquo;块&rdquo;的设备中。一个&ldquo;块&rdquo;是一个系统路径，由你指定给 gluster 使用。GlusterFS 会将所有&ldquo;块&rdquo;组合成一个存储卷，给客户端使用。GlusterFS 会将文件的数据分割成多份，保存在不同的&ldquo;块&rdquo;中。所以虽然一个&ldquo;块&rdquo;看起来就是一个普通的路径，你最好不要在树莓派中直接操作它，而应该通过客户端访问 GlusterFS 服务，让 GlusterFS 操作。本文中我在两个树莓派中都新建一个 /srv/gv0 目录作为 GlusterFS 的&ldquo;块&rdquo;：</p>\n<pre class=\"language-bash\"><code>$ sudo mkdir /srv/gv0</code></pre>\n<p>在我的环境中，我将 SD 卡上的根文件系统共享出来，而你可能需要共享更大的存储空间。如果是这样的话，在两块树莓派上都接上 USB 硬盘，格式化后挂载到 /srv/gv0 上。编辑下 /etc/fstab 文件，确保系统每次启动时都会把你的 USB 硬盘挂载上去。两个树莓派上的&ldquo;块&rdquo;不一定需要有相同的名字或者相同的路径名称，但是把它们设置为相同的值也没什么坏处。</p>\n<p>配置好&ldquo;块&rdquo;的路径，安装好 glusterfs-server 软件包，确认两个树莓派都正常工作，然后登入被你设为主设备的树莓派，输入&ldquo;gluster peer probe&rdquo;命令，将次设备加入到集群中。在我的环境中，我用 IP 地址表示第二个节点，如果你比较有个性，并且有设置过 DNS，你也可以用主机名表示这个节点。</p>\n<pre class=\"language-bash\"><code>pi@pi1 ~ $ sudo gluster peer probe 192.168.0.122\nProbe successful</code></pre>\n<pre class=\"brush: bash;font-size: 100%; first-line: 1; \"><br />目前为止，我的 pi1 (192.168.0.121) 信任 pi2 (192.168.0.122)，我可以建立一个存储卷，名字都想好了：gv0。在主设备端运行命令&ldquo;gluster volume create&rdquo;：</pre>\n<pre class=\"language-bash\"><code>pi@pi1 ~ $ sudo gluster volume create gv0 replica 2 192.168.0.121:/srv/gv0 192.168.0.122:/srv/gv0\nCreation of volume gv0 has been successful. Please start the volume to access data.</code></pre>\n<p>这里稍微解释一下命令的意思。&ldquo;gluster volume create&rdquo;就是新建一个卷；&ldquo;gv0&rdquo;是卷名，这个名称将会在客户端被用到；&ldquo;replica 2&rdquo;表示这个卷的数据会在两个&ldquo;块&rdquo;之间作冗余，而不是将数据分割成两份分别存于两个&ldquo;块&rdquo;。这个命令保证了卷内的数据会被复制成两份分别保存在两个&ldquo;块&rdquo;中。最后我定义两个独立的&ldquo;块&rdquo;，作为卷的存储空间：192.168.0.121 上的 /srv/gv0 和 192.168.0.122 上的 /srv/gv0。</p>\n<p>现在，卷被成功创建，我只需启动它：</p>\n<pre class=\"language-bash\"><code>pi@pi1 ~ $ sudo gluster volume start gv0\nStarting volume gv0 has been successful</code></pre>\n<p>然后我可以在任何一个树莓派上使用&ldquo;volume info&rdquo;命令来查看状态：</p>\n<pre class=\"language-bash\"><code>$ sudo gluster volume info\n\nVolume Name: gv0\nType: Replicate\nStatus: Started\nNumber of Bricks: 2\nTransport-type: tcp\nBricks:\nBrick1: 192.168.0.121:/srv/gv0\nBrick2: 192.168.0.122:/srv/gv0</code></pre>\n<h3>配置 GlusterFS 客户端</h3>\n<p>卷已启动，现在我可以在一个支持 GlusterFS 的客户端上，将它作为一个 GlusterFS 类型的文件系统挂载起来。首先我想在这两个树莓派上挂载这个卷，于是我在两个树莓派上都创建了挂载点，并下面的命令把这个卷挂载上去：</p>\n<pre class=\"language-bash\"><code>$ sudo mkdir -p /mnt/gluster1\n$ sudo mount -t glusterfs 192.168.0.121:/gv0 /mnt/gluster1\n$ df\nFilesystem         1K-blocks    Used Available Use% Mounted on\nrootfs               1804128 1496464    216016  88% /\n/dev/root            1804128 1496464    216016  88% /\ndevtmpfs               86184       0     86184   0% /dev\ntmpfs                  18888     216     18672   2% /run\ntmpfs                   5120       0      5120   0% /run/lock\ntmpfs                  37760       0     37760   0% /run/shm\n/dev/mmcblk0p1         57288   18960     38328  34% /boot\n192.168.0.121:/gv0   1804032 1496448    215936  88% /mnt/gluster1</code></pre>\n<p>如果你是一个喜欢钻研的读者，你可能会问了：&ldquo;如果我指定了一个 IP 地址，如果192.168.0.121当机了，怎么办？&rdquo;。别担心，这个 IP 地址仅仅是为了指定使用哪个卷，当我们访问这个卷的时候，卷内的两个&ldquo;块&rdquo;都会被访问到。</p>\n<p>当你挂载好这个文件系统后，试试在里面新建文件，然后查看一下&ldquo;块&rdquo;对应的路径：/srv/gv0。你应该可以看到你在 /mngt/gluster1 里创建的文件，在两个树莓派的 /srv/gv0 上都出现了（重申一遍，不要往 /srv/gv0 里写数据）：</p>\n<pre class=\"language-bash\"><code>pi@pi1 ~ $ sudo touch /mnt/gluster1/test1\npi@pi1 ~ $ ls /mnt/gluster1/test1\n/mnt/gluster1/test1\npi@pi1 ~ $ ls /srv/gv0\ntest1\npi@pi2 ~ $ ls /srv/gv0\ntest1</code></pre>\n<p>你可以在 /etc/fstab 上添加下面一段，就可以在系统启动的时候自动把 GlusterFS 的卷挂载上来：</p>\n<pre class=\"language-bash\"><code>192.168.0.121:/gv0  /mnt/gluster1  glusterfs  defaults,_netdev  0  0</code></pre>\n<p>注意：如果你想通过其他客户端访问到这个 GlusterFS 卷，只需要安装一个 GlusterFS 客户端（在基于 Debian 的发行版里，这个客户端叫 glusterfs-client），然后接我上面介绍的，创建挂载点，将卷挂载上去。</p>\n<h3>冗余测试</h3>\n<p>现在我们就来测试一下这个冗余文件系统。我们的目标是，当其中一个节点当掉，我们还能访问 GlusterFS 卷里面的文件。首先我配置一个独立的客户端用于挂载 GlusterFS 卷，然后新建一个简单的脚本文件放在卷中，文件名为&ldquo;glustertest&rdquo;：</p>\n<pre class=\"language-bash\"><code>#!/bin/bash\n\nwhile [ 1 ]\ndo\n  date &gt; /mnt/gluster1/test1\n  cat /mnt/gluster1/test1\n  sleep 1\ndone</code></pre>\n<p>这个脚本运行无限循环并每隔1秒打印出系统时间。当我运行这个脚本时，我可以看到下面的信息：</p>\n<pre class=\"language-bash\"><code># chmod a+x /mnt/gluster1/glustertest\nroot@moses:~# /mnt/gluster1/glustertest\nSat Mar  9 13:19:02 PST 2013\nSat Mar  9 13:19:04 PST 2013\nSat Mar  9 13:19:05 PST 2013\nSat Mar  9 13:19:06 PST 2013\nSat Mar  9 13:19:07 PST 2013\nSat Mar  9 13:19:08 PST 2013</code></pre>\n<p>我发现这个脚本偶尔会跳过1秒，可能是 date 这个命令并不是很精确地每隔1秒钟打印一次，所以偶尔会出现输出时间不连惯的现象。</p>\n<p>当我执行这个脚本后，我登入一个树莓派并输入&ldquo;sudo reboot&rdquo;重启这个设备。这个脚本一直在运行，如果出现输出时间不连惯现象，我不知道还是不是上面说的偶然现象。当第一个树莓派启动后，我重启第二个树莓派，确认下这个系统有一个节点丢失后，我的程序仍然能正常工作。这个冗余系统配置起来只需要几个命令，如果你需要一个冗余系统，这是个不错的选择。</p>\n<p>现在你已经实现了 2 Pi R 组成的冗余文件系统，在我的下篇文章中，我将会加入新的冗余服务，将这个共享存储系统好好利用起来。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<hr />\n<p>via:&nbsp;<a class=\"external ext\" href=\"http://www.linuxjournal.com/content/two-pi-r\" target=\"_blank\" rel=\"external nofollow noopener\">http://www.linuxjournal.com/content/two-pi-r</a></p>\n<p>译者：<a class=\"external ext\" href=\"https://github.com/bazz2\" target=\"_blank\" rel=\"external nofollow noopener\">bazz2</a>&nbsp;校对：<a class=\"external ext\" href=\"https://github.com/wxy\" target=\"_blank\" rel=\"external nofollow noopener\">wxy</a></p>\n<p>本文由&nbsp;<a class=\"external ext\" href=\"https://github.com/LCTT/TranslateProject\" target=\"_blank\" rel=\"external nofollow noopener\">LCTT</a>&nbsp;原创翻译，<a href=\"https://linux.cn/article-2587-1.html\">Linux中国</a>&nbsp;荣誉推出</p>','2019-09-18 07:57:29','2019-09-18 07:57:29'),(38,38,'树莓派使用实例之：2 Pi R 第二篇：Web服务器','https://linux.cn/article-2658-1.html','可能你没有看过我的上一篇文章，那我就在这里简单回顾一下上次的内容。我有两个树莓派：Pi1 和 Pi2。Pi1 的 IP 地址为 192.168.0.121，Pi2 的 IP 地址为 192.168.0.122。我把它们组合成为 GlusterFS 集群系统，共享一个存储卷，卷名为 gv0。并且这个 gv0 被挂载在两个树莓派上，挂载点都是 /mnt/gluster1，这样一来，两个树莓派能同时访问到这个共享卷。最后我测试了下系统的容错性，将共享卷挂载到第三个物理机上，并执行共享卷上的一个简单的脚本：打印系统时间并输出到 gv0 上的一个文件内，然后轮着关掉两台树莓派，检测这个冗余系统是否还能用。','<p>在我的上一篇<a href=\"http://linux.cn/article-2587-1.html\">文章</a>中讲过如何做一个高可用系统：两个树莓派布署上 GlusterFS 集群文件系统，就变成一个容错文件服务器了。在这篇文章中我们会基于这个高可用系统构建另一个容错服务：建立一个简单的 Web 服务器集群。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/09/8e9b8b1e54c255fa94384c926527a0e8.jpg-water\" alt=\"\" width=\"400\" height=\"300\" /></p>\n<p>可能你没有看过我的上一篇文章，那我就在这里简单回顾一下上次的内容。我有两个树莓派：Pi1 和 Pi2。Pi1 的 IP 地址为 192.168.0.121，Pi2 的 IP 地址为 192.168.0.122。我把它们组合成为 GlusterFS 集群系统，共享一个存储卷，卷名为 gv0。并且这个 gv0 被挂载在两个树莓派上，挂载点都是 /mnt/gluster1，这样一来，两个树莓派能同时访问到这个共享卷。最后我测试了下系统的容错性，将共享卷挂载到第三个物理机上，并执行共享卷上的一个简单的脚本：打印系统时间并输出到 gv0 上的一个文件内，然后轮着关掉两台树莓派，检测这个冗余系统是否还能用。</p>\n<p>现在我手上有这个经过检验的存储系统，我要做的是把这个系统做成有容错功能的 Web 服务器集群。树莓派的 CPU 处理速度和内存资源都不是很高，好在对付一个静态 Web 服务器已经是绰绰有余了。我故意把这个例子做得非常简单，因为我觉得如果你能摆平这个简单的例子，你也能处理复杂一点的问题了。</p>\n<h3>安装 Nginx</h3>\n<p>虽然我也比较喜欢 Apache，但在资源有限的情况下，像 Nginx 这样功能全、性能高、资源占用少的 Web 服务器是比较理想的选择。在 Raspbian 的默认源中存在 Nginx，所以我只要登入一台树莓派并且输入以下命令：</p>\n<pre class=\"language-bash\"><code>$ sudo apt-get update\n$ sudo apt-get install nginx</code></pre>\n<p>Nginx 安装好后，创建配置文件 /mnt/gluster1/cluster ，内容如下：</p>\n<pre class=\"language-nginx\"><code>server {\n  root /mnt/gluster1/www;\n  index index.html index.htm;\n  server_name twopir twopir.example.com;\n \n  location / {\n        try_files $uri $uri/ /index.html;\n  }\n}</code></pre>\n<p>注意：我这里把服务器命名为&ldquo;twopir&rdquo;，你可以根据自己爱好命名你的网站。另外我把 Web 服务器的根目录设置为 /mng/gluster1/www。这样，我就能把我的静态文件放在这个共享存储系统内，从而让两个树莓派主机都访问到它们。</p>\n<p>现在删除默认的 Nginx 配置文件，将上面配好的配置文件作为 Nginx 的配置文件。在 Debian 系统中，Nginx 将它的配置文件像 Apache 一样放在 sites-available 和 site-enabled 两个目录下面。虚拟主机配置文档放在 sites-available 中，而 sites-enabled 目录包含了你想生效的配置文件的软链接。</p>\n<pre class=\"language-bash\"><code>$ cd /etc/nginx/sites-available\n$ sudo ln -s /mnt/gluster1/cluster .\n$ cd /etc/nginx/sites-enabled\n$ sudo rm default\n$ sudo ln -s /etc/nginx/sites-available/cluster .</code></pre>\n<p>现在我已经放好了配置文件，但系统还不存在上面所说的 Web 服务器根目录。下一步就是创建目录 /mnt/gluster1/www，并复制 index.html 文件进去。当然你也可以建立自己定义的 index.html 文件，但先复制一个已有的文件是个不错的选择：</p>\n<pre class=\"language-bash\"><code>$ sudo mkdir /mnt/gluster1/www\n$ cp /usr/share/nginx/www/index.html /mnt/gluster1/www</code></pre>\n<p>重启 Nginx 服务：</p>\n<pre class=\"language-bash\"><code>$ sudo /etc/init.d/nginx restart</code></pre>\n<p>现在去 DNS 服务器为192.168.0.121的树莓派配置记录。你可以根据自己的情况配置你自己的域名和 IP 地址。现在在浏览器上输入 http://twopir/ 然后出现默认的 Nginx 首页。如果你查看下 /var/log/nginx/access.log 文件，你可以看到点击网页留下的记录。</p>\n<p>Nginx 能正常工作后，配置第二个树莓派。因为我们已经将配置文件都放在 GlusterFS 共享目录下，我们现在要做的只是安装 Nginx，创建相关的软链接，重启 Nginx：</p>\n<pre class=\"language-bash\"><code>$ sudo apt-get update\n$ sudo apt-get install nginx\n$ cd /etc/nginx/sites-available\n$ sudo ln -s /mnt/gluster1/cluster .\n$ cd /etc/nginx/sites-enabled\n$ sudo rm default\n$ sudo ln -s /etc/nginx/sites-available/cluster .\n$ sudo /etc/init.d/nginx restart</code></pre>\n<h3>DNS 服务器上配置两条 A 记录</h3>\n<p>现在两个主机共享同一份文件，下一步是设置冗余系统的关键步骤。虽然你完全可以设置一个类似心跳的服务用于轮询检测哪个树莓派的 Web 服务是开启的，但这里有个更好的方法：给同一个主机名指定两个 DNS 的 A 记录，分别指向你的两个树莓派（译注：A 记录就是将域名转化为 IP 地址的记录，DNS 包含很多记录方式，如 A 记录、PTR 记录、MX 记录等等），这就是传说中的 DNS 负载均衡，DNS 访问主机时，如果主机名对应多个 IP 地址，DNS 会随机返回这些 IP 地址的顺序：</p>\n<pre class=\"language-bash\"><code>$ dig twopir.example.com A +short\n192.168.0.121\n192.168.0.122\n$ dig twopir.example.com A +short\n192.168.0.122\n192.168.0.121</code></pre>\n<p>因为返回随机的顺序，用户可以均匀地往两台服务器发送请求，这个负载均衡的机制就是由 DNS 服务器的多条 A 记录来提供。相对于 DNS 的负载均衡技术，我更感兴趣的是 Web 浏览器如何处理请求失败的情况。当浏览器通过网页主机获得两条 A 记录，并且第一条记录所在的主机当机了，浏览器几乎立刻就切到另一条记录上。切换效率快到用户根本察觉不出来，这可比传统的心跳线轮循请求主机快多了。</p>\n<p>所以在你正在使用的 DNS 服务器上添加你的树莓派集群的两个 IP 地址，然后试试 dig 命令，就像我在上面使用过的一样，你也应该能得到两个 IP 地址。</p>\n<p>当你为同一个域名设置好了两个 A 记录，这套集群就可以提供容错服务了。打开两个终端并分别登录到两个树莓派，运行 tail -f /var/log/ngnix/access.log 命令，你可以监视 Web 服务器的访问情况。当你通过浏览器访问网页时，你可以看到在一台树莓派上产生了访问日志，而在另外一台的日志里什么也没有出现。现在你可以刷新几次页面，当你觉得你对能成功访问到 Web 服务器感到满意了，你可以重启响应你请求的那台树莓派，然后再刷新几次页面。也许浏览器上会出现一个短暂的不可访问信号，但会马上重定向到第二台树莓派上，你会看到一样的页面，并且你能通过终端访问日志了解具体情况。当第一台树莓派启动后，你在浏览器上根本不会察觉到。</p>\n<p>（译注：如何处理DNS 轮询的多个IP地址，不同浏览器有不同的做法，目前译者收集到的资料显示，只有<a class=\"ext\" href=\"http://www-archive.mozilla.org/docs/netlib/dns.html\" target=\"_blank\" rel=\"external nofollow noopener\">mozilla的netlib库</a>支持自动重连下一个IP地址的做法。如果读者知道更多的浏览器对DNS轮询的处理策略，请评论给我们。其实，以译者的态度看，DNS轮询根本就不能算作是高可用性的方案，勉强可以算作是负载均衡方案，建议考虑更可靠的其它方案。）</p>\n<p>随机重启一台树莓派，只要有一台在线，Web 服务器就能提供服务。这是一个非常简单的案例，你可以把你其它的静态文件放到 /mnt/gluster1/www 上，为你提供真正有价值的服务，现在好好享受你的低成本容错集群 Web 服务器吧。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<hr />\n<p>via:&nbsp;<a class=\"ext\" href=\"http://www.linuxjournal.com/content/two-pi-r-2-web-servers\" target=\"_blank\" rel=\"external nofollow noopener\">http://www.linuxjournal.com/content/two-pi-r-2-web-servers</a></p>\n<p>译者：<a class=\"ext\" href=\"https://github.com/bazz2\" target=\"_blank\" rel=\"external nofollow noopener\">bazz2</a>&nbsp;校对：<a class=\"ext\" href=\"https://github.com/wxy\" target=\"_blank\" rel=\"external nofollow noopener\">wxy</a></p>\n<p>本文由&nbsp;<a class=\"ext\" href=\"https://github.com/LCTT/TranslateProject\" target=\"_blank\" rel=\"external nofollow noopener\">LCTT</a>&nbsp;原创翻译，<a href=\"https://linux.cn/article-2658-1.html\">Linux中国</a>&nbsp;荣誉推出</p>','2019-09-18 08:02:16','2019-09-18 08:02:16'),(39,39,'树莓派进阶学习的五个建议','https://linux.cn/article-3056-1.html','当你可以在命令行输入命令时，你就不再是一个新手在做一些新手的设置了。虽然进度不快，但是你的确正在通过你的方式去学习使用这物超所值的、只有信用卡大小的计算机去满足一些DIY想法，这就是树莓派。\n\n然而，从基础跨越到中级还是存在较大距离。当你从“设置你的派”的教程转而学习“创建一个媒体服务器”时，项目开始前的需求就会有一点点挑战。许多中级的Pi教程，包括ReadWrite的一些文章，都会假设你已经对树莓派设置好了一些东西。','<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://net.lnmpa.top/thumbnail/2019/09/0d342a1ae7fe046e60223532b5e89e90.jpg-water\" alt=\"\" width=\"700\" /></p>\n<blockquote>\n<p>从SSH到端口转发，这些先进的技术将让你的树莓派开发更简单。</p>\n</blockquote>\n<p>当你可以在命令行输入命令时，你就不再是一个新手在做一些<a class=\"ext\" href=\"http://www.raspberrypi.org/downloads/\" target=\"_blank\" rel=\"external nofollow noopener\">新手的设置</a>了。虽然进度不快，但是你的确正在通过你的方式去学习使用这物超所值的、只有信用卡大小的计算机去满足一些DIY想法，这就是树莓派。</p>\n<blockquote>\n<p>然而，从基础跨越到中级还是存在较大距离。当你从&ldquo;设置你的派&rdquo;的教程转而学习&ldquo;创建一个媒体服务器&rdquo;时，项目开始前的需求就会有一点点挑战。许多中级的Pi教程，包括ReadWrite的一些文章，都会假设你已经对树莓派设置好了一些东西。</p>\n</blockquote>\n<p>并非每一个项目都需要找个教程里的所有建议，但是知道这些步骤可以使项目更顺利地贴合需求。</p>\n<p>当你准备脱离小白行列时，做一些树莓派教程的预先准备工作对你非常有用。</p>\n<h3>1) 使用SSH登录</h3>\n<p>SSH意思是<a class=\"ext\" href=\"http://en.wikipedia.org/wiki/Secure_Shell\" target=\"_blank\" rel=\"external nofollow noopener\">Secure Shell</a>，它是一种加密网络协议，用于安全地在计算机与树莓派之间传输你的数据。项目中也许需要你通过你的计算机的命令行控制树莓派，而不是通过给树莓派连接显示器和键盘来控制。</p>\n<p>现在SSH已经预先安装在树莓派系统&nbsp;<a class=\"ext\" href=\"http://www.raspbian.org/\" target=\"_blank\" rel=\"external nofollow noopener\">Raspbian</a>&nbsp;中了，所以如果你安装的是最新版本或较新版本的树莓派都是支持SSH使用的。</p>\n<p>要使用SSH，第一，你需要知道你的树莓派的IP地址，在你的树莓派中输入以下命令：</p>\n<pre class=\"language-bash\"><code>sudo ifconfig</code></pre>\n<p><a class=\"ext\" href=\"https://learn.adafruit.com/adafruits-raspberry-pi-lesson-3-network-setup/finding-your-pis-ip-address\" target=\"_blank\" rel=\"external nofollow noopener\">会显示出三个段落</a>。你的IP地址将会在第一段或者第三段显示，这主要看你的树莓派是通过线缆还是通过WIFI适配器连接网络的。如果是通过线缆连接，那请查看第一段，在&ldquo;eth0&rdquo;那行开始显示。如果是通过wifi链接，将在第三段&ldquo;wlan0&rdquo;开头的地方显示。</p>\n<p>无论通过哪种方式，你将会看到以&ldquo;inet addr&rdquo;开头后面跟着像192.168.2.2这样类型的IP地址，这是我们在这篇文章中经常引用到的一种默认IP地址格式。</p>\n<p>现在你有一个可以连接树莓派与你的电脑的IP地址了，如果你使用的是Mac，你已经有了内置的SSH，启动你的终端应用并输入：</p>\n<pre class=\"language-bash\"><code>ssh pi@192.168.2.2</code></pre>\n<p>连接之后将会要求输入密码，默认情况下，密码一般是&ldquo;respberry&rdquo;.如果你修改了默认密码，请输入你的新密码。这样，您将登入了树莓派系统。</p>\n<p>如果你在一台PC，还需要附加的一个步骤。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201405/20/161616n7ch4ucc3op9z3ch.jpg\" alt=\"\" /></p>\n<p>下载并运行<a class=\"ext\" href=\"http://www.chiark.greenend.org.uk/~sgtatham/putty/\" target=\"_blank\" rel=\"external nofollow noopener\">PuTTY</a>或者其它支持Windows系统的SSH客户端。输入你的IP地址在如上截图中的输入框中。保持默认端口为22不变。然后安心回车，PuTTY将会提示你输入用户名和密码。输入之后，就可以开始在你的树莓派里远程工作了。</p>\n<h3>2) 使用远程桌面连接到你的树莓派</h3>\n<p>使用SSH去从命令行远程控制你的Pi是极好的，但是如果你想通过图形界面去管理你的Pi怎么办呢？幸运的是MAC和PC都已经内建了这种方式。</p>\n<p>在你的树莓派中的命令行（是的，你可以通过SSH来操作），输入：</p>\n<pre class=\"language-bash\"><code>sudo apt-get install xrdp</code></pre>\n<p>xdrp是一种在可以在后台运行的计算机<a class=\"ext\" href=\"http://en.wikipedia.org/wiki/Daemon_(computing)\" target=\"_blank\" rel=\"external nofollow noopener\">守护进程</a>，并支持Mac和PC上的微软远程桌面客户端。当树莓派中安装好xrdp之后，你的MAC或者PC就可以通过客户端登录到树莓派中了。</p>\n<p>找到你的电脑中一个叫远程桌面的客户端。它本身并不是隐藏起来的，但没有放到应用程序的文件夹中。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201405/20/161618no4g3hpsp6p3akwe.png\" alt=\"\" width=\"700\" /></p>\n<p>出现上述提示时输入你的IP地址。接下来会弹出xrdp窗口，提示你输入用户名和密码。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201405/20/161621ffx0l2f05752e0ry.png\" alt=\"\" width=\"700\" /></p>\n<p>如果进展顺利，你的树莓派桌面就会在你的电脑屏幕上的窗口里面显示出来了。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201405/20/161629lhogr9rg19bzk1yh.png\" alt=\"\" width=\"700\" /></p>\n<h3>3) 给你的树莓派设置一个家庭网络的静态地址</h3>\n<p>在之前（第一步）找到的树莓派的IP地址现在是可以连接的，但是不能保证你的路由器会一直给你的树莓派分配一个永久固定的IP地址。这意味着在你网段中的其它计算机无法知道树莓派被分配了什么IP地址。那么如何来给树莓派分配静态的IP地址而不是每隔几天就在树莓派上执行&ldquo;sudo ifconfig&rdquo;命令，或者糟糕到每隔几个小时一次？</p>\n<p>显然，我们要从&ldquo;ifconfig&rdquo;命令开始，所以输入：</p>\n<pre class=\"language-bash\"><code>sudo ifconfig</code></pre>\n<p>拿出笔和纸做准备，记录下面的三个IP地址。（#后面的代码是注释，实际不会显示.）：</p>\n<pre class=\"language-bash\"><code>inet addr: 192.168.2.2 # 树莓派的当前IP地址\nBcast: 192.168.0.255 # 地址广播范围\nMask: 255.255.255.0 # 子网掩码</code></pre>\n<p>此外，你还需要知道另外2个信息。请输入以下命令获取网关和目的地址（译注：实际上我们只需要知道默认网关的IP就行了）。</p>\n<pre class=\"language-bash\"><code>netstat -nr</code></pre>\n<p>接下来，去查看你路由器上的配置。（如何进行这一步主要取决于你用什么路由器，所以还是查看下说明书吧）找出你的设备通过DHCP设置了哪段ip地址。有些地址是不能使用的，因为DHCP协议中已经分配使用了。所以要选择没有被使用的，例如，192.168.2.2。你的路由器也许可以让你保留一个未使用的IP地址，固定分配给像树莓派这样的本地设备。（如果你的路由器是Belkin，那大概就是这样）如果是这样的，那就不用看下面的部分了。</p>\n<p>如果不能固定分配，你需要让树莓派知道它的新的ip地址。我们通过nano编辑器来编辑树莓派中相关的文件。</p>\n<pre class=\"language-bash\"><code>sudo nano /etc/network/interfaces</code></pre>\n<p>将&ldquo;iface eth0 inet dhcp&rdquo;这一段修改成&ldquo;iface eth0 inet static&rdquo;，也就是将动态获取IP修改成静态IP。</p>\n<p>接下来输入如下，将下列X取代成你之前所记下来的地址信息。最上面的地址是我们将要把DHCP中没有使用的IP地址分配作为树莓派的静态IP地址。</p>\n<pre class=\"language-bash\"><code>address 192.168.2.2\nnetmask XXX.XXX.XXX.X\nnetwork XXX.XXX.X.X\nbroadcast XXX.XXX.X.X\ngateway XXX.XXX.X.X</code></pre>\n<p>使用&ldquo;sudo reboot&rdquo;的命令重启树莓派系统后，在命令行再次输入&ldquo;ifconfig&rdquo;，我们刚刚新设置的静态IP设置就会呈现。</p>\n<h3>4) 端口转发至树莓派</h3>\n<p>一些树莓派程序可能需要你转发一个特定的网络端口号到你的树莓派。端口是信息在互联网传送的虚拟路径。有时候你需要转发一个端口来使像树莓派这样计算机可以被互联网访问，即使它在路由器后面。这种情况有点像拨电话分机号一样。</p>\n<p>端口转发能够用于像<a class=\"ext\" href=\"http://raspberrywebserver.com/serveradmin/get-your-raspberry-pi-web-site-on-line.html\" target=\"_blank\" rel=\"external nofollow noopener\">树莓派网页服务器</a>，树莓派的VOIP或者简单的点对点下载。有超过65000个端口可供选择，你可以分配不同的端口给不同的树莓派项目用来进行通信。</p>\n<p>某些端口默认情况下代表着特定的应用。例如80端口默认为HTML页面，21端口默认代表FTP传输，1194端口默认用于设置VPN服务器。所以大多数情况下，你应该选择默认的端口提供服务。</p>\n<p>设置端口转发的方法完全取决于你的路由器，于是很难创建一个固定的关于设置<a class=\"ext\" href=\"http://portforward.com/help/portforwarding.htm\" target=\"_blank\" rel=\"external nofollow noopener\">端口转发</a>教程。你只能阅读你路由器的说明书来定义端口和转发了。</p>\n<p>下面链接了几个主流路由器厂商的端口转发教程。</p>\n<ul>\n<li><a class=\"ext\" href=\"http://www.belkin.com/us/support-article?articleNum=10790\" target=\"_blank\" rel=\"external nofollow noopener\">Belkin</a></li>\n<li><a class=\"ext\" href=\"http://kb.netgear.com/app/answers/detail/a_id/24046/~/how-do-i-configure-port-forwarding-on-routers-with-the-netgear-genie-interface%3F\" target=\"_blank\" rel=\"external nofollow noopener\">Netgear</a></li>\n<li><a class=\"ext\" href=\"http://kb.linksys.com/Linksys/ukp.aspx?pid=80&amp;vw=1&amp;articleid=21470\" target=\"_blank\" rel=\"external nofollow noopener\">Linksys</a></li>\n</ul>\n<h3>5) 在互联网上给你的树莓派设置静态地址</h3>\n<p>再次声明，如果你的运营商给了你一个静态IP，你就不需要看这个部分了。</p>\n<p>我们已经给树莓派设置了一个静态的内部IP地址，这意味着在你的内部网络中总是能够连到你的树莓派。但是如果程序需要树莓派连接到互联网呢？如果你想要在你的树莓派上搭建一个Web服务器，在你网络之外的人们需要知道你的树莓派在哪里，这意味着我们要来设置一个像静态IP的公开地址。</p>\n<p>我之所以说&ldquo;看起来像&rdquo;是因为我们已经设置了一个伪静态IP地址。通常，你所在的运营商将会不断变换分配给你的地址。所以每一次有人连接到你的树莓派时，我们就要写个脚本说：&ldquo;树莓派已经搬家了，让我带你去新的地址吧！ &rdquo;</p>\n<p>我们可以通过<a class=\"ext\" href=\"http://en.wikipedia.org/wiki/Dynamic_DNS\" target=\"_blank\" rel=\"external nofollow noopener\">DDNS</a>（即动态DNS）来实现，它实时维护名字解析，并通过&nbsp;<a class=\"ext\" href=\"http://sourceforge.net/p/ddclient/wiki/Home/\" target=\"_blank\" rel=\"external nofollow noopener\">DDClient</a>&nbsp;程序通知DDNS修改指向到你的树莓派。</p>\n<p>首先需要注册一个类似<a class=\"ext\" href=\"https://www.dnsdynamic.org/\" target=\"_blank\" rel=\"external nofollow noopener\">DNS Dynamic</a>的动态主机服务。根据指示并创建新的名称服务器类似Yourserver.dnsdynamic.com.</p>\n<p>接下来进入树莓派中的命令行，使用下面命令来安装DDNS客户端：</p>\n<pre class=\"language-bash\"><code>sudo apt-get install ddclient</code></pre>\n<p>我们需要编辑DDNS客户端配置，使用新的名称服务器：</p>\n<pre class=\"language-bash\"><code>sudo nano /etc/ddclient/ddclient.conf</code></pre>\n<p>每种服务配置都会有略微的不同，但是DDNS的网站会告诉你需要在配置文件中修改的内容。一个标准的DDNS配置，举个栗子，如&nbsp;<a class=\"ext\" href=\"http://dnsdynamic.blog.com/2011/06/26/using-ddclient-with-dnsdynamic/\" target=\"_blank\" rel=\"external nofollow noopener\">DDNS配置</a>，可以直接复制粘贴。</p>\n<p>你的运营商不会因为你的这个文件而停止更新给你分配的IP地址，因此我们在脚本的最前面设置一个守护进程执行的频度，以确保及时检查IP地址是否已经更改。</p>\n<pre class=\"language-bash\"><code>daemon=600\n# check every 600 seconds</code></pre>\n<p>这里设置的是每10分钟检查一次，这是一个不错的选择。如果你设置成每秒钟检查一次，你的动态服务器恐怕不干，因为这样对它来说是一种轰炸。记得按下ctrl+x保存并退出配置文件。</p>\n<p>接下来，输入：</p>\n<pre class=\"language-bash\"><code>ddclient</code></pre>\n<p>如上输入程序的名称就可以运行了。当你的树莓派开着的时候就会持续运行了。如果你重启树莓派，键入 &ldquo;ddclient&rdquo;就会重新开始运行了。</p>\n<p>现在你的树莓派已经被装修一番，可以迎接更高级的教程了，请从中获得更多乐趣吧！</p>\n<h3>关于作者：</h3>\n<p>本文的美女作者：<a class=\"ext\" href=\"http://readwrite.com/author/lauren-orsini#awesm=%7EoEMljxDCpMKnXj\" target=\"_blank\" rel=\"external nofollow noopener\">Lauren Orsini</a>是一个专业记者、业余程序员和全职宅女，她住在饱受交通之苦的Arlington, VA。</p>\n<p class=\"article_img\"><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"https://img.linux.net.cn/data/attachment/album/201405/20/161632iaa8h7z8eizbe6ae.jpg\" alt=\"Lauren Orsini\" /></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\"><em>Lauren Orsini</em></p>\n<p class=\"article_img_desc\" style=\"text-align: center;\">&nbsp;</p>\n<p class=\"article_img_desc\" style=\"text-align: center;\">&nbsp;</p>\n<p class=\"article_img_desc\" style=\"text-align: center;\">&nbsp;</p>\n<p class=\"article_img_desc\" style=\"text-align: center;\">&nbsp;</p>\n<hr />\n<p>via:&nbsp;<a class=\"ext\" href=\"http://readwrite.com/2014/04/09/raspberry-pi-projects-ssh-remote-desktop-static-ip-tutorial#feed=/hack&amp;awesm=%7EoB1b7zvteUQGOV\" target=\"_blank\" rel=\"external nofollow noopener\">http://readwrite.com/2014/04/09/raspberry-pi-projects-ssh-remote-desktop-static-ip-tutorial#feed=/hack&amp;awesm=~oB1b7zvteUQGOV</a></p>\n<p>译者：<a class=\"ext\" href=\"https://github.com/disylee\" target=\"_blank\" rel=\"external nofollow noopener\">disylee</a>&nbsp;校对：<a class=\"ext\" href=\"https://github.com/wxy\" target=\"_blank\" rel=\"external nofollow noopener\">wxy</a></p>\n<p>本文由&nbsp;<a class=\"ext\" href=\"https://github.com/LCTT/TranslateProject\" target=\"_blank\" rel=\"external nofollow noopener\">LCTT</a>&nbsp;原创翻译，<a href=\"https://linux.cn/article-3056-1.html\">Linux中国</a>&nbsp;荣誉推出</p>','2019-09-18 12:02:16','2019-09-18 12:02:16');
/*!40000 ALTER TABLE `articles_en` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `categories`
--

DROP TABLE IF EXISTS `categories`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `categories` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `parent_id` tinyint(3) unsigned NOT NULL DEFAULT 0 COMMENT '父级ID',
  `name` varchar(225) COLLATE utf8mb4_unicode_ci NOT NULL,
  `description` mediumtext COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '分类描述',
  `thumbnail` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '缩略图',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='categories table分类';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `categories`
--

LOCK TABLES `categories` WRITE;
/*!40000 ALTER TABLE `categories` DISABLE KEYS */;
INSERT INTO `categories` VALUES (1,0,'软件开发','soft的',NULL,'2019-06-25 12:11:21','2019-09-18 03:16:31',NULL),(2,0,'系统运维','系统运维',NULL,'2019-09-18 03:01:50','2019-09-18 03:01:50',NULL),(3,0,'树莓派','树莓派aaa',NULL,'2019-09-18 03:02:06','2019-09-18 07:25:42',NULL);
/*!40000 ALTER TABLE `categories` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `comments`
--

DROP TABLE IF EXISTS `comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `comments` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(8) NOT NULL DEFAULT 0,
  `article_id` int(11) NOT NULL DEFAULT 1,
  `nickname` varchar(128) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'guest nickname',
  `content` varchar(252) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'content',
  `origin` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'origin',
  `user_agent` varchar(252) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='comments table评论';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `comments`
--

LOCK TABLES `comments` WRITE;
/*!40000 ALTER TABLE `comments` DISABLE KEYS */;
/*!40000 ALTER TABLE `comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `facebook_users`
--

DROP TABLE IF EXISTS `facebook_users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `facebook_users` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `facebook_users`
--

LOCK TABLES `facebook_users` WRITE;
/*!40000 ALTER TABLE `facebook_users` DISABLE KEYS */;
/*!40000 ALTER TABLE `facebook_users` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `feedbacks`
--

DROP TABLE IF EXISTS `feedbacks`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `feedbacks` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `nickname` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL,
  `email` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL,
  `content` mediumtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `feedbacks`
--

LOCK TABLES `feedbacks` WRITE;
/*!40000 ALTER TABLE `feedbacks` DISABLE KEYS */;
INSERT INTO `feedbacks` VALUES (1,'qwewqewqeqw','dasdsadas@qq.com','dsdasdsa','2019-06-25 12:00:42','2019-06-25 12:00:42',NULL),(2,'xxx','luoxulx@live.com','xxx','2019-07-03 16:03:24','2019-07-03 16:03:24',NULL);
/*!40000 ALTER TABLE `feedbacks` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `files`
--

DROP TABLE IF EXISTS `files`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `files` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `path` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'filename',
  `original_name` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'original_name',
  `mime` varchar(64) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'mime',
  `size` varchar(32) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'size',
  `hash` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'real_path',
  `url` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'url',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=124 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `files`
--

LOCK TABLES `files` WRITE;
/*!40000 ALTER TABLE `files` DISABLE KEYS */;
INSERT INTO `files` VALUES (1,'thumbnail/2019/07/b37214a9b1a4e5ea6bff7b79639e3038.png','192015smcsfccss4snz6k7.jpg','image/jpeg','25.72KB','FohRg12Q2Pp5VtTav8n3zctOLnIM','https://net.lnmpa.top/thumbnail/2019/07/b37214a9b1a4e5ea6bff7b79639e3038.png-pic540','2019-07-02 03:23:41','2019-07-02 03:23:41'),(2,'thumbnail/2019/07/202da559941baf38f7e304e2c666c9f7.png','141321aj6vnwfv4xb8xcwn.png','image/png','98.76KB','Fm6CZHD49UIlRk_fpcI9RGB4bf92','https://net.lnmpa.top/thumbnail/2019/07/202da559941baf38f7e304e2c666c9f7.png-pic540','2019-07-02 03:27:32','2019-07-02 03:27:32'),(4,'editor/2019/07/a805ecc6d9efd0a31dc4e7f938fc0ee3.png','141321ekzaama1rpea00vl.png','image/png','26.37KB','FhF3FYmCEHUDBuZlh-PbGVcwYjy7','https://net.lnmpa.top/editor/2019/07/a805ecc6d9efd0a31dc4e7f938fc0ee3.png-pic540','2019-07-02 03:40:14','2019-07-02 03:40:14'),(5,'editor/2019/07/0c81e90d9d22086a1d8b8249164b370f.png','141321uhgza7g4pg72qqsu.png','image/png','60.99KB','FpNnebieserTlGA7aSmgIrw2CAtz','https://net.lnmpa.top/editor/2019/07/0c81e90d9d22086a1d8b8249164b370f.png-pic540','2019-07-02 03:40:31','2019-07-02 03:40:31'),(6,'editor/2019/07/7b37865f72d518d00cbaf6761b4def0d.png','141322qg55egdtj7gdggr5.png','image/png','57.13KB','FgJP330Sxqy7P9ZlCYIK7JVtMurj','https://net.lnmpa.top/editor/2019/07/7b37865f72d518d00cbaf6761b4def0d.png-pic540','2019-07-02 03:40:49','2019-07-02 03:40:49'),(7,'thumbnail/2019/07/133ff790dee7801419cc360fdf96e2b4.png','220346ldursooushwubsda.jpg','image/jpeg','31.23KB','Fnjw36vbLgoqSBIhEXN7Dz4Svm4d','https://net.lnmpa.top/thumbnail/2019/07/133ff790dee7801419cc360fdf96e2b4.png-pic540','2019-07-02 07:41:07','2019-07-02 07:41:07'),(8,'editor/2019/07/d42f14c444227ff1c7b9ea6ec677c9a7.png','163141ivbhs37f35gf57v0.jpg','image/jpeg','25.24KB','FvRfJCM_pdunc9esnNix9mN8LNDU','https://net.lnmpa.top/editor/2019/07/d42f14c444227ff1c7b9ea6ec677c9a7.png-pic540','2019-07-02 07:41:57','2019-07-02 07:41:57'),(9,'thumbnail/2019/07/70e3ce35d0f6db833c99959bb01ed167.png','101312i1hhzhgglgm8zzs7.jpg','image/jpeg','29.60KB','FsPBO-CkRmM1XRHIK1oqRlCc2J-f','https://net.lnmpa.top/thumbnail/2019/07/70e3ce35d0f6db833c99959bb01ed167.png-pic540','2019-07-02 07:47:56','2019-07-02 07:47:56'),(10,'thumbnail/2019/07/1864286e290cdabdac4c478d05125be7.png','111746cdzt3ejolwwdkgmd.jpg','image/jpeg','108.11KB','FmPO4kzDxryQPh4DwohJS1BDBgmd','https://net.lnmpa.top/thumbnail/2019/07/1864286e290cdabdac4c478d05125be7.png-pic540','2019-07-02 07:51:25','2019-07-02 07:51:25'),(11,'editor/2019/07/d43c62a2a8db686f3d34c9e086a3b7bf.png','111749uxlh3olmreqrtqzo.jpg','image/jpeg','186.71KB','FrmlznbcCuA7lH_s08jYoV4CY7_Z','https://net.lnmpa.top/editor/2019/07/d43c62a2a8db686f3d34c9e086a3b7bf.png-pic540','2019-07-02 07:52:26','2019-07-02 07:52:26'),(12,'editor/2019/07/4112373123ec4c3df60bce7995be87d6.png','111751eat71o9tq7c4a9c7.jpg','image/jpeg','202.64KB','FhIhizQIqgdHzeCKOkH8WLd_qxCg','https://net.lnmpa.top/editor/2019/07/4112373123ec4c3df60bce7995be87d6.png-pic540','2019-07-02 07:52:46','2019-07-02 07:52:46'),(13,'editor/2019/07/443a75f70406c30e2d39e6eb9f3e58a3.png','111753thhwtpbi97jbjbd2.jpg','image/jpeg','60.19KB','FuyiqbzETckIBq1dU0wzKqUY_e2M','https://net.lnmpa.top/editor/2019/07/443a75f70406c30e2d39e6eb9f3e58a3.png-pic540','2019-07-02 07:53:29','2019-07-02 07:53:29'),(14,'editor/2019/07/d301b36629c7c1e01f943be256ec1e43.png','111755cx63xde2469www46.jpg','image/jpeg','57.65KB','Flh8My7vTii-mfraD-0nErQfwv30','https://net.lnmpa.top/editor/2019/07/d301b36629c7c1e01f943be256ec1e43.png-pic540','2019-07-02 07:53:51','2019-07-02 07:53:51'),(15,'editor/2019/07/9fb6d83c7c09daeffd250e8c0ac94955.png','111758krg1h7441tftv76h.jpg','image/jpeg','214.12KB','FsmprGx-Vm0yVE2zN5LiyBI7xziK','https://net.lnmpa.top/editor/2019/07/9fb6d83c7c09daeffd250e8c0ac94955.png-pic540','2019-07-02 07:54:20','2019-07-02 07:54:20'),(16,'editor/2019/07/4447b23ef5c92c941e09d76026b66233.png','111800n35r667o83y4z7u5.jpg','image/jpeg','182.94KB','FtTMpSuxj-Uwf2gGxq7cs6N17ysc','https://net.lnmpa.top/editor/2019/07/4447b23ef5c92c941e09d76026b66233.png-pic540','2019-07-02 07:54:47','2019-07-02 07:54:47'),(17,'thumbnail/2019/07/c53e7cb873f27c66b30289137276490a.png','141228xgzr62odiiovo25o.png','image/png','86.58KB','FipDFl3TQI_0LzymPoyYLwjpAHOH','https://net.lnmpa.top/thumbnail/2019/07/c53e7cb873f27c66b30289137276490a.png-pic540','2019-07-03 05:42:32','2019-07-03 05:42:32'),(18,'editor/2019/07/a108723d6d278dcd24c2b7eb56b6058c.png','141227i9pyffpx11yh9ymf.png','image/png','84.88KB','FjmfXmU0SBgD6v_VT5YdSRFdABTu','https://net.lnmpa.top/editor/2019/07/a108723d6d278dcd24c2b7eb56b6058c.png-pic540','2019-07-03 05:44:43','2019-07-03 05:44:43'),(19,'editor/2019/07/eb03e61a8921d4f6e4141ecafea6a97b.png','141227odqyuhu232tkh3mk.png','image/png','127.06KB','FkBmtd9XaJblBat2IBs2p5wH5VrJ','https://net.lnmpa.top/editor/2019/07/eb03e61a8921d4f6e4141ecafea6a97b.png-pic540','2019-07-03 05:45:10','2019-07-03 05:45:10'),(20,'editor/2019/07/6e3dc520689bcb2971d49f72fb5427cc.png','141227hdvtaug8a13888f8.png','image/png','79.00KB','FgvrD6WPpA7FehW1owCQl-dE-N_v','https://net.lnmpa.top/editor/2019/07/6e3dc520689bcb2971d49f72fb5427cc.png-pic540','2019-07-03 05:45:38','2019-07-03 05:45:38'),(21,'editor/2019/07/922799bf3c24bf8076d15a6508379658.png','141227tl3sbmy5bm5mv0no.png','image/png','76.01KB','Fm1Mpdx_gF5y59MZLRwL0LwhIp9R','https://net.lnmpa.top/editor/2019/07/922799bf3c24bf8076d15a6508379658.png-pic540','2019-07-03 05:46:49','2019-07-03 05:46:49'),(22,'editor/2019/07/b2b14c4bcb2d2938751354f7078a9d64.png','141228qiivbik98iu88igk.png','image/png','77.83KB','Fqv8PijCbu36QYNFtxSA_KTHdfuH','https://net.lnmpa.top/editor/2019/07/b2b14c4bcb2d2938751354f7078a9d64.png-pic540','2019-07-03 05:47:11','2019-07-03 05:47:11'),(23,'editor/2019/07/03dbc86858d3798f02e23a3a7a8fe032.png','141228ddg4xfztp7iqht84.png','image/png','81.11KB','FtSbGsxWFwi5n7y70CfCuJPyQChU','https://net.lnmpa.top/editor/2019/07/03dbc86858d3798f02e23a3a7a8fe032.png-pic540','2019-07-03 05:47:30','2019-07-03 05:47:30'),(24,'editor/2019/07/f39d29c9af8ff98171f32218ca815144.png','141228e0h0o1x8zfva8yfx.png','image/png','103.33KB','FgKyF01OLo-8Y-UWFe3asPXAs1cd','https://net.lnmpa.top/editor/2019/07/f39d29c9af8ff98171f32218ca815144.png-pic540','2019-07-03 05:47:50','2019-07-03 05:47:50'),(25,'thumbnail/2019/07/55511905c7cf320d4caeb2df23852575.png','160959n2fqwzyzffw2fwyy.png','image/png','8.86KB','FuLxQPdiEkhCdM1SkHQeJMNyhbHH','https://net.lnmpa.top/thumbnail/2019/07/55511905c7cf320d4caeb2df23852575.png-pic540','2019-07-03 05:50:33','2019-07-03 05:50:33'),(26,'editor/2019/07/06b37b312694f3266cf96f478e98fde7.png','163711pe39sgfc35t5zf3m.jpg','image/jpeg','29.40KB','Fi6HEhBB6ubJGWQFnhrFIIN5A4Xq','https://net.lnmpa.top/editor/2019/07/06b37b312694f3266cf96f478e98fde7.png-pic540','2019-07-03 05:50:59','2019-07-03 05:50:59'),(27,'editor/2019/07/7340f45b266619e9fcaefa9cf763794a.png','163711kucez7lauk4cfyy2.jpg','image/jpeg','35.97KB','Fssj2K9iO2ZZndqbTW-y2pVfW1B1','https://net.lnmpa.top/editor/2019/07/7340f45b266619e9fcaefa9cf763794a.png-pic540','2019-07-03 05:51:17','2019-07-03 05:51:17'),(28,'editor/2019/07/89750d8e432751be204aad6996a50a55.png','163712k5zqap7l8npzpqvn.jpg','image/jpeg','53.70KB','FhYLIF6-SljVfReLW_zsAofd_QR7','https://net.lnmpa.top/editor/2019/07/89750d8e432751be204aad6996a50a55.png-pic540','2019-07-03 05:51:35','2019-07-03 05:51:35'),(29,'editor/2019/07/21fb8c0794c0acada248e60f575842bc.png','163712db3z34rzwwkpn3c6.jpg','image/jpeg','135.17KB','FvNsbPineaPvd8h0gxSVs3CMg_5o','https://net.lnmpa.top/editor/2019/07/21fb8c0794c0acada248e60f575842bc.png-pic540','2019-07-03 05:51:53','2019-07-03 05:51:53'),(30,'thumbnail/2019/07/7abff346aa380e2a99eb710b32dc53fe.png','154754nzysbsgyiryblyyb.jpg','image/jpeg','56.10KB','Fhz1bYUCV50AIjBMTjAkDym7QFlD','https://net.lnmpa.top/thumbnail/2019/07/7abff346aa380e2a99eb710b32dc53fe.png-pic540','2019-07-03 05:54:44','2019-07-03 05:54:44'),(31,'thumbnail/2019/07/625c3d2231c69c008fa8d89d4f980b7d.png','094757xe80jmo9ngujs9st.jpg','image/jpeg','63.78KB','FlEDrHTpYc1VzxSJUCkZ0rLaUEJC','https://net.lnmpa.top/thumbnail/2019/07/625c3d2231c69c008fa8d89d4f980b7d.png-pic540','2019-07-03 06:00:20','2019-07-03 06:00:20'),(32,'editor/2019/07/11b1d9650c8628430e6382b2642ecdd7.png','203240p0qv0rihyq88n7yr.png','image/png','20.44KB','Fk9SdyNR40BatfEAp_QWapp8hxvg','https://net.lnmpa.top/editor/2019/07/11b1d9650c8628430e6382b2642ecdd7.png-pic540','2019-07-03 06:00:55','2019-07-03 06:00:55'),(33,'editor/2019/07/81b7b421552eeb0e17931b1eda90839f.png','203241frkxyvkiqg2yvdwg.png','image/png','104.42KB','Fn8bSFxG0THIyD5rgmcTBFlpnuyP','https://net.lnmpa.top/editor/2019/07/81b7b421552eeb0e17931b1eda90839f.png-pic540','2019-07-03 06:01:13','2019-07-03 06:01:13'),(34,'editor/2019/07/7ee4b4f896d5df3ab2e6ddb70f3c8f3a.png','203242ucn1n8z1inbsru6x.png','image/png','77.58KB','FoQvqjDciQi2dIgE6KrDk5flzJ53','https://net.lnmpa.top/editor/2019/07/7ee4b4f896d5df3ab2e6ddb70f3c8f3a.png-pic540','2019-07-03 06:01:42','2019-07-03 06:01:42'),(35,'editor/2019/07/97d0796af585371e05f9c4bfc907423e.png','203243xmuhhdakejn85xnn.png','image/png','42.34KB','FoW732aicz3uvBY1pAuI1DOzIKp1','https://net.lnmpa.top/editor/2019/07/97d0796af585371e05f9c4bfc907423e.png-pic540','2019-07-03 06:01:59','2019-07-03 06:01:59'),(36,'editor/2019/07/93f276589619336bb89c9923167570d8.png','203243gl40yyj84oyjlc40.png','image/png','50.90KB','FkLX_5Ftp9ls7aIGNle6JBNOqAft','https://net.lnmpa.top/editor/2019/07/93f276589619336bb89c9923167570d8.png-pic540','2019-07-03 06:02:18','2019-07-03 06:02:18'),(37,'editor/2019/07/5fafe1e8c27e1d12d6be5bc18feeb395.png','203246rf6vjr60xwwxt9y6.gif','image/gif','441.98KB','FnY0Mwyc8Vf_TYSXGZUE0KeS0AoQ','https://net.lnmpa.top/editor/2019/07/5fafe1e8c27e1d12d6be5bc18feeb395.png-pic540','2019-07-03 06:02:48','2019-07-03 06:02:48'),(38,'editor/2019/07/a7c77ae9eea31f179ee6242afe404041.png','203323yi949casy9xcvzi9.png','image/png','26.25KB','Fng5reuPMfsUBiplYObI9625XbbR','https://net.lnmpa.top/editor/2019/07/a7c77ae9eea31f179ee6242afe404041.png-pic540','2019-07-03 06:04:23','2019-07-03 06:04:23'),(39,'thumbnail/2019/07/02a63cd40341d100b0abf2b0147b36df.jpg','095736tr44td00gzturdg4.jpg','image/jpeg','44.97KB','FvcSizgjDHGtxK7h6yd4D_OJ2q_P','https://net.lnmpa.top/thumbnail/2019/07/02a63cd40341d100b0abf2b0147b36df.jpg-pic540','2019-07-07 07:54:18','2019-07-07 07:54:18'),(40,'editor/2019/07/5f0a0e1a763c3ac43f7a91115822d2c2.png','095736mn9n7820slu99dl1.png','image/png','8.38KB','FidjSwZiszs_7hua0DUKiutCB2ZX','https://net.lnmpa.top/editor/2019/07/5f0a0e1a763c3ac43f7a91115822d2c2.png-pic540','2019-07-07 07:54:53','2019-07-07 07:54:53'),(41,'thumbnail/2019/07/3797f385bb91a88f4ef1c7b0ebce3476.png','121019c2so2ffvxjuo84ms.png','image/png','138.64KB','FnbXano978LjInaG3WBw-0Frfu1A','https://net.lnmpa.top/thumbnail/2019/07/3797f385bb91a88f4ef1c7b0ebce3476.png-pic540','2019-07-07 07:56:29','2019-07-07 07:56:29'),(42,'editor/2019/07/c7a39c5307cf8b0da2f921350b4c589e.gif','121019izgn5gg3hgtd9dyd.gif','image/gif','96.44KB','FszGLv6kLlnRuBwaUxTClvcL7TnM','https://net.lnmpa.top/editor/2019/07/c7a39c5307cf8b0da2f921350b4c589e.gif-pic540','2019-07-07 07:56:53','2019-07-07 07:56:53'),(43,'thumbnail/2019/07/94d97bec8b09eb252a27eee1a6fa38a1.png','232617lzwwouyodmkvaulq.png','image/png','215.23KB','Fm8UU3woM5X7KfWHJJuEniPLY_np','https://net.lnmpa.top/thumbnail/2019/07/94d97bec8b09eb252a27eee1a6fa38a1.png-pic540','2019-07-07 08:03:47','2019-07-07 08:03:47'),(44,'thumbnail/2019/07/b77db2cd5804ecbce3ea60fcc471640b.jpg','184156reu5mrm4k874k8xu.jpg','image/jpeg','26.17KB','FspsyzryGhe5AAywRl10rETvywkH','https://net.lnmpa.top/thumbnail/2019/07/b77db2cd5804ecbce3ea60fcc471640b.jpg-pic540','2019-07-07 08:06:17','2019-07-07 08:06:17'),(45,'editor/2019/07/58d8281de558fc969613f478a3f7c141.jpg','184158jhgfdpsngh2enk7s.jpg','image/jpeg','50.12KB','Fo19I1GTmqhNyAYdgix7P8SB9vSF','https://net.lnmpa.top/editor/2019/07/58d8281de558fc969613f478a3f7c141.jpg-pic540','2019-07-07 08:06:38','2019-07-07 08:06:38'),(46,'thumbnail/2019/07/bf35698fe4ad5fd4902a96e4cf53c23f.png','110854avvpvv9lp6j9lj6g.png','image/png','113.95KB','FivJL9iJl-fV-LhNO6W0rJsvGJzR','https://net.lnmpa.top/thumbnail/2019/07/bf35698fe4ad5fd4902a96e4cf53c23f.png-pic540','2019-07-07 08:08:06','2019-07-07 08:08:06'),(47,'editor/2019/07/28f27645ea7cdf3d8d4f62b688b61aad.jpg','110608bckc17wljkr7kzqr.jpg','image/jpeg','81.45KB','FvGOUVWUCtwbI6l5mYfNtptBJukN','https://net.lnmpa.top/editor/2019/07/28f27645ea7cdf3d8d4f62b688b61aad.jpg-pic540','2019-07-07 08:09:05','2019-07-07 08:09:05'),(48,'editor/2019/07/bed03c043fb7f3ec871bf983af6006b4.jpg','110608qdvsbojvuj54voxo.jpg','image/jpeg','90.95KB','FmQU9qlj_Jq17uYYPlceIcTZT5JZ','https://net.lnmpa.top/editor/2019/07/bed03c043fb7f3ec871bf983af6006b4.jpg-pic540','2019-07-07 08:09:22','2019-07-07 08:09:22'),(49,'editor/2019/07/2fdc623767b919888880d689156313bd.jpg','110608tri6ib6f0ib0jopo.jpg','image/jpeg','48.97KB','FkH2nFTBurnV8cji4livO722hTQ_','https://net.lnmpa.top/editor/2019/07/2fdc623767b919888880d689156313bd.jpg-pic540','2019-07-07 08:09:36','2019-07-07 08:09:36'),(50,'editor/2019/07/d3f87a5bc044635c55675b1146374383.jpg','110609ey9wlv6nnx6te9yx.jpg','image/jpeg','59.66KB','FjA6GOZHY3aUIiARqT-xZT5oA7k3','https://net.lnmpa.top/editor/2019/07/d3f87a5bc044635c55675b1146374383.jpg-pic540','2019-07-07 08:09:49','2019-07-07 08:09:49'),(51,'editor/2019/07/9f05368a531f744f3c1a7f58dc2f9904.jpg','110609jwwh0445f0hmmo3m.jpg','image/jpeg','18.20KB','FtVaEK9dJtD2lBOgdWVRAiskt_SC','https://net.lnmpa.top/editor/2019/07/9f05368a531f744f3c1a7f58dc2f9904.jpg-pic540','2019-07-07 08:10:00','2019-07-07 08:10:00'),(52,'editor/2019/07/9f029c722f3a0d36df9c6d743c2d3a14.jpg','110609ps3b1gboov1rovrk.jpg','image/jpeg','86.38KB','FispXn-ARty4EZoILNl6A7kGNGTQ','https://net.lnmpa.top/editor/2019/07/9f029c722f3a0d36df9c6d743c2d3a14.jpg-pic540','2019-07-07 08:10:17','2019-07-07 08:10:17'),(53,'editor/2019/07/08e0ce3bf9c65b1997e7d59295b36eb7.jpg','110609wcxrsrrpprhtbv4v.jpg','image/jpeg','71.80KB','Ftu3GWNDnfEeqqOz6l3MVP42Gu_Z','https://net.lnmpa.top/editor/2019/07/08e0ce3bf9c65b1997e7d59295b36eb7.jpg-pic540','2019-07-07 08:10:33','2019-07-07 08:10:33'),(54,'editor/2019/07/9bebbd244fc67be13d600d70358824d7.jpg','110609r8vx112j18vckz2k.jpg','image/jpeg','66.52KB','FijCXp-wXtoa5dREBH1NHpKyjVjX','https://net.lnmpa.top/editor/2019/07/9bebbd244fc67be13d600d70358824d7.jpg-pic540','2019-07-07 08:10:46','2019-07-07 08:10:46'),(55,'editor/2019/07/4867f066d63be4eb48e329ad778b070c.jpg','110609xqlz03686dra8929.jpg','image/jpeg','18.20KB','Furu9ErRPxEjoCECTE0onUe0uy2o','https://net.lnmpa.top/editor/2019/07/4867f066d63be4eb48e329ad778b070c.jpg-pic540','2019-07-07 08:11:03','2019-07-07 08:11:03'),(56,'editor/2019/07/d22d79852b2fc2e7787ef6feb206de91.jpg','110609ofvlt57gx344f18f.jpg','image/jpeg','29.04KB','FkqyXGQqbDDZcbOdxCRqwtfnfYVU','https://net.lnmpa.top/editor/2019/07/d22d79852b2fc2e7787ef6feb206de91.jpg-pic540','2019-07-07 08:11:18','2019-07-07 08:11:18'),(57,'thumbnail/2019/07/0c457e49a43f27dfe194c5b2f10a3797.png','152623j1878o821cq0mzfa.png','image/png','14.13KB','Fi3h0w-W16mHO3x0JbxRZxFQFDa8','https://net.lnmpa.top/thumbnail/2019/07/0c457e49a43f27dfe194c5b2f10a3797.png-pic540','2019-07-07 08:14:56','2019-07-07 08:14:56'),(58,'editor/2019/07/a1ce481e5a8241f6d2ece375cd19b9e1.png','152150tt34z9c983444t09.png','image/png','1.88KB','Ftf8oLBdPN9dTwEfdRDb_I_P4aEW','https://net.lnmpa.top/editor/2019/07/a1ce481e5a8241f6d2ece375cd19b9e1.png-pic540','2019-07-07 08:15:21','2019-07-07 08:15:21'),(59,'editor/2019/07/11b3bb98b9ccf1ffadc485461d6df050.png','152150jzfg21f992z1y5gg.png','image/png','6.56KB','FsEvBh2B2KFt1BImeUsu96NQ9RPk','https://net.lnmpa.top/editor/2019/07/11b3bb98b9ccf1ffadc485461d6df050.png-pic540','2019-07-07 08:15:55','2019-07-07 08:15:55'),(60,'editor/2019/07/b162e2f0c267b53a5a92d2ea7fe0b7c1.png','152150jvmkcguurdrrjrxr.png','image/png','2.83KB','FkWavhImoUIymKCOECSwPsNL8foO','https://net.lnmpa.top/editor/2019/07/b162e2f0c267b53a5a92d2ea7fe0b7c1.png-pic540','2019-07-07 08:16:17','2019-07-07 08:16:17'),(61,'editor/2019/07/14ad59cdfff653925206e0a3cdc10388.png','152150eta0q8z1yh1vyj1q.png','image/png','2.13KB','FhXzATk9WXmdG7ZcKyurPzgySOEs','https://net.lnmpa.top/editor/2019/07/14ad59cdfff653925206e0a3cdc10388.png-pic540','2019-07-07 08:16:32','2019-07-07 08:16:32'),(62,'editor/2019/07/ef3c816f2062dbb01f0e71479b796cee.png','152150pxvtvxts2amrbbrr.png','image/png','2.35KB','Fj5JqGO6V4gtm6HIuzi21XwNjTWj','https://net.lnmpa.top/editor/2019/07/ef3c816f2062dbb01f0e71479b796cee.png-pic540','2019-07-07 08:16:47','2019-07-07 08:16:47'),(63,'editor/2019/07/8a758d8703e1fcfeb2749aee52ee1c81.png','152150hdofmhxo33za9ynz.png','image/png','2.23KB','Fix_lNJ9o6mLlNmCJ3EMvL0Zp8L4','https://net.lnmpa.top/editor/2019/07/8a758d8703e1fcfeb2749aee52ee1c81.png-pic540','2019-07-07 08:17:01','2019-07-07 08:17:01'),(64,'editor/2019/07/f6dd69945879d004b9c035661a18c6c5.png','152151ll5ot651p50t1jto.png','image/png','1.30KB','FvIiD9e7UciDqMqeC_kS10vBxdCn','https://net.lnmpa.top/editor/2019/07/f6dd69945879d004b9c035661a18c6c5.png-pic540','2019-07-07 08:17:15','2019-07-07 08:17:15'),(65,'editor/2019/07/259227adcc550b72980a7e3e863ce06d.png','152151bvtwzvvxux8sep7e.png','image/png','3.35KB','Fnjcn6-70dDpOFx9Yhq-1XWPRjCe','https://net.lnmpa.top/editor/2019/07/259227adcc550b72980a7e3e863ce06d.png-pic540','2019-07-07 08:17:29','2019-07-07 08:17:29'),(66,'thumbnail/2019/07/805218b7dde9831c42cccebf5d1fed89.png','144459khrh6o1s7m1kmjl4.png','image/png','38.08KB','FnCTedoXw_s6TWakpbj5eCZU1-Cx','https://net.lnmpa.top/thumbnail/2019/07/805218b7dde9831c42cccebf5d1fed89.png-pic540','2019-07-07 08:18:52','2019-07-07 08:18:52'),(67,'thumbnail/2019/07/56ac5217bd5df940b678198d0554cb62.jpg/2019/07/4e90bd1846e06e80f1be1a8ae8bba49c.jpg','133347yossqqn79yj4xdzr.jpg','image/jpeg','131.02KB','FoAG0Zx4NBgTBZNCP8bClj1y0FdS','https://net.lnmpa.top/thumbnail/2019/07/56ac5217bd5df940b678198d0554cb62.jpg/2019/07/4e90bd1846e06e80f1be1a8ae8bba49c.jpg-pic540','2019-07-07 08:21:32','2019-07-07 08:21:32'),(68,'editor/2019/07/a8b29359789e85fa248211c33ace7eb1.jpg','133349me6x7pa71tg7chy3.jpg','image/jpeg','77.25KB','Fh0GSIny9uFvM5MVc94H7jXeV-Ct','https://net.lnmpa.top/editor/2019/07/a8b29359789e85fa248211c33ace7eb1.jpg-pic540','2019-07-07 08:22:07','2019-07-07 08:22:07'),(69,'editor/2019/07/8241a7c82ada01b602e8cdda7e04e388.jpg','133352ht00nx7fnz07fvq0.jpg','image/jpeg','238.32KB','FpK6_mRdAI-EMzHxFqEZT1dEJeqd','https://net.lnmpa.top/editor/2019/07/8241a7c82ada01b602e8cdda7e04e388.jpg-pic540','2019-07-07 08:22:24','2019-07-07 08:22:24'),(70,'editor/2019/07/02c41cdaf395ee3353ea76444046222d.jpg','133354fypepynimipnnyyv.jpg','image/jpeg','38.70KB','Ft7TTTC2-xue-02r81rs28jMBoPs','https://net.lnmpa.top/editor/2019/07/02c41cdaf395ee3353ea76444046222d.jpg-pic540','2019-07-07 08:22:38','2019-07-07 08:22:38'),(71,'editor/2019/07/e9e7e94ed8ae1a03ad0956748d30083d.jpg','133357orc6q1voa44v65vg.jpg','image/jpeg','62.16KB','FglvXIOGZHS_CL6SqctH-DJdIVFB','https://net.lnmpa.top/editor/2019/07/e9e7e94ed8ae1a03ad0956748d30083d.jpg-pic540','2019-07-07 08:22:49','2019-07-07 08:22:49'),(72,'thumbnail/2019/07/31073ce5577ebcc7976998f49fa16620.jpg','012730cu0k0hhwcu5w5az0.jpg','image/jpeg','32.62KB','FsNwkivReHYEueFLd7m6UOf5TCem','https://net.lnmpa.top/thumbnail/2019/07/31073ce5577ebcc7976998f49fa16620.jpg-pic540','2019-07-07 08:25:04','2019-07-07 08:25:04'),(73,'editor/2019/07/a9942d05886dbae64927d6c7d6d2a64d.gif','203246rf6vjr60xwwxt9y6.gif','image/gif','441.98KB','FnY0Mwyc8Vf_TYSXGZUE0KeS0AoQ','https://net.lnmpa.top/editor/2019/07/a9942d05886dbae64927d6c7d6d2a64d.gif-pic540','2019-07-08 11:05:58','2019-07-08 11:05:58'),(74,'thumbnail/2019/07/337e1dc84736f2b5b2e2d4db47c4424f.jpeg','155116x0fq14fe0f909bde.jpeg','image/jpeg','28.15KB','FljBPGSPrYPzfW7NFvuxl1aUYicA','https://net.lnmpa.top/thumbnail/2019/07/337e1dc84736f2b5b2e2d4db47c4424f.jpeg-pic540','2019-07-27 13:12:38','2019-07-27 13:12:38'),(75,'thumbnail/2019/08/2b6738a1f994a8d4e71bd74f67d368e5.png','105319ogppbngtut4gbg4t.png','image/png','240.91KB','Fg5EycMeMpLOIQT1yavachteseoC','https://net.lnmpa.top/thumbnail/2019/08/2b6738a1f994a8d4e71bd74f67d368e5.png-pic540','2019-08-30 13:32:05','2019-08-30 13:32:05'),(76,'editor/2019/08/1c527a9c17d89cf055bd55c247385465.png','105241tvyztlylt98z8tj8.png','image/png','271.05KB','Fkk7HNnJAP0q1zb_CDEZ3v_HcU9P','https://net.lnmpa.top/editor/2019/08/1c527a9c17d89cf055bd55c247385465.png-pic540','2019-08-30 13:34:31','2019-08-30 13:34:31'),(77,'thumbnail/2019/08/8347c7ca66d9b872a3b0622f30784e09.png','140541jtce6zygk5bb6iyi.png','image/png','9.12KB','FuTtqvCsq69JEYKyxZjUCN1QdWMt','https://net.lnmpa.top/thumbnail/2019/08/8347c7ca66d9b872a3b0622f30784e09.png-water','2019-08-30 14:01:10','2019-08-30 14:01:10'),(78,'thumbnail/2019/09/fc68088d8059e624bc094a710f65aa2b.png','230554b0939pdp3l619zs9.png','image/png','116.34KB','FnosvwvhfVow6J7Qe5EmGsORlXcl','https://net.lnmpa.top/thumbnail/2019/09/fc68088d8059e624bc094a710f65aa2b.png-water','2019-09-17 12:10:36','2019-09-17 12:10:36'),(79,'thumbnail/2019/09/244247a1764ab477c474cb86f8623930.png/2019/09/4da133e6ff302546a9540a3246103de6.png/2019/09/f2f1b2852ce28763d63f5252eba607ab.png','152443ax2ruxfx1e04fr1g.png','image/png','85.49KB','FoZ7V2E_Lm0HQyWn3lrrkJaRa_jX','https://net.lnmpa.top/thumbnail/2019/09/244247a1764ab477c474cb86f8623930.png/2019/09/4da133e6ff302546a9540a3246103de6.png/2019/09/f2f1b2852ce28763d63f5252eba607ab.png-water','2019-09-17 12:16:52','2019-09-17 12:16:52'),(80,'editor/2019/09/6774a49e18a7eded8f90b4411a6bddba.png','152454j21c8f0lq1d8oaft.png','image/png','36.29KB','FhonDwrpSueT2c6t_75J0Wk4lc3J','https://net.lnmpa.top/editor/2019/09/6774a49e18a7eded8f90b4411a6bddba.png-water','2019-09-17 12:23:39','2019-09-17 12:23:39'),(81,'editor/2019/09/b73905d76d525e454da43ead90282011.png','152455nmtyrim99x29pgbv.png','image/png','209.93KB','Fjil0sag7qgU6TwnXD9LbzBrwL_2','https://net.lnmpa.top/editor/2019/09/b73905d76d525e454da43ead90282011.png-water','2019-09-17 12:24:40','2019-09-17 12:24:40'),(82,'editor/2019/09/497011d1d19ac1354446701cd6f64632.png','152457thz97ry9wvrlymva.png','image/png','66.75KB','Fh0F_Xz86pnDkieD0QPDGutaHc-Q','https://net.lnmpa.top/editor/2019/09/497011d1d19ac1354446701cd6f64632.png-water','2019-09-17 12:25:39','2019-09-17 12:25:39'),(83,'editor/2019/09/3acf9482aa2dbf8d9bd34d9393a4043e.png','152458ml32qjhp2l92pbbl.png','image/png','54.37KB','FnCOmCDNxNCm8TBEpdm_dnbchJ_F','https://net.lnmpa.top/editor/2019/09/3acf9482aa2dbf8d9bd34d9393a4043e.png-water','2019-09-17 12:26:33','2019-09-17 12:26:33'),(84,'editor/2019/09/1888e625c55e7a79c6584ee8673cb7a2.png','152459c0nnz0koew230f3f.png','image/png','62.09KB','FjMZYOkBJkGOe2PbzA_SiKQJz8lp','https://net.lnmpa.top/editor/2019/09/1888e625c55e7a79c6584ee8673cb7a2.png-water','2019-09-17 12:27:30','2019-09-17 12:27:30'),(85,'editor/2019/09/4ddc36a5da6a637851846c11fbb70cd9.png','152501o1e42jzudqqvatov.png','image/png','20.90KB','FnRj5d1CO37cpIrfk0njpz0G1fch','https://net.lnmpa.top/editor/2019/09/4ddc36a5da6a637851846c11fbb70cd9.png-water','2019-09-17 12:28:25','2019-09-17 12:28:25'),(86,'editor/2019/09/bd842ec9ce78690774b986eba3eeb3a8.png','152501xowhsrhs5os8o8cs.png','image/png','25.16KB','FiPTxxGzIbolfyHgwt9YMGAhAuJX','https://net.lnmpa.top/editor/2019/09/bd842ec9ce78690774b986eba3eeb3a8.png-water','2019-09-17 12:28:46','2019-09-17 12:28:46'),(87,'editor/2019/09/93db4d63fd7e514248c07289fe18cb73.png','152502i8oqqez9qelq89hd.png','image/png','36.49KB','Fglw26t02pQDbbO49Gmhz_yjJxFd','https://net.lnmpa.top/editor/2019/09/93db4d63fd7e514248c07289fe18cb73.png-water','2019-09-17 12:29:13','2019-09-17 12:29:13'),(88,'editor/2019/09/6c0165da97168b12f272cda37e9c9cd5.png','152503y10h36hwh3g6ug60.png','image/png','33.57KB','Fs-_Rg3KlwG-8AX5RAeqn_9FG-Qb','https://net.lnmpa.top/editor/2019/09/6c0165da97168b12f272cda37e9c9cd5.png-water','2019-09-17 12:29:55','2019-09-17 12:29:55'),(89,'editor/2019/09/2eab17dd3e9230409a52fa5477d874da.png','152505mqp4h0rn0qyrrlnu.png','image/png','49.53KB','Fnw7i719Xb5yxLFuAz4QnmKuQi8Z','https://net.lnmpa.top/editor/2019/09/2eab17dd3e9230409a52fa5477d874da.png-water','2019-09-17 12:30:40','2019-09-17 12:30:40'),(90,'editor/2019/09/33d290077a53b25972d2a83323642fea.png','152506c0bbw0xz39094vnb.png','image/png','36.35KB','FpXNkhMflgJ_EQuhLQh3nT-8MRZh','https://net.lnmpa.top/editor/2019/09/33d290077a53b25972d2a83323642fea.png-water','2019-09-17 12:31:09','2019-09-17 12:31:09'),(91,'editor/2019/09/d4e195ea986dbd3a3b76e22d965b7b07.png','152507n5fn0pfsnv3lvpv2.png','image/png','8.69KB','Fp0jevBr90wlAhAZq-vbBaay9KbF','https://net.lnmpa.top/editor/2019/09/d4e195ea986dbd3a3b76e22d965b7b07.png-water','2019-09-17 12:31:58','2019-09-17 12:31:58'),(92,'editor/2019/09/c3a1ab3cd1a607134773bc5b07bc5c40.png','152508my1owq1wi0o54i1m.png','image/png','41.54KB','FgdxJaypeb0O78rVyiT1xS2VV3mp','https://net.lnmpa.top/editor/2019/09/c3a1ab3cd1a607134773bc5b07bc5c40.png-water','2019-09-17 12:32:37','2019-09-17 12:32:37'),(93,'editor/2019/09/49e17724fc1d37013e4b706cf3ba8c7d.png','152509v9ontu9t93889yuc.png','image/png','22.72KB','Fu93K6xbFUstjgBnXaO2PVnlifKH','https://net.lnmpa.top/editor/2019/09/49e17724fc1d37013e4b706cf3ba8c7d.png-water','2019-09-17 12:33:12','2019-09-17 12:33:12'),(94,'editor/2019/09/ee15e6b3100d6ce78c6dd813771e3f86.png','152510wicskwnd92svw9ez.png','image/png','32.52KB','FrsT6dMjKsLFE9KLh7uobXXzxlfy','https://net.lnmpa.top/editor/2019/09/ee15e6b3100d6ce78c6dd813771e3f86.png-water','2019-09-17 12:33:37','2019-09-17 12:33:37'),(95,'editor/2019/09/762bc983d61feafb9881217d996a21b1.png','152511n7tjnt4jvhz070h7.png','image/png','45.44KB','FvjcE9xPLb-SIiPY3nFWhMZ2PSXo','https://net.lnmpa.top/editor/2019/09/762bc983d61feafb9881217d996a21b1.png-water','2019-09-17 12:34:09','2019-09-17 12:34:09'),(96,'thumbnail/2019/09/48cc99f3f3b7388cccfc270cea704143.jpg','114342biipk5cocizifaa5.jpg','image/jpeg','67.36KB','Flc-7kldD2apBvZ5m425ILHHx0B8','https://net.lnmpa.top/thumbnail/2019/09/48cc99f3f3b7388cccfc270cea704143.jpg-water','2019-09-18 02:24:32','2019-09-18 02:24:32'),(97,'editor/2019/09/49106ed85621c47b7a075cf94eff570c.jpg','115009xd59r5f2zz0o2kxq.jpg','image/jpeg','46.95KB','Fu3k6nwspflantpeDkZ4_hfK7T5E','https://net.lnmpa.top/editor/2019/09/49106ed85621c47b7a075cf94eff570c.jpg-water','2019-09-18 02:30:58','2019-09-18 02:30:58'),(98,'thumbnail/2019/09/9bfbe9f71f0a55066a5257fd79b52e1f.png','WechatIMG45.png','image/png','86.23KB','FoNIGGa-iZ6SFsrhmCnFfx0IEWwT','https://net.lnmpa.top/thumbnail/2019/09/9bfbe9f71f0a55066a5257fd79b52e1f.png-water','2019-09-18 02:35:13','2019-09-18 02:35:13'),(99,'thumbnail/2019/09/35a3d1e6ccd69b577be8daad4c669c6c.jpg','101618k8t6a7hll47azo3f.jpg','image/jpeg','117.94KB','FvH1VD2O4s29PsH5lg67NMQ3sY3K','https://net.lnmpa.top/thumbnail/2019/09/35a3d1e6ccd69b577be8daad4c669c6c.jpg-water','2019-09-18 03:03:50','2019-09-18 03:03:50'),(100,'thumbnail/2019/09/2696226434e46af98bd84e5d62c61a2a.png','154343w9aa0x7szu9iriws.png','image/png','26.98KB','FuJMsI-Motx7mM8oFgudJnglrhqM','https://net.lnmpa.top/thumbnail/2019/09/2696226434e46af98bd84e5d62c61a2a.png-water','2019-09-18 03:06:48','2019-09-18 03:06:48'),(101,'editor/2019/09/445d1c84c2d38e44e8f9d2723c020c71.png','154343l4gbbs373mg4qxs7.png','image/png','23.88KB','FvWswfYPcLrkXF79GuV4983g0Ww-','https://net.lnmpa.top/editor/2019/09/445d1c84c2d38e44e8f9d2723c020c71.png-water','2019-09-18 03:07:29','2019-09-18 03:07:29'),(102,'editor/2019/09/176f5efef4f9629367559613929a6b42.png','154344ympa0a1j191opa90.png','image/png','27.77KB','FjmgUN7Djn3J-amgcsTPW6PKaD6q','https://net.lnmpa.top/editor/2019/09/176f5efef4f9629367559613929a6b42.png-water','2019-09-18 03:07:57','2019-09-18 03:07:57'),(103,'editor/2019/09/0f3f6b15ce0667a39f717d545df9c805.png','154344kn3cg0hnwu33zkws.png','image/png','27.20KB','Fp8HTJtrV2a_7Vy-TvuL7LnyOD30','https://net.lnmpa.top/editor/2019/09/0f3f6b15ce0667a39f717d545df9c805.png-water','2019-09-18 03:08:18','2019-09-18 03:08:18'),(104,'thumbnail/2019/09/4d992dc4b38579c32bd1e99038b105d7.jpg','111842boi1fp4f1x3p4s6x.jpg','image/jpeg','101.42KB','Fmh_iAVbxRWZ8CbKie0c5W6g3fcZ','https://net.lnmpa.top/thumbnail/2019/09/4d992dc4b38579c32bd1e99038b105d7.jpg-water','2019-09-18 03:10:55','2019-09-18 03:10:55'),(105,'editor/2019/09/67d35fa596327e4af0767041f0127909.gif','111843it3v8za8j7j511i5.gif','image/gif','90.84KB','FgEVpTEvl2msOvKbqVlya6ZcR1uT','https://net.lnmpa.top/editor/2019/09/67d35fa596327e4af0767041f0127909.gif-water','2019-09-18 03:11:52','2019-09-18 03:11:52'),(106,'editor/2019/09/84376c0dd49d4c6c2fd6d8d9b101b2ae.gif','111843fgpzrrp8j10d3l4n.gif','image/gif','274.43KB','FtcIIidMpS68LJJfuU6B3GoRWRr6','https://net.lnmpa.top/editor/2019/09/84376c0dd49d4c6c2fd6d8d9b101b2ae.gif-water','2019-09-18 03:12:45','2019-09-18 03:12:45'),(107,'editor/2019/09/710ef46ca7f308b0bfea404dca768d82.gif','111844d0vl920tj3nvm320.gif','image/gif','13.06KB','FkTk7zFjhyv36jG90tjOxC27alm9','https://net.lnmpa.top/editor/2019/09/710ef46ca7f308b0bfea404dca768d82.gif-water','2019-09-18 03:13:26','2019-09-18 03:13:26'),(108,'editor/2019/09/9a9645692e28f00a4797cf16045d9751.gif','111844maellactexdhxt1h.gif','image/gif','32.50KB','FiRBNcXgrJjI9-gj8hTtddfRr21a','https://net.lnmpa.top/editor/2019/09/9a9645692e28f00a4797cf16045d9751.gif-water','2019-09-18 03:14:22','2019-09-18 03:14:22'),(109,'editor/2019/09/6c497300b73cc93b3ffca13c37f41ba8.gif','111845fkkdg9ndv1n24uje.gif','image/gif','8.55KB','Fh6nwCF24TiroCtwLFXOEmf8WTXu','https://net.lnmpa.top/editor/2019/09/6c497300b73cc93b3ffca13c37f41ba8.gif-water','2019-09-18 03:14:48','2019-09-18 03:14:48'),(110,'thumbnail/2019/09/927729b7a6043e2cd84beb9a7ed3d781.jpg','100113s38whaacwhavhvw4.jpg','image/jpeg','92.57KB','Fj0j-XZkXUVTENhHcxQskxqwjF4r','https://net.lnmpa.top/thumbnail/2019/09/927729b7a6043e2cd84beb9a7ed3d781.jpg-water','2019-09-18 03:17:59','2019-09-18 03:17:59'),(111,'editor/2019/09/223a909fb0a15233f79ae5515f03c2b9.jpg','100113ugvgcwerwkl1gwsy.jpg','image/jpeg','152.67KB','Fpm6H0V5qzDpvRUOZuYj2rWtMyg9','https://net.lnmpa.top/editor/2019/09/223a909fb0a15233f79ae5515f03c2b9.jpg-water','2019-09-18 03:18:35','2019-09-18 03:18:35'),(112,'editor/2019/09/da8fe2a7991824409a6d1e7c68e39f20.jpg','100114c83yx73z3f3jlak2.jpg','image/jpeg','160.00KB','FvtVvDsxZLhHlIdcmtOAVpqWY71n','https://net.lnmpa.top/editor/2019/09/da8fe2a7991824409a6d1e7c68e39f20.jpg-water','2019-09-18 03:18:58','2019-09-18 03:18:58'),(113,'editor/2019/09/ce1189c1b197a2ac93d6d8d505d968e1.jpg','100114c5m5bwd5vg4w5651.jpg','image/jpeg','296.44KB','FtzqM5DCZ3tg8tQ9E71QFoC-AbVn','https://net.lnmpa.top/editor/2019/09/ce1189c1b197a2ac93d6d8d505d968e1.jpg-water','2019-09-18 03:19:25','2019-09-18 03:19:25'),(114,'thumbnail/2019/09/98e174a90bc67258f795228ecb8a0f0b.jpg','230602g8d8uosrzu2so3iu.jpg','image/jpeg','9.46KB','Fm7TNDVWLTUk3aWdbQ95C3s6nN3J','https://net.lnmpa.top/thumbnail/2019/09/98e174a90bc67258f795228ecb8a0f0b.jpg-water','2019-09-18 03:20:57','2019-09-18 03:20:57'),(115,'thumbnail/2019/09/762e70d82c4508de1ead5bbae51f9844.png','120449h724at4uam2bt72a.png','image/png','138.26KB','FrqqbDSYNlcZNyZrydJ_ljT2az76','https://net.lnmpa.top/thumbnail/2019/09/762e70d82c4508de1ead5bbae51f9844.png-water','2019-09-18 03:27:37','2019-09-18 03:27:37'),(116,'thumbnail/2019/09/66a2dee33cfd9d2d83253e33162b767c.jpg','211158lziiicxg1clxdlc6.jpg','image/jpeg','218.42KB','FqnUQdX79-3oJY21Hq-3mM5xfNMO','https://net.lnmpa.top/thumbnail/2019/09/66a2dee33cfd9d2d83253e33162b767c.jpg-water','2019-09-18 07:14:25','2019-09-18 07:14:25'),(117,'thumbnail/2019/09/27132c99c88dea1777351d5f4f92c4f3.jpg','200350nz9n6oinf1i3m9ts.jpg','image/jpeg','52.65KB','FtLVibnbPVI8feyjiRy1WyaREd_D','https://net.lnmpa.top/thumbnail/2019/09/27132c99c88dea1777351d5f4f92c4f3.jpg-water','2019-09-18 07:28:00','2019-09-18 07:28:00'),(118,'thumbnail/2019/09/b91c5ee6551902576f0f63e6d0734896.png','200606rts7i45qqieyytwq.png','image/png','21.79KB','Fk2yzIa77K0kkx5BbzcGpjY2q3DQ','https://net.lnmpa.top/thumbnail/2019/09/b91c5ee6551902576f0f63e6d0734896.png-water','2019-09-18 07:42:51','2019-09-18 07:42:51'),(119,'thumbnail/2019/09/9b482e2487f94b120e45d557c3fdfa4b.png','121810k2xrrerk84kt468k.png','image/png','28.57KB','FtXim1TaqAp4HQIrzG_AfCOnoKSY','https://net.lnmpa.top/thumbnail/2019/09/9b482e2487f94b120e45d557c3fdfa4b.png-water','2019-09-18 07:46:13','2019-09-18 07:46:13'),(120,'thumbnail/2019/09/437aaf52140b160af02c79c508bc88f1.jpg','230232hzveaaihvovvbbl8.jpg','image/jpeg','24.23KB','FmRK2wGaGz0fqnUSopyt25Fv4X-_','https://net.lnmpa.top/thumbnail/2019/09/437aaf52140b160af02c79c508bc88f1.jpg-water','2019-09-18 07:48:18','2019-09-18 07:48:18'),(121,'thumbnail/2019/09/504c85fdc41cc02ec96d467e925d4f3e.jpg','1029369hipkkq85r9qi6p5.jpg','image/jpeg','132.18KB','FtvcaBnbthLeL90NPHO37AGQNTHT','https://net.lnmpa.top/thumbnail/2019/09/504c85fdc41cc02ec96d467e925d4f3e.jpg-water','2019-09-18 07:54:02','2019-09-18 07:54:02'),(122,'thumbnail/2019/09/8e9b8b1e54c255fa94384c926527a0e8.jpg','230131jwz6642cuj6466s2.jpg','image/jpeg','74.47KB','Fv0Xbb0bxxWv1v8pF9I0S76egngF','https://net.lnmpa.top/thumbnail/2019/09/8e9b8b1e54c255fa94384c926527a0e8.jpg-water','2019-09-18 07:58:50','2019-09-18 07:58:50'),(123,'thumbnail/2019/09/0d342a1ae7fe046e60223532b5e89e90.jpg','161614lojkhmmp03mb0mh3.jpg','image/jpeg','69.47KB','Fgvzu6Q5gJ4pXoxCvGbvffPi9m_W','https://net.lnmpa.top/thumbnail/2019/09/0d342a1ae7fe046e60223532b5e89e90.jpg-water','2019-09-18 11:58:38','2019-09-18 11:58:38');
/*!40000 ALTER TABLE `files` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `github_users`
--

DROP TABLE IF EXISTS `github_users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `github_users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(10) unsigned NOT NULL DEFAULT 0 COMMENT 'bind user, one-one',
  `login` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL,
  `token` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `name` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL,
  `nickname` varchar(64) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `email` varchar(64) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `avatar` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `public_repos` int(10) unsigned NOT NULL DEFAULT 0,
  `public_gists` int(10) unsigned NOT NULL DEFAULT 0,
  `followers` int(10) unsigned NOT NULL DEFAULT 0,
  `following` int(10) unsigned NOT NULL DEFAULT 0,
  `url` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `html_url` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `followers_url` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `subscriptions_url` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `organizations_url` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `repos_url` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `received_events_url` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `blog` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `location` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `hireable` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `bio` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `github_users`
--

LOCK TABLES `github_users` WRITE;
/*!40000 ALTER TABLE `github_users` DISABLE KEYS */;
/*!40000 ALTER TABLE `github_users` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `instagram_users`
--

DROP TABLE IF EXISTS `instagram_users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `instagram_users` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `instagram_users`
--

LOCK TABLES `instagram_users` WRITE;
/*!40000 ALTER TABLE `instagram_users` DISABLE KEYS */;
/*!40000 ALTER TABLE `instagram_users` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `links`
--

DROP TABLE IF EXISTS `links`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `links` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `url` varchar(225) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'url',
  `name` varchar(225) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT 'name',
  `desc` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `links_url_unique` (`url`),
  UNIQUE KEY `links_name_unique` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `links`
--

LOCK TABLES `links` WRITE;
/*!40000 ALTER TABLE `links` DISABLE KEYS */;
INSERT INTO `links` VALUES (1,'https://linux.cn','Linux中国','Linux 中国◆开源社区','2019-06-25 11:59:15','2019-06-25 11:59:15',NULL),(2,'https://mkblog.cn','孟坤博客','孟坤博客 | 每天进步一点点','2019-06-25 11:59:15','2019-06-25 11:59:15',NULL);
/*!40000 ALTER TABLE `links` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `migrations`
--

DROP TABLE IF EXISTS `migrations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `migrations` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `migration` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `batch` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=60 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `migrations`
--

LOCK TABLES `migrations` WRITE;
/*!40000 ALTER TABLE `migrations` DISABLE KEYS */;
INSERT INTO `migrations` VALUES (23,'2019_05_09_094718_create_articleables_table',1),(44,'2014_10_12_000000_create_users_table',2),(45,'2014_10_12_100000_create_password_resets_table',2),(46,'2019_04_17_115815_create_articles_table',2),(47,'2019_04_17_115828_create_tags_table',2),(48,'2019_04_17_115905_create_categories_table',2),(49,'2019_04_17_115919_create_comments_table',2),(50,'2019_04_19_091656_create_files_table',2),(51,'2019_04_25_070444_create_videos_table',2),(52,'2019_05_09_091849_create_articles_en_table',2),(53,'2019_05_09_093414_create_taggables_table',2),(54,'2019_05_14_072418_create_feedbacks_table',2),(55,'2019_05_31_085914_create_github_users_table',2),(56,'2019_05_31_090849_create_facebook_users_table',2),(57,'2019_05_31_090857_create_twitter_users_table',2),(58,'2019_05_31_090924_create_instagram_users_table',2),(59,'2019_06_24_053932_create_links_table',2);
/*!40000 ALTER TABLE `migrations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `password_resets`
--

DROP TABLE IF EXISTS `password_resets`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `password_resets` (
  `email` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `token` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  KEY `password_resets_email_index` (`email`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `password_resets`
--

LOCK TABLES `password_resets` WRITE;
/*!40000 ALTER TABLE `password_resets` DISABLE KEYS */;
/*!40000 ALTER TABLE `password_resets` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `replies`
--

DROP TABLE IF EXISTS `replies`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `replies` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL DEFAULT 0,
  `comment_id` int(11) NOT NULL,
  `nickname` varchar(225) DEFAULT NULL,
  `content` varchar(225) DEFAULT NULL,
  `origin` varchar(225) DEFAULT NULL,
  `user_agent` varchar(225) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `replies`
--

LOCK TABLES `replies` WRITE;
/*!40000 ALTER TABLE `replies` DISABLE KEYS */;
/*!40000 ALTER TABLE `replies` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `taggables`
--

DROP TABLE IF EXISTS `taggables`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `taggables` (
  `tag_id` int(10) unsigned NOT NULL,
  `taggable_id` int(10) unsigned NOT NULL,
  `taggable_type` varchar(64) COLLATE utf8mb4_unicode_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `taggables`
--

LOCK TABLES `taggables` WRITE;
/*!40000 ALTER TABLE `taggables` DISABLE KEYS */;
INSERT INTO `taggables` VALUES (1,1,'App\\Models\\Article'),(3,3,'App\\Models\\Article'),(5,5,'App\\Models\\Article'),(6,6,'App\\Models\\Article'),(7,7,'App\\Models\\Article'),(8,8,'App\\Models\\Article'),(7,9,'App\\Models\\Article'),(9,10,'App\\Models\\Article'),(10,11,'App\\Models\\Article'),(11,12,'App\\Models\\Article'),(13,18,'App\\Models\\Article'),(12,18,'App\\Models\\Article'),(2,2,'App\\Models\\Article'),(6,2,'App\\Models\\Article'),(4,4,'App\\Models\\Article'),(13,16,'App\\Models\\Article'),(6,17,'App\\Models\\Article'),(1,20,'App\\Models\\Article'),(14,21,'App\\Models\\Article'),(1,22,'App\\Models\\Article'),(7,23,'App\\Models\\Article'),(12,24,'App\\Models\\Article'),(15,25,'App\\Models\\Article'),(6,26,'App\\Models\\Article'),(5,27,'App\\Models\\Article'),(16,28,'App\\Models\\Article'),(5,28,'App\\Models\\Article'),(17,29,'App\\Models\\Article'),(15,30,'App\\Models\\Article'),(5,30,'App\\Models\\Article'),(5,31,'App\\Models\\Article'),(2,31,'App\\Models\\Article'),(18,32,'App\\Models\\Article'),(19,33,'App\\Models\\Article'),(19,34,'App\\Models\\Article'),(19,35,'App\\Models\\Article'),(19,36,'App\\Models\\Article'),(19,37,'App\\Models\\Article'),(19,38,'App\\Models\\Article'),(19,39,'App\\Models\\Article');
/*!40000 ALTER TABLE `taggables` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tags`
--

DROP TABLE IF EXISTS `tags`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tags` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(125) COLLATE utf8mb4_unicode_ci NOT NULL,
  `color` varchar(8) COLLATE utf8mb4_unicode_ci DEFAULT '#6006D5' COMMENT 'color',
  `style` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT 'successful' COMMENT 'class名',
  `description` mediumtext COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='tags table标签';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tags`
--

LOCK TABLES `tags` WRITE;
/*!40000 ALTER TABLE `tags` DISABLE KEYS */;
INSERT INTO `tags` VALUES (1,'Vim','#6006D5','vim','vim','2019-06-25 12:11:37','2019-06-25 12:11:51',NULL),(2,'Jacascript','#6006D5',NULL,'Jacascript','2019-06-26 01:51:15','2019-06-26 01:51:15',NULL),(3,'Google账户两步验证','#6006D5',NULL,'Google账户两步验证','2019-06-26 03:51:19','2019-06-26 03:51:19',NULL),(4,'哈希','#6006D5',NULL,'加密 哈希','2019-06-26 13:08:07','2019-06-26 13:08:07',NULL),(5,'高效编程技能','#6006D5',NULL,NULL,'2019-06-27 01:43:01','2019-06-27 01:43:01',NULL),(6,'调试工具','#6006D5',NULL,'PHP调试工具','2019-06-27 02:37:00','2019-06-27 02:37:00',NULL),(7,'Github','#6006D5',NULL,NULL,'2019-06-27 02:41:26','2019-06-27 02:41:26',NULL),(8,'Perl','#6006D5',NULL,'Perl开发者资源','2019-06-27 03:11:59','2019-06-27 03:12:08',NULL),(9,'Bootstrap','#6006D5',NULL,NULL,'2019-06-27 03:22:16','2019-06-27 03:22:16',NULL),(10,'PHP','#6006D5',NULL,'PHP语言需要避免的10大误区','2019-06-27 03:25:33','2019-06-27 03:25:46',NULL),(11,'Node','#6006D5',NULL,NULL,'2019-06-27 03:29:57','2019-06-27 03:30:04',NULL),(12,'内核','#6006D5',NULL,NULL,'2019-06-28 07:47:43','2019-06-28 07:47:43',NULL),(13,'黑客','#6006D5',NULL,NULL,'2019-06-28 07:47:51','2019-06-28 07:47:51',NULL),(14,'Markdown','#5E398E','aaa','aaaa','2019-08-30 14:00:19','2019-09-17 07:21:57',NULL),(15,'代码评审','#8864B7','代码评审','代码评审','2019-09-17 07:23:13','2019-09-18 02:32:35',NULL),(16,'算法','#573385',NULL,'算法','2019-09-18 03:09:49','2019-09-18 03:09:49',NULL),(17,'云架构','#6006D5',NULL,'云架构','2019-09-18 03:15:53','2019-09-18 03:15:53',NULL),(18,'代码规范','#A40DA2',NULL,'代码规范','2019-09-18 07:12:36','2019-09-18 07:12:36',NULL),(19,'树莓派','#31034B',NULL,'树莓派','2019-09-18 07:26:12','2019-09-18 07:26:12',NULL);
/*!40000 ALTER TABLE `tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `twitter_users`
--

DROP TABLE IF EXISTS `twitter_users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `twitter_users` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `twitter_users`
--

LOCK TABLES `twitter_users` WRITE;
/*!40000 ALTER TABLE `twitter_users` DISABLE KEYS */;
/*!40000 ALTER TABLE `twitter_users` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `nickname` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT '' COMMENT '账户昵称',
  `name` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '账户名称,可用作登录',
  `email` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '账户email,可用作登录',
  `password` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `avatar` varchar(200) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '用户头像链接',
  `introduction` mediumtext COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `is_admin` tinyint(3) unsigned NOT NULL DEFAULT 0,
  `remember_token` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `email_verified_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `users_name_unique` (`name`),
  UNIQUE KEY `users_email_unique` (`email`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='users table';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'','lx','lx@lx.com','$2y$10$nQb0PYiSC0wcvIY/zuImJeQaXg9HtVCMVY0Xkj3HLe6fWFkpfaeuK','https://net.lnmpa.top/owl/pic/default-avatar.jpg','xxx',1,NULL,NULL,NULL,NULL,NULL);
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `videos`
--

DROP TABLE IF EXISTS `videos`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `videos` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(10) unsigned NOT NULL DEFAULT 0,
  `category_id` int(10) unsigned NOT NULL DEFAULT 0,
  `view_count` int(10) unsigned NOT NULL DEFAULT 0,
  `size` varchar(32) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `mine` varchar(64) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `original_name` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `real_path` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `title` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `description` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `media_pic` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `media_url` varchar(225) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `more` mediumtext COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '额外字段',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `videos`
--

LOCK TABLES `videos` WRITE;
/*!40000 ALTER TABLE `videos` DISABLE KEYS */;
INSERT INTO `videos` VALUES (1,0,0,0,NULL,NULL,'xxxx',NULL,NULL,'dasdsadsa','dsadas','https://www.lnmpa.top/storage/video/HQ422_720x576_0824.mp4',NULL,'2019-07-10 05:24:37','2019-07-10 05:24:37',NULL),(2,0,0,0,NULL,NULL,'xxxx',NULL,NULL,'dasdsadsa','dsadas','https://www.lnmpa.top/storage/video/HQ422_720x576_0824.mp4',NULL,'2019-07-10 05:24:46','2019-07-10 05:24:46',NULL),(3,0,0,0,NULL,NULL,'xxxx',NULL,NULL,'dasdsadsa','dsadas','https://www.lnmpa.top/storage/video/HQ422_720x576_0824.mp4',NULL,'2019-07-10 05:24:54','2019-07-10 05:24:54',NULL);
/*!40000 ALTER TABLE `videos` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2019-09-20  3:10:01
